{
  "version": 3,
  "sources": ["../../fp-ts/es6/Alt.js", "../../fp-ts/es6/Alternative.js", "../../fp-ts/es6/Apply.js", "../../fp-ts/es6/function.js", "../../fp-ts/es6/internal.js", "../../fp-ts/es6/Applicative.js", "../../fp-ts/es6/Functor.js", "../../fp-ts/es6/Array.js", "../../fp-ts/es6/Chain.js", "../../fp-ts/es6/FromEither.js", "../../fp-ts/es6/NonEmptyArray.js", "../../fp-ts/es6/Ord.js", "../../fp-ts/es6/Eq.js", "../../fp-ts/es6/ReadonlyNonEmptyArray.js", "../../fp-ts/es6/Semigroup.js", "../../fp-ts/es6/Magma.js", "../../fp-ts/es6/ReadonlyArray.js", "../../fp-ts/es6/number.js", "../../fp-ts/es6/Separated.js", "../../fp-ts/es6/Witherable.js", "../../fp-ts/es6/Zero.js", "../../fp-ts/es6/Bifunctor.js", "../../fp-ts/es6/boolean.js", "../../fp-ts/es6/BooleanAlgebra.js", "../../fp-ts/es6/Bounded.js", "../../fp-ts/es6/BoundedDistributiveLattice.js", "../../fp-ts/es6/DistributiveLattice.js", "../../fp-ts/es6/BoundedJoinSemilattice.js", "../../fp-ts/es6/BoundedLattice.js", "../../fp-ts/es6/BoundedMeetSemilattice.js", "../../fp-ts/es6/Category.js", "../../fp-ts/es6/ChainRec.js", "../../fp-ts/es6/Choice.js", "../../fp-ts/es6/Comonad.js", "../../fp-ts/es6/Compactable.js", "../../fp-ts/es6/Option.js", "../../fp-ts/es6/Predicate.js", "../../fp-ts/es6/Console.js", "../../fp-ts/es6/Const.js", "../../fp-ts/es6/Contravariant.js", "../../fp-ts/es6/Date.js", "../../fp-ts/es6/Either.js", "../../fp-ts/es6/EitherT.js", "../../fp-ts/es6/Endomorphism.js", "../../fp-ts/es6/Extend.js", "../../fp-ts/es6/Field.js", "../../fp-ts/es6/Filterable.js", "../../fp-ts/es6/FilterableWithIndex.js", "../../fp-ts/es6/Foldable.js", "../../fp-ts/es6/FoldableWithIndex.js", "../../fp-ts/es6/FromIO.js", "../../fp-ts/es6/FromReader.js", "../../fp-ts/es6/Reader.js", "../../fp-ts/es6/FromState.js", "../../fp-ts/es6/State.js", "../../fp-ts/es6/FromTask.js", "../../fp-ts/es6/FromThese.js", "../../fp-ts/es6/FunctorWithIndex.js", "../../fp-ts/es6/Group.js", "../../fp-ts/es6/HeytingAlgebra.js", "../../fp-ts/es6/HKT/index.js", "../../fp-ts/es6/Identity.js", "../../fp-ts/es6/Invariant.js", "../../fp-ts/es6/IO.js", "../../fp-ts/es6/IOEither.js", "../../fp-ts/es6/IOOption.js", "../../fp-ts/es6/OptionT.js", "../../fp-ts/es6/IORef.js", "../../fp-ts/es6/JoinSemilattice.js", "../../fp-ts/es6/Json.js", "../../fp-ts/es6/Lattice.js", "../../fp-ts/es6/Map.js", "../../fp-ts/es6/ReadonlyMap.js", "../../fp-ts/es6/MeetSemilattice.js", "../../fp-ts/es6/Monad.js", "../../fp-ts/es6/MonadIO.js", "../../fp-ts/es6/MonadTask.js", "../../fp-ts/es6/MonadThrow.js", "../../fp-ts/es6/Monoid.js", "../../fp-ts/es6/NaturalTransformation.js", "../../fp-ts/es6/Ordering.js", "../../fp-ts/es6/pipeable.js", "../../fp-ts/es6/Pointed.js", "../../fp-ts/es6/Profunctor.js", "../../fp-ts/es6/Random.js", "../../fp-ts/es6/ReaderEither.js", "../../fp-ts/es6/ReaderIO.js", "../../fp-ts/es6/ReaderT.js", "../../fp-ts/es6/ReaderTask.js", "../../fp-ts/es6/Task.js", "../../fp-ts/es6/ReaderTaskEither.js", "../../fp-ts/es6/TaskEither.js", "../../fp-ts/es6/ReadonlyRecord.js", "../../fp-ts/es6/string.js", "../../fp-ts/es6/ReadonlySet.js", "../../fp-ts/es6/ReadonlyTuple.js", "../../fp-ts/es6/Record.js", "../../fp-ts/es6/Refinement.js", "../../fp-ts/es6/Ring.js", "../../fp-ts/es6/Semigroupoid.js", "../../fp-ts/es6/Semiring.js", "../../fp-ts/es6/Set.js", "../../fp-ts/es6/Show.js", "../../fp-ts/es6/StateReaderTaskEither.js", "../../fp-ts/es6/StateT.js", "../../fp-ts/es6/Store.js", "../../fp-ts/es6/Strong.js", "../../fp-ts/es6/struct.js", "../../fp-ts/es6/TaskOption.js", "../../fp-ts/es6/TaskThese.js", "../../fp-ts/es6/These.js", "../../fp-ts/es6/TheseT.js", "../../fp-ts/es6/Traced.js", "../../fp-ts/es6/Traversable.js", "../../fp-ts/es6/TraversableWithIndex.js", "../../fp-ts/es6/Tree.js", "../../fp-ts/es6/Tuple.js", "../../fp-ts/es6/Unfoldable.js", "../../fp-ts/es6/ValidationT.js", "../../fp-ts/es6/void.js", "../../fp-ts/es6/Writer.js", "../../fp-ts/es6/WriterT.js"],
  "sourcesContent": ["export function altAll(F) {\n    return function (startWith) { return function (as) { return as.reduce(function (acc, a) { return F.alt(acc, function () { return a; }); }, startWith); }; };\n}\n", "/**\n * The `Alternative` type class extends the `Alt` type class with a value that should be the left and right identity for `alt`.\n *\n * It is similar to `Monoid`, except that it applies to types of kind `* -> *`, like `Array` or `Option`, rather than\n * concrete types like `string` or `number`.\n *\n * `Alternative` instances should satisfy the following laws:\n *\n * 1. Left identity: `A.alt(zero, fa) <-> fa`\n * 2. Right identity: `A.alt(fa, zero) <-> fa`\n * 3. Annihilation: `A.map(zero, f) <-> zero`\n * 4. Distributivity: `A.ap(A.alt(fab, gab), fa) <-> A.alt(A.ap(fab, fa), A.ap(gab, fa))`\n * 5. Annihilation: `A.ap(zero, fa) <-> zero`\n *\n * @since 2.0.0\n */\nimport { altAll as altAll_ } from './Alt';\nimport { getApplySemigroup } from './Apply';\nexport function altAll(F) {\n    return altAll_(F)(F.zero());\n}\nexport function getAlternativeMonoid(F) {\n    var f = getApplySemigroup(F);\n    return function (S) {\n        var SF = f(S);\n        return {\n            concat: function (first, second) {\n                return F.alt(SF.concat(first, second), function () { return F.alt(first, function () { return second; }); });\n            },\n            empty: F.zero()\n        };\n    };\n}\n", "/**\n * The `Apply` class provides the `ap` which is used to apply a function to an argument under a type constructor.\n *\n * `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor\n * `f`.\n *\n * Instances must satisfy the following law in addition to the `Functor` laws:\n *\n * 1. Associative composition: `F.ap(F.ap(F.map(fbc, bc => ab => a => bc(ab(a))), fab), fa) <-> F.ap(fbc, F.ap(fab, fa))`\n *\n * Formally, `Apply` represents a strong lax semi-monoidal endofunctor.\n *\n * @example\n * import * as O from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (a: string) => (b: number) => (c: boolean) => a + String(b) + String(c)\n * const fa: O.Option<string> = O.some('s')\n * const fb: O.Option<number> = O.some(1)\n * const fc: O.Option<boolean> = O.some(true)\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     // lift a function\n *     O.some(f),\n *     // apply the first argument\n *     O.ap(fa),\n *     // apply the second argument\n *     O.ap(fb),\n *     // apply the third argument\n *     O.ap(fc)\n *   ),\n *   O.some('s1true')\n * )\n *\n * @since 2.0.0\n */\nimport { tuple } from './function';\nimport * as _ from './internal';\nexport function ap(F, G) {\n    return function (fa) {\n        return function (fab) {\n            return F.ap(F.map(fab, function (gab) { return function (ga) { return G.ap(gab, ga); }; }), fa);\n        };\n    };\n}\nexport function apFirst(A) {\n    return function (second) { return function (first) {\n        return A.ap(A.map(first, function (a) { return function () { return a; }; }), second);\n    }; };\n}\nexport function apSecond(A) {\n    return function (second) {\n        return function (first) {\n            return A.ap(A.map(first, function () { return function (b) { return b; }; }), second);\n        };\n    };\n}\nexport function apS(F) {\n    return function (name, fb) {\n        return function (fa) {\n            return F.ap(F.map(fa, function (a) { return function (b) {\n                var _a;\n                return Object.assign({}, a, (_a = {}, _a[name] = b, _a));\n            }; }), fb);\n        };\n    };\n}\nexport function getApplySemigroup(F) {\n    return function (S) { return ({\n        concat: function (first, second) {\n            return F.ap(F.map(first, function (x) { return function (y) { return S.concat(x, y); }; }), second);\n        }\n    }); };\n}\nfunction curried(f, n, acc) {\n    return function (x) {\n        var combined = Array(acc.length + 1);\n        for (var i = 0; i < acc.length; i++) {\n            combined[i] = acc[i];\n        }\n        combined[acc.length] = x;\n        return n === 0 ? f.apply(null, combined) : curried(f, n - 1, combined);\n    };\n}\nvar tupleConstructors = {\n    1: function (a) { return [a]; },\n    2: function (a) { return function (b) { return [a, b]; }; },\n    3: function (a) { return function (b) { return function (c) { return [a, b, c]; }; }; },\n    4: function (a) { return function (b) { return function (c) { return function (d) { return [a, b, c, d]; }; }; }; },\n    5: function (a) { return function (b) { return function (c) { return function (d) { return function (e) { return [a, b, c, d, e]; }; }; }; }; }\n};\nfunction getTupleConstructor(len) {\n    if (!_.has.call(tupleConstructors, len)) {\n        tupleConstructors[len] = curried(tuple, len - 1, []);\n    }\n    return tupleConstructors[len];\n}\nexport function sequenceT(F) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var len = args.length;\n        var f = getTupleConstructor(len);\n        var fas = F.map(args[0], f);\n        for (var i = 1; i < len; i++) {\n            fas = F.ap(fas, args[i]);\n        }\n        return fas;\n    };\n}\nfunction getRecordConstructor(keys) {\n    var len = keys.length;\n    switch (len) {\n        case 1:\n            return function (a) {\n                var _a;\n                return (_a = {}, _a[keys[0]] = a, _a);\n            };\n        case 2:\n            return function (a) { return function (b) {\n                var _a;\n                return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a);\n            }; };\n        case 3:\n            return function (a) { return function (b) { return function (c) {\n                var _a;\n                return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a[keys[2]] = c, _a);\n            }; }; };\n        case 4:\n            return function (a) { return function (b) { return function (c) { return function (d) {\n                var _a;\n                return (_a = {},\n                    _a[keys[0]] = a,\n                    _a[keys[1]] = b,\n                    _a[keys[2]] = c,\n                    _a[keys[3]] = d,\n                    _a);\n            }; }; }; };\n        case 5:\n            return function (a) { return function (b) { return function (c) { return function (d) { return function (e) {\n                var _a;\n                return (_a = {},\n                    _a[keys[0]] = a,\n                    _a[keys[1]] = b,\n                    _a[keys[2]] = c,\n                    _a[keys[3]] = d,\n                    _a[keys[4]] = e,\n                    _a);\n            }; }; }; }; };\n        default:\n            return curried(function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var r = {};\n                for (var i = 0; i < len; i++) {\n                    r[keys[i]] = args[i];\n                }\n                return r;\n            }, len - 1, []);\n    }\n}\nexport function sequenceS(F) {\n    return function (r) {\n        var keys = Object.keys(r);\n        var len = keys.length;\n        var f = getRecordConstructor(keys);\n        var fr = F.map(r[keys[0]], f);\n        for (var i = 1; i < len; i++) {\n            fr = F.ap(fr, r[keys[i]]);\n        }\n        return fr;\n    };\n}\n", "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getBooleanAlgebra = function (B) {\n    return function () { return ({\n        meet: function (x, y) { return function (a) { return B.meet(x(a), y(a)); }; },\n        join: function (x, y) { return function (a) { return B.join(x(a), y(a)); }; },\n        zero: function () { return B.zero; },\n        one: function () { return B.one; },\n        implies: function (x, y) { return function (a) { return B.implies(x(a), y(a)); }; },\n        not: function (x) { return function (a) { return B.not(x(a)); }; }\n    }); };\n};\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function (S) {\n    return function () { return ({\n        concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }\n    }); };\n};\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/Predicate'\n * import { getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getMonoid = function (M) {\n    var getSemigroupM = getSemigroup(M);\n    return function () { return ({\n        concat: getSemigroupM().concat,\n        empty: function () { return M.empty; }\n    }); };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getSemiring = function (S) { return ({\n    add: function (f, g) { return function (x) { return S.add(f(x), g(x)); }; },\n    zero: function () { return S.zero; },\n    mul: function (f, g) { return function (x) { return S.mul(f(x), g(x)); }; },\n    one: function () { return S.one; }\n}); };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getRing = function (R) {\n    var S = getSemiring(R);\n    return {\n        add: S.add,\n        mul: S.mul,\n        one: S.one,\n        zero: S.zero,\n        sub: function (f, g) { return function (x) { return R.sub(f(x), g(x)); }; }\n    };\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var apply = function (a) {\n    return function (f) {\n        return f(a);\n    };\n};\n/**\n * @since 2.0.0\n */\nexport function identity(a) {\n    return a;\n}\n/**\n * @since 2.0.0\n */\nexport var unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\nexport function constant(a) {\n    return function () { return a; };\n}\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\nexport var constTrue = /*#__PURE__*/ constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\nexport var constFalse = /*#__PURE__*/ constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\nexport var constNull = /*#__PURE__*/ constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\nexport var constUndefined = /*#__PURE__*/ constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\nexport var constVoid = constUndefined;\nexport function flip(f) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length > 1) {\n            return f(args[1], args[0]);\n        }\n        return function (a) { return f(a)(args[0]); };\n    };\n}\nexport function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n    switch (arguments.length) {\n        case 1:\n            return ab;\n        case 2:\n            return function () {\n                return bc(ab.apply(this, arguments));\n            };\n        case 3:\n            return function () {\n                return cd(bc(ab.apply(this, arguments)));\n            };\n        case 4:\n            return function () {\n                return de(cd(bc(ab.apply(this, arguments))));\n            };\n        case 5:\n            return function () {\n                return ef(de(cd(bc(ab.apply(this, arguments)))));\n            };\n        case 6:\n            return function () {\n                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n            };\n        case 7:\n            return function () {\n                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n            };\n        case 8:\n            return function () {\n                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n            };\n        case 9:\n            return function () {\n                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n            };\n    }\n    return;\n}\n/**\n * @since 2.0.0\n */\nexport function tuple() {\n    var t = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        t[_i] = arguments[_i];\n    }\n    return t;\n}\n/**\n * @since 2.0.0\n */\nexport function increment(n) {\n    return n + 1;\n}\n/**\n * @since 2.0.0\n */\nexport function decrement(n) {\n    return n - 1;\n}\n/**\n * @since 2.0.0\n */\nexport function absurd(_) {\n    throw new Error('Called `absurd` function which should be uncallable');\n}\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\nexport function tupled(f) {\n    return function (a) { return f.apply(void 0, a); };\n}\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\nexport function untupled(f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return f(a);\n    };\n}\nexport function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n    switch (arguments.length) {\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        default: {\n            var ret = arguments[0];\n            for (var i = 1; i < arguments.length; i++) {\n                ret = arguments[i](ret);\n            }\n            return ret;\n        }\n    }\n}\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\nexport var hole = absurd;\n/**\n * @since 2.11.0\n */\nexport var SK = function (_, b) { return b; };\n/**\n * Use `Predicate` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function not(predicate) {\n    return function (a) { return !predicate(a); };\n}\n/**\n * Use `Endomorphism` module instead.\n *\n * @category zone of death\n * @since 2.10.0\n * @deprecated\n */\nexport var getEndomorphismMonoid = function () { return ({\n    concat: function (first, second) { return flow(first, second); },\n    empty: identity\n}); };\n/** @internal */\nexport var dual = function (arity, body) {\n    var isDataFirst = typeof arity === 'number' ? function (args) { return args.length >= arity; } : arity;\n    return function () {\n        var args = Array.from(arguments);\n        if (isDataFirst(arguments)) {\n            return body.apply(this, args);\n        }\n        return function (self) { return body.apply(void 0, __spreadArray([self], args, false)); };\n    };\n};\n", "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { dual } from './function';\n// -------------------------------------------------------------------------------------\n// Option\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var isNone = function (fa) { return fa._tag === 'None'; };\n/** @internal */\nexport var isSome = function (fa) { return fa._tag === 'Some'; };\n/** @internal */\nexport var none = { _tag: 'None' };\n/** @internal */\nexport var some = function (a) { return ({ _tag: 'Some', value: a }); };\n// -------------------------------------------------------------------------------------\n// Either\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var isLeft = function (ma) { return ma._tag === 'Left'; };\n/** @internal */\nexport var isRight = function (ma) { return ma._tag === 'Right'; };\n/** @internal */\nexport var left = function (e) { return ({ _tag: 'Left', left: e }); };\n/** @internal */\nexport var right = function (a) { return ({ _tag: 'Right', right: a }); };\n// -------------------------------------------------------------------------------------\n// ReadonlyNonEmptyArray\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var singleton = function (a) { return [a]; };\n/** @internal */\nexport var isNonEmpty = function (as) { return as.length > 0; };\n/** @internal */\nexport var head = function (as) { return as[0]; };\n/** @internal */\nexport var tail = function (as) { return as.slice(1); };\n// -------------------------------------------------------------------------------------\n// empty\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var emptyReadonlyArray = [];\n/** @internal */\nexport var emptyRecord = {};\n// -------------------------------------------------------------------------------------\n// Record\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var has = Object.prototype.hasOwnProperty;\n// -------------------------------------------------------------------------------------\n// NonEmptyArray\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var fromReadonlyNonEmptyArray = function (as) { return __spreadArray([as[0]], as.slice(1), true); };\n/** @internal */\nexport var liftNullable = function (F) {\n    return function (f, onNullable) {\n        return function () {\n            var a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                a[_i] = arguments[_i];\n            }\n            var o = f.apply(void 0, a);\n            return F.fromEither(o == null ? left(onNullable.apply(void 0, a)) : right(o));\n        };\n    };\n};\n/** @internal */\nexport var liftOption = function (F) {\n    return function (f, onNone) {\n        return function () {\n            var a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                a[_i] = arguments[_i];\n            }\n            var o = f.apply(void 0, a);\n            return F.fromEither(isNone(o) ? left(onNone.apply(void 0, a)) : right(o.value));\n        };\n    };\n};\n/** @internal */\nexport var flatMapNullable = function (F, M) {\n    return /*#__PURE__*/ dual(3, function (self, f, onNullable) {\n        return M.flatMap(self, liftNullable(F)(f, onNullable));\n    });\n};\n/** @internal */\nexport var flatMapOption = function (F, M) {\n    return /*#__PURE__*/ dual(3, function (self, f, onNone) { return M.flatMap(self, liftOption(F)(f, onNone)); });\n};\n/** @internal */\nexport var flatMapEither = function (F, M) {\n    return /*#__PURE__*/ dual(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromEither(f(a)); });\n    });\n};\n/** @internal */\nexport var flatMapIO = function (F, M) {\n    return /*#__PURE__*/ dual(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromIO(f(a)); });\n    });\n};\n/** @internal */\nexport var flatMapTask = function (F, M) {\n    return /*#__PURE__*/ dual(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromTask(f(a)); });\n    });\n};\n/** @internal */\nexport var flatMapReader = function (F, M) {\n    return /*#__PURE__*/ dual(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromReader(f(a)); });\n    });\n};\n", "/**\n * The `Applicative` type class extends the `Apply` type class with a `of` function, which can be used to create values\n * of type `f a` from values of type `a`.\n *\n * Where `Apply` provides the ability to lift functions of two or more arguments to functions whose arguments are\n * wrapped using `f`, and `Functor` provides the ability to lift functions of one argument, `pure` can be seen as the\n * function which lifts functions of _zero_ arguments. That is, `Applicative` functors support a lifting operation for\n * any number of function arguments.\n *\n * Instances must satisfy the following laws in addition to the `Apply` laws:\n *\n * 1. Identity: `A.ap(A.of(a => a), fa) <-> fa`\n * 2. Homomorphism: `A.ap(A.of(ab), A.of(a)) <-> A.of(ab(a))`\n * 3. Interchange: `A.ap(fab, A.of(a)) <-> A.ap(A.of(ab => ab(a)), fab)`\n *\n * Note. `Functor`'s `map` can be derived: `A.map(x, f) = A.ap(A.of(f), x)`\n *\n * @since 2.0.0\n */\nimport { ap, getApplySemigroup } from './Apply';\nimport { pipe } from './function';\nimport { getFunctorComposition } from './Functor';\nexport function getApplicativeMonoid(F) {\n    var f = getApplySemigroup(F);\n    return function (M) { return ({\n        concat: f(M).concat,\n        empty: F.of(M.empty)\n    }); };\n}\n/** @deprecated */\nexport function getApplicativeComposition(F, G) {\n    var map = getFunctorComposition(F, G).map;\n    var _ap = ap(F, G);\n    return {\n        map: map,\n        of: function (a) { return F.of(G.of(a)); },\n        ap: function (fgab, fga) { return pipe(fgab, _ap(fga)); }\n    };\n}\n", "/**\n * A `Functor` is a type constructor which supports a mapping operation `map`.\n *\n * `map` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return types use the type\n * constructor `f` to represent some computational context.\n *\n * Instances must satisfy the following laws:\n *\n * 1. Identity: `F.map(fa, a => a) <-> fa`\n * 2. Composition: `F.map(fa, a => bc(ab(a))) <-> F.map(F.map(fa, ab), bc)`\n *\n * @since 2.0.0\n */\nimport { pipe } from './function';\nexport function map(F, G) {\n    return function (f) { return function (fa) { return F.map(fa, function (ga) { return G.map(ga, f); }); }; };\n}\nexport function flap(F) {\n    return function (a) { return function (fab) { return F.map(fab, function (f) { return f(a); }); }; };\n}\nexport function bindTo(F) {\n    return function (name) { return function (fa) { return F.map(fa, function (a) {\n        var _a;\n        return (_a = {}, _a[name] = a, _a);\n    }); }; };\n}\nfunction let_(F) {\n    return function (name, f) { return function (fa) { return F.map(fa, function (a) {\n        var _a;\n        return Object.assign({}, a, (_a = {}, _a[name] = f(a), _a));\n    }); }; };\n}\nexport { \n/**\n * @since 2.13.0\n */\nlet_ as let };\n/** @deprecated */\nexport function getFunctorComposition(F, G) {\n    var _map = map(F, G);\n    return {\n        map: function (fga, f) { return pipe(fga, _map(f)); }\n    };\n}\n/** @internal */\nexport function as(F) {\n    return function (self, b) { return F.map(self, function () { return b; }); };\n}\n/** @internal */\nexport function asUnit(F) {\n    var asM = as(F);\n    return function (self) { return asM(self, undefined); };\n}\n", "import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { dual, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as NEA from './NonEmptyArray';\nimport * as RA from './ReadonlyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n * assert.strictEqual(isEmpty(['a']), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isEmpty = function (as) { return as.length === 0; };\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @example\n * import { isNonEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isNonEmpty([]), false)\n * assert.strictEqual(isNonEmpty(['a']), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNonEmpty = NEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var prepend = NEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @example\n * import { prependW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prependW(\"a\")), [\"a\", 2, 3, 4]);\n *\n * @since 2.11.0\n */\nexport var prependW = NEA.prependW;\n/**\n * Append an element to the end of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var append = NEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @example\n * import { appendW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], appendW(\"d\")), [1, 2, 3, \"d\"]);\n *\n * @since 2.11.0\n */\nexport var appendW = NEA.appendW;\n/**\n * Return a `Array` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (i: number): number => i * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n * assert.deepStrictEqual(makeBy(-3, double), [])\n * assert.deepStrictEqual(makeBy(4.32164, double), [0, 2, 4, 6])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var makeBy = function (n, f) { return (n <= 0 ? [] : NEA.makeBy(f)(n)); };\n/**\n * Create a `Array` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n * assert.deepStrictEqual(replicate(-3, 'a'), [])\n * assert.deepStrictEqual(replicate(2.985647, 'a'), ['a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var replicate = function (n, a) { return makeBy(n, function () { return a; }); };\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? [a] : []); };\n}\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * Create an array from an `Option`. The resulting array will contain the content of the\n * `Option` if it is `Some` and it will be empty if the `Option` is `None`.\n *\n * @example\n * import { fromOption } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(option.some(\"a\"), fromOption),[\"a\"])\n * assert.deepStrictEqual(pipe(option.none, fromOption),[])\n *\n * @category conversions\n * @since 2.11.0\n */\nexport var fromOption = function (ma) { return (_.isNone(ma) ? [] : [ma.value]); };\n/**\n * Create an array from an `Either`. The resulting array will contain the content of the\n * `Either` if it is `Right` and it will be empty if the `Either` is `Left`.\n *\n * @example\n * import { fromEither } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(either.right(\"r\"), fromEither), [\"r\"]);\n * assert.deepStrictEqual(pipe(either.left(\"l\"), fromEither), []);\n *\n * @category conversions\n * @since 2.11.0\n */\nexport var fromEither = function (e) { return (_.isLeft(e) ? [] : [e.right]); };\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @example\n * import { matchW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcherW = matchW(\n *   () => \"No elements\",\n *   (as) => as.length\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcherW), 4);\n * assert.deepStrictEqual(pipe([], matcherW), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();\n    };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` and returns the result.\n *\n * @example\n * import { match } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcher = match(\n *   () => \"No elements\",\n *   (as) => `Found ${as.length} element(s)`\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcher), \"Found 4 element(s)\");\n * assert.deepStrictEqual(pipe([], matcher), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchLeftW } from 'fp-ts/Array'\n *\n * const f = matchLeftW(\n *   () => 0,\n *   (head: string, tail: string[]) => `Found \"${head}\" followed by ${tail.length} elements`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found \"a\" followed by 2 elements');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchLeftW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(NEA.head(as), NEA.tail(as)) : onEmpty();\n    };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchRightW } from 'fp-ts/Array'\n *\n * const f = matchRightW(\n *   () => 0,\n *   (head: string[], tail: string) => `Found ${head.length} elements folllowed by \"${tail}\"`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found 2 elements folllowed by \"c\"');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchRightW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(NEA.init(as), NEA.last(as)) : onEmpty();\n    };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken  into its initial elements and the last element.\n *\n * @example\n * import { matchRight } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchRight(\n *   () => 0,\n *   (head, _) => 1 + len(head)\n * );\n * assert.strictEqual(len([1, 2, 3]), 3);\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var foldRight = matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Same as [`chain`](#chain), but passing also the index to the iterating function.\n *\n * @example\n * import { chainWithIndex, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (index: number, x: string) => replicate(2, `${x}${index}`);\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], chainWithIndex(f)), [\"a0\", \"a0\", \"b1\", \"b1\", \"c2\", \"c2\"]);\n *\n * @category sequencing\n * @since 2.7.0\n */\nexport var chainWithIndex = function (f) {\n    return function (as) {\n        var out = [];\n        for (var i = 0; i < as.length; i++) {\n            var bs = f(i, as[i]);\n            for (var j = 0; j < bs.length; j++) {\n                out.push(bs[j]);\n            }\n        }\n        return out;\n    };\n};\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @since 2.0.0\n */\nexport var scanLeft = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[0] = b;\n        for (var i = 0; i < len; i++) {\n            out[i + 1] = f(out[i], as[i]);\n        }\n        return out;\n    };\n};\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @since 2.0.0\n */\nexport var scanRight = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[len] = b;\n        for (var i = len - 1; i >= 0; i--) {\n            out[i] = f(as[i], out[i + 1]);\n        }\n        return out;\n    };\n};\n/**\n * Calculate the number of elements in a `Array`.\n *\n * @example\n * import { size } from 'fp-ts/Array'\n *\n * assert.strictEqual(size([\"a\",\"b\",\"c\"]),3)\n *\n * @since 2.10.0\n */\nexport var size = function (as) { return as.length; };\n/**\n * Test whether an array contains a particular index\n *\n * @example\n * import { isOutOfBound } from 'fp-ts/Array'\n *\n * assert.strictEqual(isOutOfBound(1,[\"a\",\"b\",\"c\"]),false)\n * assert.strictEqual(isOutOfBound(-1,[\"a\",\"b\",\"c\"]),true)\n * assert.strictEqual(isOutOfBound(3,[\"a\",\"b\",\"c\"]),true)\n *\n * @since 2.0.0\n */\nexport var isOutOfBound = NEA.isOutOfBound;\n// TODO: remove non-curried overloading in v3\n/**\n * This function provides a safe way to read a value at a particular index from an array.\n * It returns a `none` if the index is out of bounds, and a `some` of the element if the\n * index is valid.\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\nexport var lookup = RA.lookup;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.0.0\n */\nexport var head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.0.0\n */\nexport var last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.0.0\n */\nexport var tail = function (as) { return (isNonEmpty(as) ? _.some(NEA.tail(as)) : _.none); };\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.0.0\n */\nexport var init = function (as) { return (isNonEmpty(as) ? _.some(NEA.init(as)) : _.none); };\n/**\n * Keep only a max number of elements from the start of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3, 4, 5]), [1, 2]);\n * assert.deepStrictEqual(takeLeft(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeLeft(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeLeft(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nexport var takeLeft = function (n) {\n    return function (as) {\n        return isOutOfBound(n, as) ? copy(as) : as.slice(0, n);\n    };\n};\n/**\n * Keep only a max number of elements from the end of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5]);\n * assert.deepStrictEqual(takeRight(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeRight(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeRight(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nexport var takeRight = function (n) {\n    return function (as) {\n        return isOutOfBound(n, as) ? copy(as) : n === 0 ? [] : as.slice(-n);\n    };\n};\nexport function takeLeftWhile(predicate) {\n    return function (as) {\n        var out = [];\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            if (!predicate(a)) {\n                break;\n            }\n            out.push(a);\n        }\n        return out;\n    };\n}\nvar spanLeftIndex = function (as, predicate) {\n    var l = as.length;\n    var i = 0;\n    for (; i < l; i++) {\n        if (!predicate(as[i])) {\n            break;\n        }\n    }\n    return i;\n};\nexport function spanLeft(predicate) {\n    return function (as) {\n        var _a = splitAt(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];\n        return { init: init, rest: rest };\n    };\n}\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the start.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3]);\n * assert.deepStrictEqual(dropLeft(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropLeft(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropLeft(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nexport var dropLeft = function (n) {\n    return function (as) {\n        return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(n, as.length);\n    };\n};\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the end.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3]), [1]);\n * assert.deepStrictEqual(dropRight(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropRight(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropRight(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nexport var dropRight = function (n) {\n    return function (as) {\n        return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(0, as.length - n);\n    };\n};\nexport function dropLeftWhile(predicate) {\n    return function (as) { return as.slice(spanLeftIndex(as, predicate)); };\n}\n/**\n * `findIndex` returns an `Option` containing the first index for which a predicate holds.\n * It returns `None` if no element satisfies the predicate.\n * Similar to [`findFirst`](#findFirst) but returning the index instead of the element.\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\nexport var findIndex = RA.findIndex;\nexport function findFirst(predicate) {\n    return RA.findFirst(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array and\n * returns the first `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove18)(persons), some(\"Mary\"));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexport var findFirstMap = RA.findFirstMap;\nexport function findLast(predicate) {\n    return RA.findLast(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array starting from the\n * end and returns the last `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove18)(persons), some(\"Joey\"));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexport var findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate.\n * It returns an `Option` containing the index or `None` if not found.\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n * @since 2.0.0\n */\nexport var findLastIndex = RA.findLastIndex;\n/**\n * This function takes an array and makes a new array containing the same elements.\n *\n * @since 2.0.0\n */\nexport var copy = function (as) { return as.slice(); };\n/**\n * Insert an element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\nexport var insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n    };\n};\n/**\n * Change the element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\nexport var updateAt = function (i, a) { return modifyAt(i, function () { return a; }); };\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds.\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\nexport var deleteAt = function (i) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n    };\n};\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds.\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\nexport var modifyAt = function (i, f) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n    };\n};\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @since 2.0.0\n */\nexport var reverse = function (as) { return (isEmpty(as) ? [] : as.slice().reverse()); };\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Right` elements in the same order.\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @since 2.0.0\n */\nexport var rights = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Right') {\n            r.push(a.right);\n        }\n    }\n    return r;\n};\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Left` elements in the same order.\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @since 2.0.0\n */\nexport var lefts = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Left') {\n            r.push(a.left);\n        }\n    }\n    return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport var sort = function (O) {\n    return function (as) {\n        return as.length <= 1 ? copy(as) : as.slice().sort(O.compare);\n    };\n};\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @since 2.0.0\n */\nexport var zipWith = function (fa, fb, f) {\n    var fc = [];\n    var len = Math.min(fa.length, fb.length);\n    for (var i = 0; i < len; i++) {\n        fc[i] = f(fa[i], fb[i]);\n    }\n    return fc;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport var unzip = function (as) {\n    var fa = [];\n    var fb = [];\n    for (var i = 0; i < as.length; i++) {\n        fa[i] = as[i][0];\n        fb[i] = as[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Creates a new `Array`, prepending an element to every member of the input `Array`.\n *\n * @example\n * import { prependAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n    var f = NEA.prependAll(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : []); };\n};\n/**\n * Creates a new `Array` placing an element in between members of the input `Array`.\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n    var f = NEA.intersperse(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * Creates a new `Array` rotating the input `Array` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @since 2.0.0\n */\nexport var rotate = function (n) {\n    var f = NEA.rotate(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of an `Array`. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(0)), false)\n *\n * @since 2.0.0\n */\nexport var elem = RA.elem;\n/**\n * Creates a new `Array` removing duplicate elements, keeping the first occurrence of an element,\n * based on a `Eq<A>`.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.0.0\n */\nexport var uniq = function (E) {\n    var f = NEA.uniq(E);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.0.0\n */\nexport var sortBy = function (ords) {\n    var f = NEA.sortBy(ords);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as A from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return A.chop(as => {\n *     const { init, rest } = pipe(as, A.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @since 2.0.0\n */\nexport var chop = function (f) {\n    var g = NEA.chop(f);\n    return function (as) { return (isNonEmpty(as) ? g(as) : []); };\n};\n/**\n * Splits an `Array` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.0.0\n */\nexport var splitAt = function (n) {\n    return function (as) {\n        return n >= 1 && isNonEmpty(as) ? NEA.splitAt(n)(as) : isEmpty(as) ? [copy(as), []] : [[], copy(as)];\n    };\n};\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.0.0\n */\nexport var chunksOf = function (n) {\n    var f = NEA.chunksOf(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : []); };\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromOptionK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromOption(f.apply(void 0, a));\n    };\n};\nexport function comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    var go = function (scope, input) {\n        return isNonEmpty(input)\n            ? flatMap(NEA.head(input), function (a) { return go(pipe(scope, append(a)), NEA.tail(input)); })\n            : g.apply(void 0, scope) ? [f.apply(void 0, scope)]\n                : [];\n    };\n    return go([], input);\n}\n/**\n * @since 2.11.0\n */\nexport var concatW = function (second) {\n    return function (first) {\n        return isEmpty(first) ? copy(second) : isEmpty(second) ? copy(first) : first.concat(second);\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var concat = concatW;\nexport function union(E) {\n    var unionE = NEA.union(E);\n    return function (first, second) {\n        if (second === undefined) {\n            var unionE_1 = union(E);\n            return function (second) { return unionE_1(second, first); };\n        }\n        return isNonEmpty(first) && isNonEmpty(second)\n            ? unionE(second)(first)\n            : isNonEmpty(first)\n                ? copy(first)\n                : copy(second);\n    };\n}\nexport function intersection(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (ys) { return intersectionE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return elemE(a, ys); });\n    };\n}\nexport function difference(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var differenceE_1 = difference(E);\n            return function (ys) { return differenceE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return !elemE(a, ys); });\n    };\n}\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _filter = function (fa, predicate) { return pipe(fa, filter(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/* istanbul ignore next */\nvar _partitionWithIndex = function (fa, predicateWithIndex) { return pipe(fa, partitionWithIndex(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\n/* istanbul ignore next */\nvar _filterWithIndex = function (fa, predicateWithIndex) { return pipe(fa, filterWithIndex(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _extend = function (fa, f) { return pipe(fa, extend(f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\nvar _chainRecDepthFirst = RA._chainRecDepthFirst;\nvar _chainRecBreadthFirst = RA._chainRecBreadthFirst;\n/**\n * Given an element of the base type, `of` builds an `Array` containing just that\n * element of the base type (this is useful for building a `Monad`).\n *\n * @example\n * import { of } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(of(\"a\"), [\"a\"]);\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var of = NEA.of;\n/**\n * Makes an empty `Array`, useful for building a [`Monoid`](#Monoid)\n *\n * @since 2.7.0\n */\nexport var zero = function () { return []; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: Array<A>) => Array<B>`.\n * In practice it applies the base function to each element of the array and collects the\n * results in a new array.\n *\n * @example\n * import { map } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => n * 2;\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [2, 4, 6]);\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return fa.map(function (a) { return f(a); }); }; };\n/**\n * @example\n * import { ap, map, of } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * // a curried function with 3 input parameteres\n * const f = (s1: string) => (n: number) => (s2: string) => s1 + n + s2;\n *\n * // let's use `ap` to iterate `f` over an array for each input parameter\n * assert.deepStrictEqual(pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])), [\n *   \"a1😀\", \"a1😫\", \"a1😎\",\n *   \"a2😀\", \"a2😫\", \"a2😎\",\n *   \"b1😀\", \"b1😫\", \"b1😎\",\n *   \"b2😀\", \"b2😫\", \"b2😎\",\n * ]);\n *\n * // given Array implements the Applicative interface with the `of` method,\n * // we can write exactly the same thing in a more symmetric way\n * // using `of` on `f` and `ap` on each array in input\n * assert.deepStrictEqual(\n *   pipe(of(f), ap([\"a\", \"b\"]), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])),\n *   pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"]))\n * );\n *\n * @since 2.0.0\n */\nexport var ap = function (fa) {\n    return flatMap(function (f) { return pipe(fa, map(f)); });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to\n * determine the next computation.\n *\n * In other words it takes a function `f` that produces an array from a single element of\n * the base type `A` and returns a new function which applies `f` to each element of the\n * input array (like [`map`](#map)) and, instead of returning an array of arrays, concatenates the\n * results into a single array (like [`flatten`](#flatten)).\n *\n * @example\n * import { flatMap, map, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => replicate(n, `${n}`);\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [[\"1\"], [\"2\", \"2\"], [\"3\", \"3\", \"3\"]]);\n * assert.deepStrictEqual(pipe([1, 2, 3], flatMap(f)), [\"1\", \"2\", \"2\", \"3\", \"3\", \"3\"]);\n *\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return pipe(ma, chainWithIndex(function (i, a) { return f(a, i); }));\n});\n/**\n * Takes an array of arrays of `A` and flattens them into an array of `A`\n * by concatenating the elements of each array in order.\n *\n * @example\n * import { flatten } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(flatten([[\"a\"], [\"b\", \"c\"], [\"d\", \"e\", \"f\"]]), [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]);\n *\n * @category sequencing\n * @since 2.5.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * Same as [`map`](#map), but the iterating function takes both the index and the value\n * of the element.\n *\n * @example\n * import { mapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (i: number, s: string) => `${s} - ${i}`;\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], mapWithIndex(f)), [\"a - 0\", \"b - 1\", \"c - 2\"]);\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var mapWithIndex = function (f) { return function (fa) {\n    return fa.map(function (a, i) { return f(i, a); });\n}; };\n/**\n * Maps an array with an iterating function that takes the index and the value of\n * each element and returns an `Option`. It keeps only the `Some` values discarding\n * the `None`s.\n *\n * Same as [`filterMap`](#filterMap), but with an iterating function which takes also\n * the index as input.\n *\n * @example\n * import { filterMapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (i: number, s: string) => (i % 2 === 1 ? option.some(s.toUpperCase()) : option.none);\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMapWithIndex(f)), [\"NO\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMapWithIndex = function (f) {\n    return function (fa) {\n        var out = [];\n        for (var i = 0; i < fa.length; i++) {\n            var optionB = f(i, fa[i]);\n            if (_.isSome(optionB)) {\n                out.push(optionB.value);\n            }\n        }\n        return out;\n    };\n};\n/**\n * Maps an array with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (s: string) => s.length === 1 ? option.some(s.toUpperCase()) : option.none;\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMap(f)), [\"A\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = function (f) {\n    return filterMapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Compact an array of `Option`s discarding the `None` values and\n * keeping the `Some` values. It returns a new array containing the values of\n * the `Some` options.\n *\n * @example\n * import { compact } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n *\n * assert.deepStrictEqual(compact([option.some(\"a\"), option.none, option.some(\"b\")]), [\"a\", \"b\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = /*#__PURE__*/ filterMap(identity);\n/**\n * Separate an array of `Either`s into `Left`s and `Right`s, creating two new arrays:\n * one containing all the left values and one containing all the right values.\n *\n * @example\n * import { separate } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n *\n * assert.deepStrictEqual(separate([either.right(\"r1\"), either.left(\"l1\"), either.right(\"r2\")]), {\n *   left: [\"l1\"],\n *   right: [\"r1\", \"r2\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = function (fa) {\n    var left = [];\n    var right = [];\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var e = fa_1[_i];\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return separated(left, right);\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `filter` creates a new `Array` containing the elements of the original\n * `Array` for which the iterating function is `true`.\n *\n * @example\n * import { filter } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/string\";\n *\n * assert.deepStrictEqual(filter(isString)([\"a\", 1, {}, \"b\", 5]), [\"a\", \"b\"]);\n * assert.deepStrictEqual(filter((x:number) => x > 0)([-3, 1, -2, 5]), [1, 5]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = function (predicate) {\n    return function (as) {\n        return as.filter(predicate);\n    };\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `partition` creates two new `Array`s: `right` containing the elements of the original\n * `Array` for which the iterating function is `true`, `left` containing the elements\n * for which it is false.\n *\n * @example\n * import { partition } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/string\";\n *\n * assert.deepStrictEqual(partition(isString)([\"a\", 1, {}, \"b\", 5]), { left: [1, {}, 5], right: [\"a\", \"b\"] });\n * assert.deepStrictEqual(partition((x: number) => x > 0)([-3, 1, -2, 5]), { left: [-3, -2], right: [1, 5] });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * Same as [`partition`](#partition), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionWithIndex } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(partitionWithIndex((index, x: number) => index < 3 && x > 0)([-2, 5, 6, 7]), {\n *   left: [-2, 7],\n *   right: [5, 6],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < as.length; i++) {\n            var b = as[i];\n            if (predicateWithIndex(i, b)) {\n                right.push(b);\n            }\n            else {\n                left.push(b);\n            }\n        }\n        return separated(left, right);\n    };\n};\n/**\n * Given an iterating function that returns an `Either`,\n * `partitionMap` applies the iterating function to each element and it creates two `Array`s:\n * `right` containing the values of `Right` results, `left` containing the values of `Left` results.\n *\n * @example\n * import { partitionMap } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/Either\";\n *\n * const upperIfString = <B>(x: B): Either<B, string> =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMap(upperIfString)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7],\n *   right: [ 'HELLO', 'WORLD' ],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return partitionMapWithIndex(function (_, a) { return f(a); }); };\n/**\n * Same as [`partitionMap`](#partitionMap), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionMapWithIndex } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/Either\";\n *\n * const upperIfStringBefore3 = <B>(index: number, x: B): Either<B, string> =>\n *   index < 3 && typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMapWithIndex(upperIfStringBefore3)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7, \"world\"],\n *   right: [\"HELLO\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMapWithIndex = function (f) {\n    return function (fa) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < fa.length; i++) {\n            var e = f(i, fa[i]);\n            if (e._tag === 'Left') {\n                left.push(e.left);\n            }\n            else {\n                right.push(e.right);\n            }\n        }\n        return separated(left, right);\n    };\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) {\n    return function (fa) {\n        return fa.concat(that());\n    };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Array` concatenates the inputs into a single array.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * Same as [`filter`](#filter), but passing also the index to the iterating function.\n *\n * @example\n * import { filterWithIndex } from 'fp-ts/Array';\n *\n * const f = (index: number, x: number) => x > 0 && index <= 2;\n * assert.deepStrictEqual(filterWithIndex(f)([-3, 1, -2, 5]), [1]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        return as.filter(function (b, i) { return predicateWithIndex(i, b); });\n    };\n};\n/**\n * Given an iterating function that takes `Array<A>` as input, `extend` returns\n * an array containing the results of the iterating function applied to the whole input\n * `Array`, then to the input `Array` without the first element, then to the input\n * `Array` without the first two elements, etc.\n *\n * @example\n * import { extend } from 'fp-ts/Array'\n *\n * const f = (a: string[]) => a.join(\",\");\n * assert.deepStrictEqual(extend(f)([\"a\", \"b\", \"c\"]), [\"a,b,c\", \"b,c\", \"c\"]);\n *\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return wa.map(function (_, i) { return f(wa.slice(i)); });\n}; };\n/**\n * `duplicate` returns an array containing the whole input `Array`,\n * then to the input `Array` dropping the first element, then to the input\n * `Array` dropping the first two elements, etc.\n *\n * @example\n * import { duplicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(duplicate([\"a\", \"b\", \"c\"]), [[\"a\", \"b\", \"c\"], [\"b\", \"c\"], [\"c\"]]);\n *\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * Map and fold an `Array`.\n * Map the `Array` passing each value to the iterating function.\n * Then fold the results using the provided `Monoid`.\n *\n * @example\n * import { foldMap } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (s: string) => s.toUpperCase()\n * assert.deepStrictEqual(foldMap(monoid)(f)([\"a\", \"b\", \"c\"]), \"ABC\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = RA.foldMap;\n/**\n * Same as [`foldMap`](#foldMap) but passing also the index to the iterating function.\n *\n * @example\n * import { foldMapWithIndex } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (index:number, s: string) => `${s.toUpperCase()}(${index})`\n * assert.deepStrictEqual(foldMapWithIndex(monoid)(f)([\"a\", \"b\", \"c\"]), \"A(0)B(1)C(2)\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * Reduces an `Array`.\n *\n * `reduce` executes the supplied iterating function on each element of the array,\n * in order, passing in the element and the return value from the calculation on the preceding element.\n *\n * The first time that the iterating function is called there is no \"return value of the\n * previous calculation\", the initial value is used in its place.\n *\n * @example\n * import { reduce } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduce(5, (acc: number, cur: number) => acc * cur)([2, 3]), 5 * 2 * 3);\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = RA.reduce;\n/**\n * Same as [`reduce`](#reduce) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, acc: string, cur: unknown) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"A1B2\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceWithIndex = RA.reduceWithIndex;\n/**\n * Same as [`reduce`](#reduce) but applied from the end to the start.\n *\n * *Note*: the iterating function in this case takes the accumulator as the last argument.\n *\n * @example\n * import { reduceRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduceRight(\"\", (cur: string, acc: string) => acc + cur)([\"a\", \"b\", \"c\"]), \"cba\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = RA.reduceRight;\n/**\n * Same as [`reduceRight`](#reduceRight) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceRightWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, cur: unknown, acc: string) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceRightWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"B2A1\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * Given an iterating function that returns a `HKT` (higher kinded type), `traverse`\n * applies the iterating function to each element of the `Array` and then [`sequence`](#sequence)-s\n * the results using the provided `Applicative`.\n *\n * E.g. suppose you have an `Array` and you want to format each element with a function\n * that returns a result or an error as `f = (a: A) => Either<Error, B>`, using `traverse`\n * you can apply `f` to all elements and directly obtain as a result an `Either<Error,Array<B>>`\n * i.e. an `Array<B>` if all the results are `B`, or an `Error` if some of the results\n * are `Error`s.\n *\n * @example\n * import { traverse } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/Either\";\n *\n * const f = (x: unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", \"b\"]), right([\"A\", \"B\"]));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * `sequence` takes an `Array` where elements are `HKT<A>` (higher kinded type) and,\n * using an applicative of that `HKT`, returns an `HKT` of `Array<A>`.\n * E.g. it can turn an `Array<Either<Error, string>>` into an `Either<Error, Array<string>>`.\n *\n * `sequence` requires an `Applicative` of the `HKT` you are targeting, e.g. to turn an\n * `Array<Either<E, A>>` into an `Either<E, Array<A>>`, it needs an\n * `Applicative` for `Either`, to to turn an `Array<Option<A>>` into an `Option<Array<A>>`,\n * it needs an `Applicative` for `Option`.\n *\n * @example\n * import { sequence } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/Either\";\n *\n * assert.deepStrictEqual(sequence(Applicative)([right(\"a\"), right(\"b\")]), right([\"a\", \"b\"]));\n * assert.deepStrictEqual(\n *   sequence(Applicative)([right(\"a\"), left(new Error(\"not a string\"))]),\n *   left(new Error(\"not a string\"))\n * );\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ta) {\n        return _reduce(ta, F.of(zero()), function (fas, fa) {\n            return F.ap(F.map(fas, function (as) { return function (a) { return pipe(as, append(a)); }; }), fa);\n        });\n    };\n};\n/**\n * Same as [`traverse`](#traverse) but passing also the index to the iterating function.\n *\n * @example\n * import { traverseWithIndex } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/Either\";\n *\n * const f = (index:number, x:unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase() + index) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", \"b\"]), right([\"A0\", \"B1\"]));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category sequencing\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) {\n    return function (f) {\n        return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n            return F.ap(F.map(fbs, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, a));\n        });\n    };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * `unfold` takes a function `f` which returns an `Option` of a tuple containing an outcome\n * value and an input for the following iteration.\n * `unfold` applies `f` to the initial value `b` and then recursively to the second\n * element of the tuple contained in the returned `option` of the previous\n * calculation until `f` returns `Option.none`.\n *\n * @example\n * import { unfold } from 'fp-ts/Array'\n * import { option } from 'fp-ts'\n *\n * const f = (n: number) => {\n *   if (n <= 0) return option.none;\n *   const returnValue = n * 2;\n *   const inputForNextRound = n - 1;\n *   return option.some([returnValue, inputForNextRound] as const);\n * };\n * assert.deepStrictEqual(unfold(5, f), [10, 8, 6, 4, 2]);\n *\n * @since 2.6.6\n */\nexport var unfold = function (b, f) {\n    var out = [];\n    var bb = b;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        var mt = f(bb);\n        if (_.isSome(mt)) {\n            var _a = mt.value, a = _a[0], b_1 = _a[1];\n            out.push(a);\n            bb = b_1;\n        }\n        else {\n            break;\n        }\n    }\n    return out;\n};\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Array';\n/**\n * `getShow` makes a `Show` for an `Array<A>` from a `Show` for\n * an `A`.\n *\n * @example\n * import { getShow } from 'fp-ts/Array'\n *\n * const numShow = { show: (n: number) => (n >= 0 ? `${n}` : `(${-n})`) };\n * assert.deepStrictEqual(getShow(numShow).show([-2, -1, 0, 1]), \"[(2), (1), 0, 1]\");\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RA.getShow;\n/**\n * Get a `Semigroup` based on the concatenation of `Array`s.\n * See also [`getMonoid`](#getMonoid).\n *\n * @example\n * import { getSemigroup } from 'fp-ts/Array'\n *\n * const S = getSemigroup<number>();\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 2, 3]);\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (first, second) { return first.concat(second); }\n}); };\n/**\n * Returns a `Monoid` for `Array<A>` based on the concatenation of `Array`s.\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: []\n}); };\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = RA.getOrd;\n/**\n * Get a `Semigroup` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n * See also [`getUnionMonoid`](#getUnionMonoid).\n *\n * @example\n * import { getUnionSemigroup } from 'fp-ts/Array';\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getUnionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 3]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * Get a `Monoid` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n *\n * @example\n * import { getUnionMonoid } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const M = getUnionMonoid<number>(Eq);\n * assert.deepStrictEqual(M.concat([1, 2], [2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(M.empty,[]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E) { return ({\n    concat: getUnionSemigroup(E).concat,\n    empty: []\n}); };\n/**\n * Get a `Semigroup` based on the intersection of the elements of `Array`s.\n * Only elements present in the two arrays which are equal according to the\n * provided `Eq` are included in the result.\n *\n * @example\n * import { getIntersectionSemigroup } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getIntersectionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [2]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E) {\n    var intersectionE = intersection(E);\n    return {\n        concat: function (first, second) { return intersectionE(second)(first); }\n    };\n};\n/**\n * Get a `Magma` for `Array` where the `concat` function is the differnce between\n * the first and the second array, i.e. the result contains all the elements of the\n * first array for which their is no equal element in the second array according\n * to the `Eq` provided.\n *\n *\n * @example\n * import { getDifferenceMagma } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getDifferenceMagma<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Given an input an `Array` of functions, `flap` returns an `Array` containing\n * the results of applying each function to the given input.\n *\n * @example\n * import { flap } from 'fp-ts/Array'\n *\n * const funs = [\n *   (n: number) => `Double: ${n * 2}`,\n *   (n: number) => `Triple: ${n * 3}`,\n *   (n: number) => `Square: ${n * n}`,\n * ];\n * assert.deepStrictEqual(flap(4)(funs), ['Double: 8', 'Triple: 12', 'Square: 16']);\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/ chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Unfoldable = {\n    URI: URI,\n    unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/ guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverse: _traverse,\n    sequence: sequence,\n    traverseWithIndex: _traverseWithIndex\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecDepthFirst = RA.chainRecDepthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecDepthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap,\n    chainRec: _chainRecDepthFirst\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecBreadthFirst = RA.chainRecBreadthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecBreadthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap,\n    chainRec: _chainRecBreadthFirst\n};\n/**\n * Filter values inside a context.\n *\n * @since 2.11.0\n */\nexport var filterE = /*#__PURE__*/ filterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeInsertAt = NEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    return isNonEmpty(as) ? NEA.unsafeUpdateAt(i, a, as) : [];\n};\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeDeleteAt = function (i, as) {\n    var xs = as.slice();\n    xs.splice(i, 1);\n    return xs;\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * `every` tells if the provided predicate holds true for every element in the `Array`.\n *\n * @example\n * import { every } from 'fp-ts/Array'\n *\n * assert.equal(every((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(every((x: number) => x >= 0)([-1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nexport var every = RA.every;\n/**\n * `some` tells if the provided predicate holds true at least for one element in the `Array`.\n *\n * @example\n * import { some } from 'fp-ts/Array'\n *\n * assert.equal(some((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(some((x: number) => x >= 10)([1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nexport var some = function (predicate) {\n    return function (as) {\n        return as.some(predicate);\n    };\n};\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexport var exists = some;\n/**\n * Places an element in between members of an `Array`, then folds the results using the provided `Monoid`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexport var intercalate = RA.intercalate;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `NonEmptyArray` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var range = NEA.range;\n/**\n * Use a new `[]` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var empty = [];\n/**\n * Use `prepend` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var cons = NEA.cons;\n/**\n * Use `append` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var snoc = NEA.snoc;\n/**\n * Use `prependAll` instead\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `A.Functor` instead of `A.array`\n * (where `A` is from `import A from 'fp-ts/Array'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var array = {\n    URI: URI,\n    compact: compact,\n    separate: separate,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    alt: _alt,\n    zero: zero,\n    unfold: unfold,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    extend: _extend,\n    wither: _wither,\n    wilt: _wilt\n};\n", "export function chainFirst(M) {\n    var tapM = tap(M);\n    return function (f) { return function (first) { return tapM(first, f); }; };\n}\n/** @internal */\nexport function tap(M) {\n    return function (first, f) { return M.chain(first, function (a) { return M.map(f(a), function () { return a; }); }); };\n}\nexport function bind(M) {\n    return function (name, f) { return function (ma) { return M.chain(ma, function (a) { return M.map(f(a), function (b) {\n        var _a;\n        return Object.assign({}, a, (_a = {}, _a[name] = b, _a));\n    }); }); }; };\n}\n", "/**\n * The `FromEither` type class represents those data types which support errors.\n *\n * @since 2.10.0\n */\nimport { tap } from './Chain';\nimport { flow } from './function';\nimport * as _ from './internal';\nexport function fromOption(F) {\n    return function (onNone) { return function (ma) { return F.fromEither(_.isNone(ma) ? _.left(onNone()) : _.right(ma.value)); }; };\n}\nexport function fromPredicate(F) {\n    return function (predicate, onFalse) {\n        return function (a) {\n            return F.fromEither(predicate(a) ? _.right(a) : _.left(onFalse(a)));\n        };\n    };\n}\nexport function fromOptionK(F) {\n    var fromOptionF = fromOption(F);\n    return function (onNone) {\n        var from = fromOptionF(onNone);\n        return function (f) { return flow(f, from); };\n    };\n}\nexport function chainOptionK(F, M) {\n    var fromOptionKF = fromOptionK(F);\n    return function (onNone) {\n        var from = fromOptionKF(onNone);\n        return function (f) { return function (ma) { return M.chain(ma, from(f)); }; };\n    };\n}\nexport function fromEitherK(F) {\n    return function (f) { return flow(f, F.fromEither); };\n}\nexport function chainEitherK(F, M) {\n    var fromEitherKF = fromEitherK(F);\n    return function (f) { return function (ma) { return M.chain(ma, fromEitherKF(f)); }; };\n}\nexport function chainFirstEitherK(F, M) {\n    var tapEitherM = tapEither(F, M);\n    return function (f) { return function (ma) { return tapEitherM(ma, f); }; };\n}\nexport function filterOrElse(F, M) {\n    return function (predicate, onFalse) {\n        return function (ma) {\n            return M.chain(ma, function (a) { return F.fromEither(predicate(a) ? _.right(a) : _.left(onFalse(a))); });\n        };\n    };\n}\n/** @internal */\nexport function tapEither(F, M) {\n    var fromEither = fromEitherK(F);\n    var tapM = tap(M);\n    return function (self, f) { return tapM(self, fromEither(f)); };\n}\n", "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { dual, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport { getMonoid } from './Ord';\nimport * as RNEA from './ReadonlyNonEmptyArray';\n// -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n/**\n * @internal\n */\nexport var isNonEmpty = function (as) { return as.length > 0; };\n/**\n * @internal\n */\nexport var isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };\n/**\n * @internal\n */\nexport var prependW = function (head) {\n    return function (tail) {\n        return __spreadArray([head], tail, true);\n    };\n};\n/**\n * @internal\n */\nexport var prepend = prependW;\n/**\n * @internal\n */\nexport var appendW = function (end) {\n    return function (init) {\n        return __spreadArray(__spreadArray([], init, true), [end], false);\n    };\n};\n/**\n * @internal\n */\nexport var append = appendW;\n/**\n * @internal\n */\nexport var unsafeInsertAt = function (i, a, as) {\n    if (isNonEmpty(as)) {\n        var xs = fromReadonlyNonEmptyArray(as);\n        xs.splice(i, 0, a);\n        return xs;\n    }\n    return [a];\n};\n/**\n * @internal\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    var xs = fromReadonlyNonEmptyArray(as);\n    xs[i] = a;\n    return xs;\n};\n/**\n * Remove duplicates from a `NonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.11.0\n */\nexport var uniq = function (E) {\n    return function (as) {\n        if (as.length === 1) {\n            return copy(as);\n        }\n        var out = [head(as)];\n        var rest = tail(as);\n        var _loop_1 = function (a) {\n            if (out.every(function (o) { return !E.equals(o, a); })) {\n                out.push(a);\n            }\n        };\n        for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n            var a = rest_1[_i];\n            _loop_1(a);\n        }\n        return out;\n    };\n};\n/**\n * Sort the elements of a `NonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = NEA.sortBy([byName, byAge])\n *\n * const persons: NEA.NonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.11.0\n */\nexport var sortBy = function (ords) {\n    if (isNonEmpty(ords)) {\n        var M = getMonoid();\n        return sort(ords.reduce(M.concat, M.empty));\n    }\n    return copy;\n};\n/**\n * @since 2.11.0\n */\nexport var union = function (E) {\n    var uniqE = uniq(E);\n    return function (second) { return function (first) { return uniqE(pipe(first, concat(second))); }; };\n};\n/**\n * Rotate a `NonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @since 2.11.0\n */\nexport var rotate = function (n) {\n    return function (as) {\n        var len = as.length;\n        var m = Math.round(n) % len;\n        if (isOutOfBound(Math.abs(m), as) || m === 0) {\n            return copy(as);\n        }\n        if (m < 0) {\n            var _a = splitAt(-m)(as), f = _a[0], s = _a[1];\n            return pipe(s, concat(f));\n        }\n        else {\n            return rotate(m - len)(as);\n        }\n    };\n};\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromReadonlyNonEmptyArray = _.fromReadonlyNonEmptyArray;\n/**\n * Builds a `NonEmptyArray` from an `Array` returning `none` if `as` is an empty array\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromArray = function (as) { return (isNonEmpty(as) ? _.some(as) : _.none); };\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var makeBy = function (f) {\n    return function (n) {\n        var j = Math.max(0, Math.floor(n));\n        var out = [f(0)];\n        for (var i = 1; i < j; i++) {\n            out.push(f(i));\n        }\n        return out;\n    };\n};\n/**\n * Create a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var replicate = function (a) { return makeBy(function () { return a; }); };\n/**\n * Create a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var range = function (start, end) {\n    return start <= end ? makeBy(function (i) { return start + i; })(end - start + 1) : [start];\n};\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3]), [1, [2, 3]])\n *\n * @since 2.9.0\n */\nexport var unprepend = function (as) { return [head(as), tail(as)]; };\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @since 2.9.0\n */\nexport var unappend = function (as) { return [init(as), last(as)]; };\nexport function concatW(second) {\n    return function (first) { return first.concat(second); };\n}\nexport function concat(x, y) {\n    return y ? x.concat(y) : function (y) { return y.concat(x); };\n}\n/**\n * @since 2.0.0\n */\nexport var reverse = function (as) { return __spreadArray([last(as)], as.slice(0, -1).reverse(), true); };\nexport function group(E) {\n    return function (as) {\n        var len = as.length;\n        if (len === 0) {\n            return [];\n        }\n        var out = [];\n        var head = as[0];\n        var nea = [head];\n        for (var i = 1; i < len; i++) {\n            var a = as[i];\n            if (E.equals(a, head)) {\n                nea.push(a);\n            }\n            else {\n                out.push(nea);\n                head = a;\n                nea = [head];\n            }\n        }\n        out.push(nea);\n        return out;\n    };\n}\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @since 2.0.0\n */\nexport var groupBy = function (f) {\n    return function (as) {\n        var out = {};\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            var k = f(a);\n            if (_.has.call(out, k)) {\n                out[k].push(a);\n            }\n            else {\n                out[k] = [a];\n            }\n        }\n        return out;\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var sort = function (O) {\n    return function (as) {\n        return as.slice().sort(O.compare);\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var updateAt = function (i, a) {\n    return modifyAt(i, function () { return a; });\n};\n/**\n * @since 2.0.0\n */\nexport var modifyAt = function (i, f) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var copy = fromReadonlyNonEmptyArray;\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = function (a) { return [a]; };\n/**\n * @since 2.5.1\n */\nexport var zipWith = function (as, bs, f) {\n    var cs = [f(as[0], bs[0])];\n    var len = Math.min(as.length, bs.length);\n    for (var i = 1; i < len; i++) {\n        cs[i] = f(as[i], bs[i]);\n    }\n    return cs;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * @since 2.5.1\n */\nexport var unzip = function (abs) {\n    var fa = [abs[0][0]];\n    var fb = [abs[0][1]];\n    for (var i = 1; i < abs.length; i++) {\n        fa[i] = abs[i][0];\n        fb[i] = abs[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n    return function (as) {\n        var out = [middle, as[0]];\n        for (var i = 1; i < as.length; i++) {\n            out.push(middle, as[i]);\n        }\n        return out;\n    };\n};\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n    return function (as) {\n        var rest = tail(as);\n        return isNonEmpty(rest) ? pipe(rest, prependAll(middle), prepend(head(as))) : copy(as);\n    };\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMapWithIndex = RNEA.foldMapWithIndex;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = RNEA.foldMap;\n/**\n * @category sequencing\n * @since 2.10.0\n */\nexport var chainWithIndex = function (f) {\n    return function (as) {\n        var out = fromReadonlyNonEmptyArray(f(0, head(as)));\n        for (var i = 1; i < as.length; i++) {\n            var bs = f(i, as[i]);\n            for (var j = 0; j < bs.length; j++) {\n                out.push(bs[j]);\n            }\n        }\n        return out;\n    };\n};\n/**\n * @since 2.10.0\n */\nexport var chop = function (f) {\n    return function (as) {\n        var _a = f(as), b = _a[0], rest = _a[1];\n        var out = [b];\n        var next = rest;\n        while (isNonEmpty(next)) {\n            var _b = f(next), b_1 = _b[0], rest_2 = _b[1];\n            out.push(b_1);\n            next = rest_2;\n        }\n        return out;\n    };\n};\n/**\n * Splits a `NonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @since 2.10.0\n */\nexport var splitAt = function (n) {\n    return function (as) {\n        var m = Math.max(1, n);\n        return m >= as.length ? [copy(as), []] : [pipe(as.slice(1, m), prepend(head(as))), as.slice(m)];\n    };\n};\n/**\n * @since 2.10.0\n */\nexport var chunksOf = function (n) { return chop(splitAt(n)); };\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3] as NEA.NonEmptyArray<number>,\n *     NEA.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) {\n    return function (as) {\n        return pipe(as, concatW(that()));\n    };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `NonEmptyArray` concatenates the inputs into a single array.\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     NEA.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.6.2\n */\nexport var alt = altW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @since 2.0.0\n */\nexport var ap = function (as) {\n    return flatMap(function (f) { return pipe(as, map(f)); });\n};\n/**\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     NEA.flatMap((n) => [`a${n}`, `b${n}`])\n *   ),\n *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']\n * )\n *\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return pipe(ma, chainWithIndex(function (i, a) { return f(a, i); }));\n});\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) {\n    return function (as) {\n        var next = tail(as);\n        var out = [f(as)];\n        while (isNonEmpty(next)) {\n            out.push(f(next));\n            next = tail(next);\n        }\n        return out;\n    };\n};\n/**\n * @since 2.5.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * @category sequencing\n * @since 2.5.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return mapWithIndex(function (_, a) { return f(a); }); };\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport var mapWithIndex = function (f) {\n    return function (as) {\n        var out = [f(0, head(as))];\n        for (var i = 1; i < as.length; i++) {\n            out.push(f(i, as[i]));\n        }\n        return out;\n    };\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = RNEA.reduce;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceWithIndex = RNEA.reduceWithIndex;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = RNEA.reduceRight;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRightWithIndex = RNEA.reduceRightWithIndex;\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) { return traverseWithIndex(F)(function (_, a) { return a; }); };\n/**\n * @category sequencing\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) {\n    return function (f) {\n        return function (as) {\n            var out = F.map(f(0, head(as)), of);\n            for (var i = 1; i < as.length; i++) {\n                out = F.ap(F.map(out, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, as[i]));\n            }\n            return out;\n        };\n    };\n};\n/**\n * @since 2.7.0\n */\nexport var extract = RNEA.head;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'NonEmptyArray';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RNEA.getShow;\n/**\n * Builds a `Semigroup` instance for `NonEmptyArray`\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getSemigroup = function () { return ({\n    concat: concat\n}); };\n/**\n * @example\n * import { getEq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RNEA.getEq;\n/**\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category sequencing\n * @since 2.5.0\n */\nexport var chainFirst = \n/*#__PURE__*/ chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.0.0\n */\nexport var head = RNEA.head;\n/**\n * @since 2.0.0\n */\nexport var tail = function (as) { return as.slice(1); };\n/**\n * @since 2.0.0\n */\nexport var last = RNEA.last;\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.2.0\n */\nexport var init = function (as) { return as.slice(0, -1); };\n/**\n * @since 2.0.0\n */\nexport var min = RNEA.min;\n/**\n * @since 2.0.0\n */\nexport var max = RNEA.max;\n/**\n * @since 2.10.0\n */\nexport var concatAll = function (S) {\n    return function (as) {\n        return as.reduce(S.concat);\n    };\n};\n/**\n * Break an `Array` into its first element and remaining elements.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchLeft = function (f) {\n    return function (as) {\n        return f(head(as), tail(as));\n    };\n};\n/**\n * Break an `Array` into its initial elements and the last element.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchRight = function (f) {\n    return function (as) {\n        return f(init(as), last(as));\n    };\n};\n/**\n * Apply a function to the head, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyHead = function (f) {\n    return function (as) {\n        return __spreadArray([f(head(as))], tail(as), true);\n    };\n};\n/**\n * Change the head, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var updateHead = function (a) { return modifyHead(function () { return a; }); };\n/**\n * Apply a function to the last element, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyLast = function (f) {\n    return function (as) {\n        return pipe(init(as), append(f(last(as))));\n    };\n};\n/**\n * Change the last element, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var updateLast = function (a) { return modifyLast(function () { return a; }); };\n/**\n * Places an element in between members of a `NonEmptyArray`, then folds the results using the provided `Semigroup`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(intercalate(S.Semigroup)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexport var intercalate = RNEA.intercalate;\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\nexport function groupSort(O) {\n    var sortO = sort(O);\n    var groupO = group(O);\n    return function (as) { return (isNonEmpty(as) ? groupO(sortO(as)) : []); };\n}\nexport function filter(predicate) {\n    return filterWithIndex(function (_, a) { return predicate(a); });\n}\n/**\n * Use [`filterWithIndex`](./Array.ts.html#filterwithindex) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var filterWithIndex = function (predicate) {\n    return function (as) {\n        return fromArray(as.filter(function (a, i) { return predicate(i, a); }));\n    };\n};\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var uncons = unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var unsnoc = unappend;\nexport function cons(head, tail) {\n    return tail === undefined ? prepend(head) : pipe(tail, prepend(head));\n}\n/**\n * Use [`append`](./Array.ts.html#append) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var snoc = function (init, end) { return pipe(init, append(end)); };\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var fold = RNEA.concatAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `NEA.Functor` instead of `NEA.nonEmptyArray`\n * (where `NEA` is from `import NEA from 'fp-ts/NonEmptyArray'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var nonEmptyArray = {\n    URI: URI,\n    of: of,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    ap: _ap,\n    chain: flatMap,\n    extend: _extend,\n    extract: extract,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    alt: _alt\n};\n", "import { eqStrict } from './Eq';\nimport { constant, constTrue, pipe } from './function';\n// -------------------------------------------------------------------------------------\n// defaults\n// -------------------------------------------------------------------------------------\n/**\n * @category defaults\n * @since 2.10.0\n */\nexport var equalsDefault = function (compare) {\n    return function (first, second) {\n        return first === second || compare(first, second) === 0;\n    };\n};\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var fromCompare = function (compare) { return ({\n    equals: equalsDefault(compare),\n    compare: function (first, second) { return (first === second ? 0 : compare(first, second)); }\n}); };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Given a tuple of `Ord`s returns an `Ord` for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Ord'\n * import * as B from 'fp-ts/boolean'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n *\n * const O = tuple(S.Ord, N.Ord, B.Ord)\n * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)\n *\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var ords = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        ords[_i] = arguments[_i];\n    }\n    return fromCompare(function (first, second) {\n        var i = 0;\n        for (; i < ords.length - 1; i++) {\n            var r = ords[i].compare(first[i], second[i]);\n            if (r !== 0) {\n                return r;\n            }\n        }\n        return ords[i].compare(first[i], second[i]);\n    });\n};\n/**\n * @since 2.10.0\n */\nexport var reverse = function (O) { return fromCompare(function (first, second) { return O.compare(second, first); }); };\n/* istanbul ignore next */\nvar contramap_ = function (fa, f) { return pipe(fa, contramap(f)); };\n/**\n * A typical use case for `contramap` would be like, given some `User` type, to construct an `Ord<User>`.\n *\n * We can do so with a function from `User -> X` where `X` is some value that we know how to compare\n * for ordering (meaning we have an `Ord<X>`)\n *\n * For example, given the following `User` type, there are lots of possible choices for `X`,\n * but let's say we want to sort a list of users by `lastName`.\n *\n * If we have a way of comparing `lastName`s for ordering (`ordLastName: Ord<string>`) and we know how to go from `User -> string`,\n * using `contramap` we can do this\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import { contramap, Ord } from 'fp-ts/Ord'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * interface User {\n *   readonly firstName: string\n *   readonly lastName: string\n * }\n *\n * const ordLastName: Ord<string> = S.Ord\n *\n * const ordByLastName: Ord<User> = pipe(\n *   ordLastName,\n *   contramap((user) => user.lastName)\n * )\n *\n * assert.deepStrictEqual(\n *   RA.sort(ordByLastName)([\n *     { firstName: 'a', lastName: 'd' },\n *     { firstName: 'c', lastName: 'b' }\n *   ]),\n *   [\n *     { firstName: 'c', lastName: 'b' },\n *     { firstName: 'a', lastName: 'd' }\n *   ]\n * )\n *\n * @since 2.0.0\n */\nexport var contramap = function (f) { return function (fa) {\n    return fromCompare(function (first, second) { return fa.compare(f(first), f(second)); });\n}; };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Ord';\n/**\n * A typical use case for the `Semigroup` instance of `Ord` is merging two or more orderings.\n *\n * For example the following snippet builds an `Ord` for a type `User` which\n * sorts by `created` date descending, and **then** `lastName`\n *\n * @example\n * import * as D from 'fp-ts/Date'\n * import { pipe } from 'fp-ts/function'\n * import { contramap, getSemigroup, Ord, reverse } from 'fp-ts/Ord'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * interface User {\n *   readonly id: string\n *   readonly lastName: string\n *   readonly created: Date\n * }\n *\n * const ordByLastName: Ord<User> = pipe(\n *   S.Ord,\n *   contramap((user) => user.lastName)\n * )\n *\n * const ordByCreated: Ord<User> = pipe(\n *   D.Ord,\n *   contramap((user) => user.created)\n * )\n *\n * const ordUserByCreatedDescThenLastName = getSemigroup<User>().concat(\n *   reverse(ordByCreated),\n *   ordByLastName\n * )\n *\n * assert.deepStrictEqual(\n *   RA.sort(ordUserByCreatedDescThenLastName)([\n *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) },\n *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },\n *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) }\n *   ]),\n *   [\n *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) },\n *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },\n *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) }\n *   ]\n * )\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (first, second) {\n        return fromCompare(function (a, b) {\n            var ox = first.compare(a, b);\n            return ox !== 0 ? ox : second.compare(a, b);\n        });\n    }\n}); };\n/**\n * Returns a `Monoid` such that:\n *\n * - its `concat(ord1, ord2)` operation will order first by `ord1`, and then by `ord2`\n * - its `empty` value is an `Ord` that always considers compared elements equal\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as B from 'fp-ts/boolean'\n * import { pipe } from 'fp-ts/function'\n * import { concatAll } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * interface User {\n *   readonly id: number\n *   readonly name: string\n *   readonly age: number\n *   readonly rememberMe: boolean\n * }\n *\n * const byName = pipe(\n *   S.Ord,\n *   contramap((p: User) => p.name)\n * )\n *\n * const byAge = pipe(\n *   N.Ord,\n *   contramap((p: User) => p.age)\n * )\n *\n * const byRememberMe = pipe(\n *   B.Ord,\n *   contramap((p: User) => p.rememberMe)\n * )\n *\n * const M = getMonoid<User>()\n *\n * const users: Array<User> = [\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }\n * ]\n *\n * // sort by name, then by age, then by `rememberMe`\n * const O1 = concatAll(M)([byName, byAge, byRememberMe])\n * assert.deepStrictEqual(sort(O1)(users), [\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * // now `rememberMe = true` first, then by name, then by age\n * const O2 = concatAll(M)([reverse(byRememberMe), byName, byAge])\n * assert.deepStrictEqual(sort(O2)(users), [\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * @category instances\n * @since 2.4.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: fromCompare(function () { return 0; })\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Contravariant = {\n    URI: URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var trivial = {\n    equals: constTrue,\n    compare: /*#__PURE__*/ constant(0)\n};\n/**\n * @since 2.11.0\n */\nexport var equals = function (O) {\n    return function (second) {\n        return function (first) {\n            return first === second || O.compare(first, second) === 0;\n        };\n    };\n};\n// TODO: curry in v3\n/**\n * Test whether one value is _strictly less than_ another\n *\n * @since 2.0.0\n */\nexport var lt = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) === -1;\n    };\n};\n// TODO: curry in v3\n/**\n * Test whether one value is _strictly greater than_ another\n *\n * @since 2.0.0\n */\nexport var gt = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) === 1;\n    };\n};\n// TODO: curry in v3\n/**\n * Test whether one value is _non-strictly less than_ another\n *\n * @since 2.0.0\n */\nexport var leq = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) !== 1;\n    };\n};\n// TODO: curry in v3\n/**\n * Test whether one value is _non-strictly greater than_ another\n *\n * @since 2.0.0\n */\nexport var geq = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) !== -1;\n    };\n};\n// TODO: curry in v3\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\nexport var min = function (O) {\n    return function (first, second) {\n        return first === second || O.compare(first, second) < 1 ? first : second;\n    };\n};\n// TODO: curry in v3\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\nexport var max = function (O) {\n    return function (first, second) {\n        return first === second || O.compare(first, second) > -1 ? first : second;\n    };\n};\n/**\n * Clamp a value between a minimum and a maximum\n *\n * @since 2.0.0\n */\nexport var clamp = function (O) {\n    var minO = min(O);\n    var maxO = max(O);\n    return function (low, hi) { return function (a) { return maxO(minO(a, hi), low); }; };\n};\n/**\n * Test whether a value is between a minimum and a maximum (inclusive)\n *\n * @since 2.0.0\n */\nexport var between = function (O) {\n    var ltO = lt(O);\n    var gtO = gt(O);\n    return function (low, hi) { return function (a) { return ltO(a, low) || gtO(a, hi) ? false : true; }; };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleOrd = tuple;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getDualOrd = reverse;\n/**\n * Use [`Contravariant`](#contravariant) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var ord = Contravariant;\n// default compare for primitive types\nfunction compare(first, second) {\n    return first < second ? -1 : first > second ? 1 : 0;\n}\nvar strictOrd = {\n    equals: eqStrict.equals,\n    compare: compare\n};\n/**\n * Use [`Ord`](./boolean.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var ordBoolean = strictOrd;\n/**\n * Use [`Ord`](./string.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var ordString = strictOrd;\n/**\n * Use [`Ord`](./number.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var ordNumber = strictOrd;\n/**\n * Use [`Ord`](./Date.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var ordDate = /*#__PURE__*/ pipe(ordNumber, \n/*#__PURE__*/\ncontramap(function (date) { return date.valueOf(); }));\n", "import { pipe } from './function';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var fromEquals = function (equals) { return ({\n    equals: function (x, y) { return x === y || equals(x, y); }\n}); };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nexport var struct = function (eqs) {\n    return fromEquals(function (first, second) {\n        for (var key in eqs) {\n            if (!eqs[key].equals(first[key], second[key])) {\n                return false;\n            }\n        }\n        return true;\n    });\n};\n/**\n * Given a tuple of `Eq`s returns a `Eq` for the tuple\n *\n * @example\n * import { tuple } from 'fp-ts/Eq'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import * as B from 'fp-ts/boolean'\n *\n * const E = tuple(S.Eq, N.Eq, B.Eq)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)\n * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)\n *\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var eqs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        eqs[_i] = arguments[_i];\n    }\n    return fromEquals(function (first, second) { return eqs.every(function (E, i) { return E.equals(first[i], second[i]); }); });\n};\n/* istanbul ignore next */\nvar contramap_ = function (fa, f) { return pipe(fa, contramap(f)); };\n/**\n * A typical use case for `contramap` would be like, given some `User` type, to construct an `Eq<User>`.\n *\n * We can do so with a function from `User -> X` where `X` is some value that we know how to compare\n * for equality (meaning we have an `Eq<X>`)\n *\n * For example, given the following `User` type, we want to construct an `Eq<User>` that just looks at the `key` field\n * for each user (since it's known to be unique).\n *\n * If we have a way of comparing `UUID`s for equality (`eqUUID: Eq<UUID>`) and we know how to go from `User -> UUID`,\n * using `contramap` we can do this\n *\n * @example\n * import { contramap, Eq } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n * import * as S from 'fp-ts/string'\n *\n * type UUID = string\n *\n * interface User {\n *   readonly key: UUID\n *   readonly firstName: string\n *   readonly lastName: string\n * }\n *\n * const eqUUID: Eq<UUID> = S.Eq\n *\n * const eqUserByKey: Eq<User> = pipe(\n *   eqUUID,\n *   contramap((user) => user.key)\n * )\n *\n * assert.deepStrictEqual(\n *   eqUserByKey.equals(\n *     { key: 'k1', firstName: 'a1', lastName: 'b1' },\n *     { key: 'k2', firstName: 'a1', lastName: 'b1' }\n *   ),\n *   false\n * )\n * assert.deepStrictEqual(\n *   eqUserByKey.equals(\n *     { key: 'k1', firstName: 'a1', lastName: 'b1' },\n *     { key: 'k1', firstName: 'a2', lastName: 'b1' }\n *   ),\n *   true\n * )\n *\n * @since 2.0.0\n */\nexport var contramap = function (f) { return function (fa) {\n    return fromEquals(function (x, y) { return fa.equals(f(x), f(y)); });\n}; };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Eq';\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var eqStrict = {\n    equals: function (a, b) { return a === b; }\n};\nvar empty = {\n    equals: function () { return true; }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (x, y) { return fromEquals(function (a, b) { return x.equals(a, b) && y.equals(a, b); }); }\n}); };\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: empty\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Contravariant = {\n    URI: URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleEq = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getStructEq = struct;\n/**\n * Use [`eqStrict`](#eqstrict) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var strictEqual = eqStrict.equals;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Contravariant` instance, pass `E.Contravariant` instead of `E.eq`\n * (where `E` is from `import E from 'fp-ts/Eq'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var eq = Contravariant;\n/**\n * Use [`Eq`](./boolean.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var eqBoolean = eqStrict;\n/**\n * Use [`Eq`](./string.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var eqString = eqStrict;\n/**\n * Use [`Eq`](./number.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var eqNumber = eqStrict;\n/**\n * Use [`Eq`](./Date.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var eqDate = {\n    equals: function (first, second) { return first.valueOf() === second.valueOf(); }\n};\n", "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEquals } from './Eq';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport { getMonoid } from './Ord';\nimport * as Se from './Semigroup';\n// -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n/**\n * @internal\n */\nexport var empty = _.emptyReadonlyArray;\n/**\n * @internal\n */\nexport var isNonEmpty = _.isNonEmpty;\n/**\n * @internal\n */\nexport var isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };\n/**\n * @internal\n */\nexport var prependW = function (head) {\n    return function (tail) {\n        return __spreadArray([head], tail, true);\n    };\n};\n/**\n * @internal\n */\nexport var prepend = prependW;\n/**\n * @internal\n */\nexport var appendW = function (end) {\n    return function (init) {\n        return __spreadArray(__spreadArray([], init, true), [end], false);\n    };\n};\n/**\n * @internal\n */\nexport var append = appendW;\n/**\n * @internal\n */\nexport var unsafeInsertAt = function (i, a, as) {\n    if (isNonEmpty(as)) {\n        var xs = _.fromReadonlyNonEmptyArray(as);\n        xs.splice(i, 0, a);\n        return xs;\n    }\n    return [a];\n};\n/**\n * @internal\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    if (as[i] === a) {\n        return as;\n    }\n    else {\n        var xs = _.fromReadonlyNonEmptyArray(as);\n        xs[i] = a;\n        return xs;\n    }\n};\n/**\n * Remove duplicates from a `ReadonlyNonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.11.0\n */\nexport var uniq = function (E) {\n    return function (as) {\n        if (as.length === 1) {\n            return as;\n        }\n        var out = [head(as)];\n        var rest = tail(as);\n        var _loop_1 = function (a) {\n            if (out.every(function (o) { return !E.equals(o, a); })) {\n                out.push(a);\n            }\n        };\n        for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n            var a = rest_1[_i];\n            _loop_1(a);\n        }\n        return out;\n    };\n};\n/**\n * Sort the elements of a `ReadonlyNonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = RNEA.sortBy([byName, byAge])\n *\n * const persons: RNEA.ReadonlyNonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.11.0\n */\nexport var sortBy = function (ords) {\n    if (isNonEmpty(ords)) {\n        var M = getMonoid();\n        return sort(ords.reduce(M.concat, M.empty));\n    }\n    return identity;\n};\n/**\n * @since 2.11.0\n */\nexport var union = function (E) {\n    var uniqE = uniq(E);\n    return function (second) { return function (first) { return uniqE(pipe(first, concat(second))); }; };\n};\n/**\n * Rotate a `ReadonlyNonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @since 2.11.0\n */\nexport var rotate = function (n) {\n    return function (as) {\n        var len = as.length;\n        var m = Math.round(n) % len;\n        if (isOutOfBound(Math.abs(m), as) || m === 0) {\n            return as;\n        }\n        if (m < 0) {\n            var _a = splitAt(-m)(as), f = _a[0], s = _a[1];\n            return pipe(s, concat(f));\n        }\n        else {\n            return rotate(m - len)(as);\n        }\n    };\n};\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Return a `ReadonlyNonEmptyArray` from a `ReadonlyArray` returning `none` if the input is empty.\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var fromReadonlyArray = function (as) {\n    return isNonEmpty(as) ? _.some(as) : _.none;\n};\n/**\n * Return a `ReadonlyNonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var makeBy = function (f) {\n    return function (n) {\n        var j = Math.max(0, Math.floor(n));\n        var out = [f(0)];\n        for (var i = 1; i < j; i++) {\n            out.push(f(i));\n        }\n        return out;\n    };\n};\n/**\n * Create a `ReadonlyNonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var replicate = function (a) { return makeBy(function () { return a; }); };\n/**\n * Create a `ReadonlyNonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var range = function (start, end) {\n    return start <= end ? makeBy(function (i) { return start + i; })(end - start + 1) : [start];\n};\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3, 4]), [1, [2, 3, 4]])\n *\n * @since 2.9.0\n */\nexport var unprepend = function (as) { return [head(as), tail(as)]; };\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @since 2.9.0\n */\nexport var unappend = function (as) { return [init(as), last(as)]; };\n/**\n * @category conversions\n * @since 2.5.0\n */\nexport var fromArray = function (as) { return fromReadonlyArray(as.slice()); };\nexport function concatW(second) {\n    return function (first) { return first.concat(second); };\n}\nexport function concat(x, y) {\n    return y ? x.concat(y) : function (y) { return y.concat(x); };\n}\n/**\n * @since 2.5.0\n */\nexport var reverse = function (as) {\n    return as.length === 1 ? as : __spreadArray([last(as)], as.slice(0, -1).reverse(), true);\n};\nexport function group(E) {\n    return function (as) {\n        var len = as.length;\n        if (len === 0) {\n            return empty;\n        }\n        var out = [];\n        var head = as[0];\n        var nea = [head];\n        for (var i = 1; i < len; i++) {\n            var a = as[i];\n            if (E.equals(a, head)) {\n                nea.push(a);\n            }\n            else {\n                out.push(nea);\n                head = a;\n                nea = [head];\n            }\n        }\n        out.push(nea);\n        return out;\n    };\n}\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @since 2.5.0\n */\nexport var groupBy = function (f) {\n    return function (as) {\n        var out = {};\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            var k = f(a);\n            if (_.has.call(out, k)) {\n                out[k].push(a);\n            }\n            else {\n                out[k] = [a];\n            }\n        }\n        return out;\n    };\n};\n/**\n * @since 2.5.0\n */\nexport var sort = function (O) {\n    return function (as) {\n        return as.length === 1 ? as : as.slice().sort(O.compare);\n    };\n};\n/**\n * @since 2.5.0\n */\nexport var updateAt = function (i, a) {\n    return modifyAt(i, function () { return a; });\n};\n/**\n * @since 2.5.0\n */\nexport var modifyAt = function (i, f) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n    };\n};\n/**\n * @since 2.5.1\n */\nexport var zipWith = function (as, bs, f) {\n    var cs = [f(as[0], bs[0])];\n    var len = Math.min(as.length, bs.length);\n    for (var i = 1; i < len; i++) {\n        cs[i] = f(as[i], bs[i]);\n    }\n    return cs;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * @since 2.5.1\n */\nexport var unzip = function (abs) {\n    var fa = [abs[0][0]];\n    var fb = [abs[0][1]];\n    for (var i = 1; i < abs.length; i++) {\n        fa[i] = abs[i][0];\n        fb[i] = abs[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Prepend an element to every member of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n    return function (as) {\n        var out = [middle, as[0]];\n        for (var i = 1; i < as.length; i++) {\n            out.push(middle, as[i]);\n        }\n        return out;\n    };\n};\n/**\n * Places an element in between members of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n    return function (as) {\n        var rest = tail(as);\n        return isNonEmpty(rest) ? pipe(rest, prependAll(middle), prepend(head(as))) : as;\n    };\n};\n/**\n * @category sequencing\n * @since 2.10.0\n */\nexport var chainWithIndex = function (f) {\n    return function (as) {\n        var out = _.fromReadonlyNonEmptyArray(f(0, head(as)));\n        for (var i = 1; i < as.length; i++) {\n            var bs = f(i, as[i]);\n            for (var j = 0; j < bs.length; j++) {\n                out.push(bs[j]);\n            }\n        }\n        return out;\n    };\n};\n/**\n * A useful recursion pattern for processing a `ReadonlyNonEmptyArray` to produce a new `ReadonlyNonEmptyArray`, often used for \"chopping\" up the input\n * `ReadonlyNonEmptyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyNonEmptyArray` and produce a\n * value and the tail of the `ReadonlyNonEmptyArray`.\n *\n * @since 2.10.0\n */\nexport var chop = function (f) {\n    return function (as) {\n        var _a = f(as), b = _a[0], rest = _a[1];\n        var out = [b];\n        var next = rest;\n        while (isNonEmpty(next)) {\n            var _b = f(next), b_1 = _b[0], rest_2 = _b[1];\n            out.push(b_1);\n            next = rest_2;\n        }\n        return out;\n    };\n};\n/**\n * Splits a `ReadonlyNonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @since 2.10.0\n */\nexport var splitAt = function (n) {\n    return function (as) {\n        var m = Math.max(1, n);\n        return m >= as.length ? [as, empty] : [pipe(as.slice(1, m), prepend(head(as))), as.slice(m)];\n    };\n};\n/**\n * Splits a `ReadonlyNonEmptyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyNonEmptyArray`.\n *\n * @since 2.10.0\n */\nexport var chunksOf = function (n) { return chop(splitAt(n)); };\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\n/**\n * @category constructors\n * @since 2.5.0\n */\nexport var of = _.singleton;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3] as RNEA.ReadonlyNonEmptyArray<number>,\n *     RNEA.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) {\n    return function (as) {\n        return pipe(as, concatW(that()));\n    };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `ReadonlyNonEmptyArray` concatenates the inputs into a single array.\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RNEA.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.6.2\n */\nexport var alt = altW;\n/**\n * @since 2.5.0\n */\nexport var ap = function (as) { return flatMap(function (f) { return pipe(as, map(f)); }); };\n/**\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RNEA.flatMap((n) => [`a${n}`, `b${n}`])\n *   ),\n *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']\n * )\n *\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return pipe(ma, chainWithIndex(function (i, a) { return f(a, i); }));\n});\n/**\n * @since 2.5.0\n */\nexport var extend = function (f) {\n    return function (as) {\n        var next = tail(as);\n        var out = [f(as)];\n        while (isNonEmpty(next)) {\n            out.push(f(next));\n            next = tail(next);\n        }\n        return out;\n    };\n};\n/**\n * @since 2.5.0\n */\nexport var duplicate = \n/*#__PURE__*/ extend(identity);\n/**\n * @category sequencing\n * @since 2.5.0\n */\nexport var flatten = \n/*#__PURE__*/ flatMap(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.5.0\n */\nexport var map = function (f) {\n    return mapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category mapping\n * @since 2.5.0\n */\nexport var mapWithIndex = function (f) {\n    return function (as) {\n        var out = [f(0, head(as))];\n        for (var i = 1; i < as.length; i++) {\n            out.push(f(i, as[i]));\n        }\n        return out;\n    };\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduce = function (b, f) {\n    return reduceWithIndex(b, function (_, b, a) { return f(b, a); });\n};\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category folding\n * @since 2.5.0\n */\nexport var foldMap = function (S) {\n    return function (f) {\n        return function (as) {\n            return as.slice(1).reduce(function (s, a) { return S.concat(s, f(a)); }, f(as[0]));\n        };\n    };\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduceRight = function (b, f) {\n    return reduceRightWithIndex(b, function (_, b, a) { return f(b, a); });\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduceWithIndex = function (b, f) {\n    return function (as) {\n        return as.reduce(function (b, a, i) { return f(i, b, a); }, b);\n    };\n};\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category folding\n * @since 2.5.0\n */\nexport var foldMapWithIndex = function (S) {\n    return function (f) {\n        return function (as) {\n            return as.slice(1).reduce(function (s, a, i) { return S.concat(s, f(i + 1, a)); }, f(0, as[0]));\n        };\n    };\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduceRightWithIndex = function (b, f) {\n    return function (as) {\n        return as.reduceRight(function (b, a, i) { return f(i, a, b); }, b);\n    };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) { return traverseWithIndex(F)(SK); };\n/**\n * @category sequencing\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) {\n    return function (f) {\n        return function (as) {\n            var out = F.map(f(0, head(as)), of);\n            for (var i = 1; i < as.length; i++) {\n                out = F.ap(F.map(out, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, as[i]));\n            }\n            return out;\n        };\n    };\n};\n/**\n * @category Comonad\n * @since 2.6.3\n */\nexport var extract = _.head;\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyNonEmptyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getShow = function (S) { return ({\n    show: function (as) { return \"[\".concat(as.map(S.show).join(', '), \"]\"); }\n}); };\n/**\n * Builds a `Semigroup` instance for `ReadonlyNonEmptyArray`\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getSemigroup = function () { return ({\n    concat: concat\n}); };\n/**\n * @example\n * import { getEq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getEq = function (E) {\n    return fromEquals(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });\n};\n/**\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n *\n * @category sequencing\n * @since 2.5.0\n */\nexport var chainFirst = /*#__PURE__*/ chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.5.0\n */\nexport var head = extract;\n/**\n * @since 2.5.0\n */\nexport var tail = _.tail;\n/**\n * @since 2.5.0\n */\nexport var last = function (as) { return as[as.length - 1]; };\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.5.0\n */\nexport var init = function (as) { return as.slice(0, -1); };\n/**\n * @since 2.5.0\n */\nexport var min = function (O) {\n    var S = Se.min(O);\n    return function (as) { return as.reduce(S.concat); };\n};\n/**\n * @since 2.5.0\n */\nexport var max = function (O) {\n    var S = Se.max(O);\n    return function (as) { return as.reduce(S.concat); };\n};\n/**\n * @since 2.10.0\n */\nexport var concatAll = function (S) {\n    return function (as) {\n        return as.reduce(S.concat);\n    };\n};\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchLeft = function (f) {\n    return function (as) {\n        return f(head(as), tail(as));\n    };\n};\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchRight = function (f) {\n    return function (as) {\n        return f(init(as), last(as));\n    };\n};\n/**\n * Apply a function to the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyHead = function (f) {\n    return function (as) {\n        return __spreadArray([f(head(as))], tail(as), true);\n    };\n};\n/**\n * Change the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var updateHead = function (a) { return modifyHead(function () { return a; }); };\n/**\n * Apply a function to the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyLast = function (f) {\n    return function (as) {\n        return pipe(init(as), append(f(last(as))));\n    };\n};\n/**\n * Change the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var updateLast = function (a) { return modifyLast(function () { return a; }); };\n/**\n * Places an element in between members of a `ReadonlyNonEmptyArray`, then folds the results using the provided `Semigroup`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(intercalate(S.Semigroup)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexport var intercalate = function (S) {\n    var concatAllS = concatAll(S);\n    return function (middle) { return flow(intersperse(middle), concatAllS); };\n};\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.5.0\n */\nexport var chain = flatMap;\nexport function groupSort(O) {\n    var sortO = sort(O);\n    var groupO = group(O);\n    return function (as) { return (isNonEmpty(as) ? groupO(sortO(as)) : empty); };\n}\nexport function filter(predicate) {\n    return filterWithIndex(function (_, a) { return predicate(a); });\n}\n/**\n * Use [`filterWithIndex`](./ReadonlyArray.ts.html#filterwithindex) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var filterWithIndex = function (predicate) {\n    return function (as) {\n        return fromReadonlyArray(as.filter(function (a, i) { return predicate(i, a); }));\n    };\n};\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category zone of death\n * @since 2.10.0\n * @deprecated\n */\nexport var uncons = unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category zone of death\n * @since 2.10.0\n * @deprecated\n */\nexport var unsnoc = unappend;\nexport function cons(head, tail) {\n    return tail === undefined ? prepend(head) : pipe(tail, prepend(head));\n}\n/**\n * Use [`append`](./ReadonlyArray.ts.html#append) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var snoc = function (init, end) { return pipe(init, concat([end])); };\n/**\n * Use [`insertAt`](./ReadonlyArray.ts.html#insertat) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n    };\n};\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var fold = concatAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RNEA.Functor` instead of `RNEA.readonlyNonEmptyArray`\n * (where `RNEA` is from `import RNEA from 'fp-ts/ReadonlyNonEmptyArray'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyNonEmptyArray = {\n    URI: URI,\n    of: of,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    ap: _ap,\n    chain: flatMap,\n    extend: _extend,\n    extract: extract,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    alt: _alt\n};\n", "/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nimport { getSemigroup, identity } from './function';\nimport * as _ from './internal';\nimport * as M from './Magma';\nimport * as Or from './Ord';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.min(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var min = function (O) { return ({\n    concat: Or.min(O)\n}); };\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.max(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var max = function (O) { return ({\n    concat: Or.max(O)\n}); };\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var constant = function (a) { return ({\n    concat: function () { return a; }\n}); };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')\n *\n * @since 2.10.0\n */\nexport var reverse = M.reverse;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const S = struct<Point>({\n *   x: N.SemigroupSum,\n *   y: N.SemigroupSum\n * })\n *\n * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @since 2.10.0\n */\nexport var struct = function (semigroups) { return ({\n    concat: function (first, second) {\n        var r = {};\n        for (var k in semigroups) {\n            if (_.has.call(semigroups, k)) {\n                r[k] = semigroups[k].concat(first[k], second[k]);\n            }\n        }\n        return r;\n    }\n}); };\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Semigroup'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const S1 = tuple(S.Semigroup, N.SemigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var semigroups = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        semigroups[_i] = arguments[_i];\n    }\n    return ({\n        concat: function (first, second) { return semigroups.map(function (s, i) { return s.concat(first[i], second[i]); }); }\n    });\n};\n/**\n * Between each pair of elements insert `middle`.\n *\n * @example\n * import { intercalate } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * const S1 = pipe(S.Semigroup, intercalate(' + '))\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a + b')\n *\n * @since 2.10.0\n */\nexport var intercalate = function (middle) {\n    return function (S) { return ({\n        concat: function (x, y) { return S.concat(x, S.concat(middle, y)); }\n    }); };\n};\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var first = function () { return ({ concat: identity }); };\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var last = function () { return ({ concat: function (_, y) { return y; } }); };\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * const sum = concatAll(N.SemigroupSum)(0)\n *\n * assert.deepStrictEqual(sum([1, 2, 3]), 6)\n * assert.deepStrictEqual(sum([]), 0)\n *\n * @since 2.10.0\n */\nexport var concatAll = M.concatAll;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `void` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupVoid = constant(undefined);\n/**\n * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getObjectSemigroup = function () { return ({\n    concat: function (first, second) { return Object.assign({}, first, second); }\n}); };\n/**\n * Use [`last`](#last) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getLastSemigroup = last;\n/**\n * Use [`first`](#first) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFirstSemigroup = first;\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleSemigroup = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getStructSemigroup = struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getDualSemigroup = reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getJoinSemigroup = max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getMeetSemigroup = min;\n/**\n * Use [`intercalate`](#intercalate) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var getIntercalateSemigroup = intercalate;\nexport function fold(S) {\n    var concatAllS = concatAll(S);\n    return function (startWith, as) { return (as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as)); };\n}\n/**\n * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupAll = {\n    concat: function (x, y) { return x && y; }\n};\n/**\n * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupAny = {\n    concat: function (x, y) { return x || y; }\n};\n/**\n * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFunctionSemigroup = getSemigroup;\n/**\n * Use [`Semigroup`](./string.ts.html#Semigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupString = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupSum = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupProduct = {\n    concat: function (x, y) { return x * y; }\n};\n", "/**\n * A `Magma` is a pair `(A, concat)` in which `A` is a non-empty set and `concat` is a binary operation on `A`\n *\n * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.\n *\n * @since 2.0.0\n */\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Magma`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse, concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(reverse(N.MagmaSub))(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), 2)\n *\n * @since 2.11.0\n */\nexport var reverse = function (M) { return ({\n    concat: function (first, second) { return M.concat(second, first); }\n}); };\n/**\n * @since 2.11.0\n */\nexport var filterFirst = function (predicate) {\n    return function (M) { return ({\n        concat: function (first, second) { return (predicate(first) ? M.concat(first, second) : second); }\n    }); };\n};\n/**\n * @since 2.11.0\n */\nexport var filterSecond = function (predicate) {\n    return function (M) { return ({\n        concat: function (first, second) { return (predicate(second) ? M.concat(first, second) : first); }\n    }); };\n};\n/**\n * @since 2.11.0\n */\nexport var endo = function (f) {\n    return function (M) { return ({\n        concat: function (first, second) { return M.concat(f(first), f(second)); }\n    }); };\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(N.MagmaSub)(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), -6)\n *\n * @since 2.11.0\n */\nexport var concatAll = function (M) {\n    return function (startWith) {\n        return function (as) {\n            return as.reduce(function (a, acc) { return M.concat(a, acc); }, startWith);\n        };\n    };\n};\n", "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEquals } from './Eq';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { dual, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as N from './number';\nimport { fromCompare } from './Ord';\nimport * as RNEA from './ReadonlyNonEmptyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether a `ReadonlyArray` is empty.\n *\n * @example\n * import { isEmpty } from 'fp-ts/ReadonlyArray'\n *\n * assert.strictEqual(isEmpty([]), true)\n *\n * @category refinements\n * @since 2.5.0\n */\nexport var isEmpty = function (as) { return as.length === 0; };\n/**\n * Test whether a `ReadonlyArray` is non empty.\n *\n * @category refinements\n * @since 2.5.0\n */\nexport var isNonEmpty = RNEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var prepend = RNEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @since 2.11.0\n */\nexport var prependW = RNEA.prependW;\n/**\n * Append an element to the end of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var append = RNEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @since 2.11.0\n */\nexport var appendW = RNEA.appendW;\n/**\n * Return a `ReadonlyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyArray'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var makeBy = function (n, f) { return (n <= 0 ? empty : RNEA.makeBy(f)(n)); };\n/**\n * Create a `ReadonlyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var replicate = function (n, a) { return makeBy(n, function () { return a; }); };\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? [a] : empty); };\n}\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.11.0\n */\nexport var fromOption = function (ma) { return (_.isNone(ma) ? empty : [ma.value]); };\n/**\n * Transforms an `Either` to a `ReadonlyArray`.\n *\n * @category conversions\n * @since 2.11.0\n */\nexport var fromEither = function (e) { return (_.isLeft(e) ? empty : [e.right]); };\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();\n    };\n};\n/**\n * @category pattern matching\n * @since 2.11.0\n */\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchLeftW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(RNEA.head(as), RNEA.tail(as)) : onEmpty();\n    };\n};\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/ReadonlyArray'\n *\n * const len: <A>(as: ReadonlyArray<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.5.0\n */\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchRightW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(RNEA.init(as), RNEA.last(as)) : onEmpty();\n    };\n};\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.5.0\n */\nexport var foldRight = matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category sequencing\n * @since 2.7.0\n */\nexport var chainWithIndex = function (f) {\n    return function (as) {\n        if (isEmpty(as)) {\n            return empty;\n        }\n        var out = [];\n        for (var i = 0; i < as.length; i++) {\n            var bs = f(i, as[i]);\n            for (var j = 0; j < bs.length; j++) {\n                out.push(bs[j]);\n            }\n        }\n        return out;\n    };\n};\n/**\n * Same as `reduce` but it carries over the intermediate steps.\n *\n * @example\n * import { scanLeft } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @since 2.5.0\n */\nexport var scanLeft = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[0] = b;\n        for (var i = 0; i < len; i++) {\n            out[i + 1] = f(out[i], as[i]);\n        }\n        return out;\n    };\n};\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @since 2.5.0\n */\nexport var scanRight = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[len] = b;\n        for (var i = len - 1; i >= 0; i--) {\n            out[i] = f(as[i], out[i + 1]);\n        }\n        return out;\n    };\n};\n/**\n * Calculate the number of elements in a `ReadonlyArray`.\n *\n * @since 2.10.0\n */\nexport var size = function (as) { return as.length; };\n/**\n * Test whether an array contains a particular index\n *\n * @since 2.5.0\n */\nexport var isOutOfBound = RNEA.isOutOfBound;\nexport function lookup(i, as) {\n    return as === undefined ? function (as) { return lookup(i, as); } : isOutOfBound(i, as) ? _.none : _.some(as[i]);\n}\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.5.0\n */\nexport var head = function (as) { return (isNonEmpty(as) ? _.some(RNEA.head(as)) : _.none); };\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.5.0\n */\nexport var last = function (as) { return (isNonEmpty(as) ? _.some(RNEA.last(as)) : _.none); };\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.5.0\n */\nexport var tail = function (as) {\n    return isNonEmpty(as) ? _.some(RNEA.tail(as)) : _.none;\n};\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.5.0\n */\nexport var init = function (as) {\n    return isNonEmpty(as) ? _.some(RNEA.init(as)) : _.none;\n};\n/**\n * Keep only a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeLeft(2)), [1, 2])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeLeft(4)), input)\n * assert.strictEqual(pipe(input, RA.takeLeft(-1)), input)\n *\n * @since 2.5.0\n */\nexport var takeLeft = function (n) {\n    return function (as) {\n        return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(0, n);\n    };\n};\n/**\n * Keep only a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeRight(2)), [2, 3])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeRight(4)), input)\n * assert.strictEqual(pipe(input, RA.takeRight(-1)), input)\n *\n * @since 2.5.0\n */\nexport var takeRight = function (n) {\n    return function (as) {\n        return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(-n);\n    };\n};\nexport function takeLeftWhile(predicate) {\n    return function (as) {\n        var out = [];\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            if (!predicate(a)) {\n                break;\n            }\n            out.push(a);\n        }\n        var len = out.length;\n        return len === as.length ? as : len === 0 ? empty : out;\n    };\n}\nvar spanLeftIndex = function (as, predicate) {\n    var l = as.length;\n    var i = 0;\n    for (; i < l; i++) {\n        if (!predicate(as[i])) {\n            break;\n        }\n    }\n    return i;\n};\nexport function spanLeft(predicate) {\n    return function (as) {\n        var _a = splitAt(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];\n        return { init: init, rest: rest };\n    };\n}\n/**\n * Drop a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropLeft(2)), [3])\n * assert.strictEqual(pipe(input, RA.dropLeft(0)), input)\n * assert.strictEqual(pipe(input, RA.dropLeft(-1)), input)\n *\n * @since 2.5.0\n */\nexport var dropLeft = function (n) {\n    return function (as) {\n        return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(n, as.length);\n    };\n};\n/**\n * Drop a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropRight(2)), [1])\n * assert.strictEqual(pipe(input, RA.dropRight(0)), input)\n * assert.strictEqual(pipe(input, RA.dropRight(-1)), input)\n *\n * @since 2.5.0\n */\nexport var dropRight = function (n) {\n    return function (as) {\n        return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(0, as.length - n);\n    };\n};\nexport function dropLeftWhile(predicate) {\n    return function (as) {\n        var i = spanLeftIndex(as, predicate);\n        return i === 0 ? as : i === as.length ? empty : as.slice(i);\n    };\n}\n/**\n * Find the first index for which a predicate holds\n *\n * @example\n * import { findIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.5.0\n */\nexport var findIndex = function (predicate) {\n    return function (as) {\n        for (var i = 0; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return _.some(i);\n            }\n        }\n        return _.none;\n    };\n};\nexport function findFirst(predicate) {\n    return function (as) {\n        for (var i = 0; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return _.some(as[i]);\n            }\n        }\n        return _.none;\n    };\n}\n/**\n * Find the first element returned by an option based selector function\n *\n * @example\n * import { findFirstMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the first person that has an age\n * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))\n *\n * @since 2.5.0\n */\nexport var findFirstMap = function (f) {\n    return function (as) {\n        for (var i = 0; i < as.length; i++) {\n            var out = f(as[i]);\n            if (_.isSome(out)) {\n                return out;\n            }\n        }\n        return _.none;\n    };\n};\nexport function findLast(predicate) {\n    return function (as) {\n        for (var i = as.length - 1; i >= 0; i--) {\n            if (predicate(as[i])) {\n                return _.some(as[i]);\n            }\n        }\n        return _.none;\n    };\n}\n/**\n * Find the last element returned by an option based selector function\n *\n * @example\n * import { findLastMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the last person that has an age\n * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))\n *\n * @since 2.5.0\n */\nexport var findLastMap = function (f) {\n    return function (as) {\n        for (var i = as.length - 1; i >= 0; i--) {\n            var out = f(as[i]);\n            if (_.isSome(out)) {\n                return out;\n            }\n        }\n        return _.none;\n    };\n};\n/**\n * Returns the index of the last element of the list which matches the predicate\n *\n * @example\n * import { findLastIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: ReadonlyArray<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n *\n * @since 2.5.0\n */\nexport var findLastIndex = function (predicate) {\n    return function (as) {\n        for (var i = as.length - 1; i >= 0; i--) {\n            if (predicate(as[i])) {\n                return _.some(i);\n            }\n        }\n        return _.none;\n    };\n};\n/**\n * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { insertAt } from 'fp-ts/ReadonlyArray'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.5.0\n */\nexport var insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some(RNEA.unsafeInsertAt(i, a, as));\n    };\n};\n/**\n * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { updateAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.5.0\n */\nexport var updateAt = function (i, a) {\n    return modifyAt(i, function () { return a; });\n};\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { deleteAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.5.0\n */\nexport var deleteAt = function (i) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n    };\n};\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds\n *\n * @example\n * import { modifyAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.5.0\n */\nexport var modifyAt = function (i, f) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n    };\n};\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @since 2.5.0\n */\nexport var reverse = function (as) { return (as.length <= 1 ? as : as.slice().reverse()); };\n/**\n * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order\n *\n * @example\n * import { rights } from 'fp-ts/ReadonlyArray'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @since 2.5.0\n */\nexport var rights = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Right') {\n            r.push(a.right);\n        }\n    }\n    return r;\n};\n/**\n * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order\n *\n * @example\n * import { lefts } from 'fp-ts/ReadonlyArray'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @since 2.5.0\n */\nexport var lefts = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Left') {\n            r.push(a.left);\n        }\n    }\n    return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @since 2.5.0\n */\nexport var sort = function (O) {\n    return function (as) {\n        return as.length <= 1 ? as : as.slice().sort(O.compare);\n    };\n};\n// TODO: curry and make data-last in v3\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @since 2.5.0\n */\nexport var zipWith = function (fa, fb, f) {\n    var fc = [];\n    var len = Math.min(fa.length, fb.length);\n    for (var i = 0; i < len; i++) {\n        fc[i] = f(fa[i], fb[i]);\n    }\n    return fc;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.5.0\n */\nexport var unzip = function (as) {\n    var fa = [];\n    var fb = [];\n    for (var i = 0; i < as.length; i++) {\n        fa[i] = as[i][0];\n        fb[i] = as[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n    var f = RNEA.prependAll(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n    var f = RNEA.intersperse(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * Rotate a `ReadonlyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @since 2.5.0\n */\nexport var rotate = function (n) {\n    var f = RNEA.rotate(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\nexport function elem(E) {\n    return function (a, as) {\n        if (as === undefined) {\n            var elemE_1 = elem(E);\n            return function (as) { return elemE_1(a, as); };\n        }\n        var predicate = function (element) { return E.equals(element, a); };\n        var i = 0;\n        for (; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.5.0\n */\nexport var uniq = function (E) {\n    var f = RNEA.uniq(E);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/ReadonlyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.5.0\n */\nexport var sortBy = function (ords) {\n    var f = RNEA.sortBy(ords);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * A useful recursion pattern for processing a `ReadonlyArray` to produce a new `ReadonlyArray`, often used for \"chopping\" up the input\n * `ReadonlyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyArray` and produce a\n * value and the tail of the `ReadonlyArray`.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>) => {\n *   return RA.chop(as => {\n *     const { init, rest } = pipe(as, RA.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @since 2.5.0\n */\nexport var chop = function (f) {\n    var g = RNEA.chop(f);\n    return function (as) { return (isNonEmpty(as) ? g(as) : empty); };\n};\n/**\n * Splits a `ReadonlyArray` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.5.0\n */\nexport var splitAt = function (n) {\n    return function (as) {\n        return n >= 1 && isNonEmpty(as) ? RNEA.splitAt(n)(as) : isEmpty(as) ? [as, empty] : [empty, as];\n    };\n};\n/**\n * Splits a `ReadonlyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyArray`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that:\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `as`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.5.0\n */\nexport var chunksOf = function (n) {\n    var f = RNEA.chunksOf(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : empty); };\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromOptionK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromOption(f.apply(void 0, a));\n    };\n};\nexport function comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    var go = function (scope, input) {\n        return isNonEmpty(input)\n            ? flatMap(RNEA.head(input), function (a) { return go(pipe(scope, append(a)), RNEA.tail(input)); })\n            : g.apply(void 0, scope) ? [f.apply(void 0, scope)]\n                : empty;\n    };\n    return go(empty, input);\n}\n/**\n * @since 2.11.0\n */\nexport var concatW = function (second) {\n    return function (first) {\n        return isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second);\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var concat = concatW;\nexport function union(E) {\n    var unionE = RNEA.union(E);\n    return function (first, second) {\n        if (second === undefined) {\n            var unionE_1 = union(E);\n            return function (second) { return unionE_1(second, first); };\n        }\n        return isNonEmpty(first) && isNonEmpty(second) ? unionE(second)(first) : isNonEmpty(first) ? first : second;\n    };\n}\nexport function intersection(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (ys) { return intersectionE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return elemE(a, ys); });\n    };\n}\nexport function difference(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var differenceE_1 = difference(E);\n            return function (ys) { return differenceE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return !elemE(a, ys); });\n    };\n}\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _filter = function (fa, predicate) {\n    return pipe(fa, filter(predicate));\n};\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\nvar _partitionWithIndex = function (fa, predicateWithIndex) { return pipe(fa, partitionWithIndex(predicateWithIndex)); };\nvar _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\nvar _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\nvar _filterWithIndex = function (fa, predicateWithIndex) { return pipe(fa, filterWithIndex(predicateWithIndex)); };\nvar _extend = function (fa, f) { return pipe(fa, extend(f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\n/** @internal */\nexport var _chainRecDepthFirst = function (a, f) { return pipe(a, chainRecDepthFirst(f)); };\n/** @internal */\nexport var _chainRecBreadthFirst = function (a, f) { return pipe(a, chainRecBreadthFirst(f)); };\n/**\n * @category constructors\n * @since 2.5.0\n */\nexport var of = RNEA.of;\n/**\n * @since 2.7.0\n */\nexport var zero = function () { return empty; };\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) {\n    return function (fa) {\n        return fa.concat(that());\n    };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `ReadonlyArray` concatenates the inputs into a single array.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.5.0\n */\nexport var alt = altW;\n/**\n * @since 2.5.0\n */\nexport var ap = function (fa) {\n    return flatMap(function (f) { return pipe(fa, map(f)); });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.flatMap((n) => [`a${n}`, `b${n}`])\n *   ),\n *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.flatMap(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return pipe(ma, chainWithIndex(function (i, a) { return f(a, i); }));\n});\n/**\n * @category sequencing\n * @since 2.5.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.5.0\n */\nexport var map = function (f) { return function (fa) {\n    return fa.map(function (a) { return f(a); });\n}; };\n/**\n * @category mapping\n * @since 2.5.0\n */\nexport var mapWithIndex = function (f) { return function (fa) {\n    return fa.map(function (a, i) { return f(i, a); });\n}; };\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var separate = function (fa) {\n    var left = [];\n    var right = [];\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var e = fa_1[_i];\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return separated(left, right);\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var filter = function (predicate) {\n    return function (as) {\n        return as.filter(predicate);\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var filterMapWithIndex = function (f) {\n    return function (fa) {\n        var out = [];\n        for (var i = 0; i < fa.length; i++) {\n            var optionB = f(i, fa[i]);\n            if (_.isSome(optionB)) {\n                out.push(optionB.value);\n            }\n        }\n        return out;\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var filterMap = function (f) {\n    return filterMapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var compact = /*#__PURE__*/ filterMap(identity);\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var partitionWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < as.length; i++) {\n            var a = as[i];\n            if (predicateWithIndex(i, a)) {\n                right.push(a);\n            }\n            else {\n                left.push(a);\n            }\n        }\n        return separated(left, right);\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var partitionMap = function (f) {\n    return partitionMapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var partitionMapWithIndex = function (f) {\n    return function (fa) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < fa.length; i++) {\n            var e = f(i, fa[i]);\n            if (e._tag === 'Left') {\n                left.push(e.left);\n            }\n            else {\n                right.push(e.right);\n            }\n        }\n        return separated(left, right);\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var filterWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        return as.filter(function (a, i) { return predicateWithIndex(i, a); });\n    };\n};\n/**\n * @since 2.5.0\n */\nexport var extend = function (f) { return function (wa) {\n    return wa.map(function (_, i) { return f(wa.slice(i)); });\n}; };\n/**\n * @since 2.5.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var foldMapWithIndex = function (M) {\n    return function (f) {\n        return function (fa) {\n            return fa.reduce(function (b, a, i) { return M.concat(b, f(i, a)); }, M.empty);\n        };\n    };\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduce = function (b, f) {\n    return reduceWithIndex(b, function (_, b, a) { return f(b, a); });\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var foldMap = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduceWithIndex = function (b, f) { return function (fa) {\n    var len = fa.length;\n    var out = b;\n    for (var i = 0; i < len; i++) {\n        out = f(i, out, fa[i]);\n    }\n    return out;\n}; };\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduceRight = function (b, f) {\n    return reduceRightWithIndex(b, function (_, a, b) { return f(a, b); });\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduceRightWithIndex = function (b, f) { return function (fa) {\n    return fa.reduceRight(function (b, a, i) { return f(i, a, b); }, b);\n}; };\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ta) {\n        return _reduce(ta, F.of(zero()), function (fas, fa) {\n            return F.ap(F.map(fas, function (as) { return function (a) { return pipe(as, append(a)); }; }), fa);\n        });\n    };\n};\n/**\n * @category sequencing\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) {\n    return function (f) {\n        return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n            return F.ap(F.map(fbs, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, a));\n        });\n    };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * @since 2.6.6\n */\nexport var unfold = function (b, f) {\n    var out = [];\n    var bb = b;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        var mt = f(bb);\n        if (_.isSome(mt)) {\n            var _a = mt.value, a = _a[0], b_1 = _a[1];\n            out.push(a);\n            bb = b_1;\n        }\n        else {\n            break;\n        }\n    }\n    return out;\n};\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getShow = function (S) { return ({\n    show: function (as) { return \"[\".concat(as.map(S.show).join(', '), \"]\"); }\n}); };\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (first, second) { return (isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second)); }\n}); };\n/**\n * Returns a `Monoid` for `ReadonlyArray<A>`.\n *\n * @example\n * import { getMonoid } from 'fp-ts/ReadonlyArray'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: empty\n}); };\n/**\n * Derives an `Eq` over the `ReadonlyArray` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/ReadonlyArray'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getEq = function (E) {\n    return fromEquals(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });\n};\n/**\n * Derives an `Ord` over the `ReadonlyArray` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getOrd = function (O) {\n    return fromCompare(function (a, b) {\n        var aLen = a.length;\n        var bLen = b.length;\n        var len = Math.min(aLen, bLen);\n        for (var i = 0; i < len; i++) {\n            var ordering = O.compare(a[i], b[i]);\n            if (ordering !== 0) {\n                return ordering;\n            }\n        }\n        return N.Ord.compare(aLen, bLen);\n    });\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E) { return ({\n    concat: getUnionSemigroup(E).concat,\n    empty: empty\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E) {\n    var intersectionE = intersection(E);\n    return {\n        concat: function (first, second) { return intersectionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.chainFirst(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.5.0\n */\nexport var chainFirst = \n/*#__PURE__*/ chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Unfoldable = {\n    URI: URI,\n    unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/ guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverse: _traverse,\n    sequence: sequence,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecDepthFirst = function (f) {\n    return function (a) {\n        var todo = __spreadArray([], f(a), true);\n        var out = [];\n        while (todo.length > 0) {\n            var e = todo.shift();\n            if (_.isLeft(e)) {\n                todo.unshift.apply(todo, f(e.left));\n            }\n            else {\n                out.push(e.right);\n            }\n        }\n        return out;\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecDepthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap,\n    chainRec: _chainRecDepthFirst\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecBreadthFirst = function (f) {\n    return function (a) {\n        var initial = f(a);\n        var todo = [];\n        var out = [];\n        function go(e) {\n            if (_.isLeft(e)) {\n                f(e.left).forEach(function (v) { return todo.push(v); });\n            }\n            else {\n                out.push(e.right);\n            }\n        }\n        for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {\n            var e = initial_1[_i];\n            go(e);\n        }\n        while (todo.length > 0) {\n            go(todo.shift());\n        }\n        return out;\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecBreadthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap,\n    chainRec: _chainRecBreadthFirst\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * Filter values inside a context.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as T from 'fp-ts/Task'\n *\n * const filterE = RA.filterE(T.ApplicativePar)\n * async function test() {\n *   assert.deepStrictEqual(\n *     await pipe(\n *       [-1, 2, 3],\n *       filterE((n) => T.of(n > 0))\n *     )(),\n *     [2, 3]\n *   )\n * }\n * test()\n *\n * @since 2.11.0\n */\nexport var filterE = /*#__PURE__*/ filterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.5.0\n */\nexport var unsafeInsertAt = RNEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.5.0\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    return isNonEmpty(as) ? RNEA.unsafeUpdateAt(i, a, as) : as;\n};\n/**\n * @category unsafe\n * @since 2.5.0\n */\nexport var unsafeDeleteAt = function (i, as) {\n    var xs = as.slice();\n    xs.splice(i, 1);\n    return xs;\n};\n/**\n * @category conversions\n * @since 2.5.0\n */\nexport var toArray = function (as) { return as.slice(); };\n/**\n * @category conversions\n * @since 2.5.0\n */\nexport var fromArray = function (as) { return (isEmpty(as) ? empty : as.slice()); };\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * An empty array\n *\n * @since 2.5.0\n */\nexport var empty = RNEA.empty;\nexport function every(predicate) {\n    return function (as) { return as.every(predicate); };\n}\n/**\n * Check if a predicate holds true for any array member.\n *\n * @example\n * import { some } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(pipe([-1, -2, 3], some(isPositive)), true)\n * assert.deepStrictEqual(pipe([-1, -2, -3], some(isPositive)), false)\n *\n * @since 2.9.0\n */\nexport var some = function (predicate) {\n    return function (as) {\n        return as.some(predicate);\n    };\n};\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexport var exists = some;\n/**\n * Places an element in between members of a `ReadonlyArray`, then folds the results using the provided `Monoid`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexport var intercalate = function (M) {\n    var intercalateM = RNEA.intercalate(M);\n    return function (middle) { return match(function () { return M.empty; }, intercalateM(middle)); };\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.5.0\n */\nexport var chain = flatMap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `ReadonlyNonEmptyArray` module instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var range = RNEA.range;\n/**\n * Use [`prepend`](#prepend) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var cons = RNEA.cons;\n/**\n * Use [`append`](#append) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var snoc = RNEA.snoc;\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RA.Functor` instead of `RA.readonlyArray`\n * (where `RA` is from `import RA from 'fp-ts/ReadonlyArray'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyArray = {\n    URI: URI,\n    compact: compact,\n    separate: separate,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    alt: _alt,\n    zero: zero,\n    unfold: unfold,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    extend: _extend,\n    wither: _wither,\n    wilt: _wilt\n};\n", "// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * @category refinements\n * @since 2.11.0\n */\nexport var isNumber = function (u) { return typeof u === 'number'; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Eq = {\n    equals: function (first, second) { return first === second; }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Ord = {\n    equals: Eq.equals,\n    compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Bounded = {\n    equals: Eq.equals,\n    compare: Ord.compare,\n    top: Infinity,\n    bottom: -Infinity\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Show = {\n    show: function (n) { return JSON.stringify(n); }\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var MagmaSub = {\n    concat: function (first, second) { return first - second; }\n};\n/**\n * `number` semigroup under addition.\n *\n * @example\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(SemigroupSum.concat(2, 3), 5)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var SemigroupSum = {\n    concat: function (first, second) { return first + second; }\n};\n/**\n * `number` semigroup under multiplication.\n *\n * @example\n * import { SemigroupProduct } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(SemigroupProduct.concat(2, 3), 6)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var SemigroupProduct = {\n    concat: function (first, second) { return first * second; }\n};\n/**\n * `number` monoid under addition.\n *\n * The `empty` value is `0`.\n *\n * @example\n * import { MonoidSum } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(MonoidSum.concat(2, MonoidSum.empty), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var MonoidSum = {\n    concat: SemigroupSum.concat,\n    empty: 0\n};\n/**\n * `number` monoid under multiplication.\n *\n * The `empty` value is `1`.\n *\n * @example\n * import { MonoidProduct } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(MonoidProduct.concat(2, MonoidProduct.empty), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var MonoidProduct = {\n    concat: SemigroupProduct.concat,\n    empty: 1\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Field = {\n    add: SemigroupSum.concat,\n    zero: 0,\n    mul: SemigroupProduct.concat,\n    one: 1,\n    sub: MagmaSub.concat,\n    degree: function (_) { return 1; },\n    div: function (first, second) { return first / second; },\n    mod: function (first, second) { return first % second; }\n};\n", "/**\n * ```ts\n * interface Separated<E, A> {\n *    readonly left: E\n *    readonly right: A\n * }\n * ```\n *\n * Represents a result of separating a whole into two parts.\n *\n * @since 2.10.0\n */\nimport { pipe } from './function';\nimport { flap as flap_ } from './Functor';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var separated = function (left, right) { return ({ left: left, right: right }); };\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\nvar _bimap = function (fa, g, f) { return pipe(fa, bimap(g, f)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var map = function (f) {\n    return function (fa) {\n        return separated(left(fa), f(right(fa)));\n    };\n};\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var mapLeft = function (f) {\n    return function (fa) {\n        return separated(f(left(fa)), right(fa));\n    };\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var bimap = function (f, g) {\n    return function (fa) {\n        return separated(f(left(fa)), g(right(fa)));\n    };\n};\n/**\n * @category type lambdas\n * @since 2.10.0\n */\nexport var URI = 'Separated';\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    mapLeft: _mapLeft,\n    bimap: _bimap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nexport var left = function (s) { return s.left; };\n/**\n * @since 2.10.0\n */\nexport var right = function (s) { return s.right; };\n", "import * as _ from './internal';\nexport function wiltDefault(T, C) {\n    return function (F) {\n        var traverseF = T.traverse(F);\n        return function (wa, f) { return F.map(traverseF(wa, f), C.separate); };\n    };\n}\nexport function witherDefault(T, C) {\n    return function (F) {\n        var traverseF = T.traverse(F);\n        return function (wa, f) { return F.map(traverseF(wa, f), C.compact); };\n    };\n}\nexport function filterE(W) {\n    return function (F) {\n        var witherF = W.wither(F);\n        return function (predicate) { return function (ga) { return witherF(ga, function (a) { return F.map(predicate(a), function (b) { return (b ? _.some(a) : _.none); }); }); }; };\n    };\n}\n", "export function guard(F, P) {\n    return function (b) { return (b ? P.of(undefined) : F.zero()); };\n}\n", "export {};\n", "// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * @category refinements\n * @since 2.11.0\n */\nexport var isBoolean = function (u) { return typeof u === 'boolean'; };\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = function (onFalse, onTrue) {\n    return function (value) {\n        return value ? onTrue() : onFalse();\n    };\n};\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Defines the fold over a boolean value.\n * Takes two thunks `onTrue`, `onFalse` and a `boolean` value.\n * If `value` is false, `onFalse()` is returned, otherwise `onTrue()`.\n *\n * @example\n * import { some, map } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n * import { match } from 'fp-ts/boolean'\n *\n * assert.deepStrictEqual(\n *  pipe(\n *    some(true),\n *    map(match(() => 'false', () => 'true'))\n *  ),\n *  some('true')\n * )\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = foldW;\n/**\n * Alias of [`match`](#match).\n *\n * @category pattern matching\n * @since 2.2.0\n */\nexport var fold = match;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Eq = {\n    equals: function (first, second) { return first === second; }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var BooleanAlgebra = {\n    meet: function (first, second) { return first && second; },\n    join: function (first, second) { return first || second; },\n    zero: false,\n    one: true,\n    implies: function (first, second) { return !first || second; },\n    not: function (b) { return !b; }\n};\n/**\n * `boolean` semigroup under conjunction.\n *\n * @example\n * import { SemigroupAll } from 'fp-ts/boolean'\n *\n * assert.deepStrictEqual(SemigroupAll.concat(true, true), true)\n * assert.deepStrictEqual(SemigroupAll.concat(true, false), false)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var SemigroupAll = {\n    concat: function (first, second) { return first && second; }\n};\n/**\n * `boolean` semigroup under disjunction.\n *\n * @example\n * import { SemigroupAny } from 'fp-ts/boolean'\n *\n * assert.deepStrictEqual(SemigroupAny.concat(true, true), true)\n * assert.deepStrictEqual(SemigroupAny.concat(true, false), true)\n * assert.deepStrictEqual(SemigroupAny.concat(false, false), false)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var SemigroupAny = {\n    concat: function (first, second) { return first || second; }\n};\n/**\n * `boolean` monoid under conjunction.\n *\n * The `empty` value is `true`.\n *\n * @example\n * import { MonoidAll } from 'fp-ts/boolean'\n *\n * assert.deepStrictEqual(MonoidAll.concat(true, true), true)\n * assert.deepStrictEqual(MonoidAll.concat(true, false), false)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var MonoidAll = {\n    concat: SemigroupAll.concat,\n    empty: true\n};\n/**\n * `boolean` monoid under disjunction.\n *\n * The `empty` value is `false`.\n *\n * @example\n * import { MonoidAny } from 'fp-ts/boolean'\n *\n * assert.deepStrictEqual(MonoidAny.concat(true, true), true)\n * assert.deepStrictEqual(MonoidAny.concat(true, false), true)\n * assert.deepStrictEqual(MonoidAny.concat(false, false), false)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var MonoidAny = {\n    concat: SemigroupAny.concat,\n    empty: false\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Ord = {\n    equals: Eq.equals,\n    compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Show = {\n    show: function (b) { return JSON.stringify(b); }\n};\n", "/**\n * Boolean algebras are Heyting algebras with the additional constraint that the law of the excluded middle is true\n * (equivalently, double-negation is true).\n *\n * Instances should satisfy the following laws in addition to the `HeytingAlgebra` laws:\n *\n * - Excluded middle: `a ∨ ¬a <-> 1`\n *\n * Boolean algebras generalize classical logic: one is equivalent to \"true\" and zero is equivalent to \"false\".\n *\n * @since 2.0.0\n */\nimport { getBooleanAlgebra } from './function';\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Every boolean algebras has a dual algebra, which involves reversing one/zero as well as join/meet.\n *\n * @since 2.10.0\n */\nexport var reverse = function (B) { return ({\n    meet: function (x, y) { return B.join(x, y); },\n    join: function (x, y) { return B.meet(x, y); },\n    zero: B.one,\n    one: B.zero,\n    implies: function (x, y) { return B.join(B.not(x), y); },\n    not: B.not\n}); };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var booleanAlgebraVoid = {\n    meet: function () { return undefined; },\n    join: function () { return undefined; },\n    zero: undefined,\n    one: undefined,\n    implies: function () { return undefined; },\n    not: function () { return undefined; }\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getDualBooleanAlgebra = reverse;\n/**\n * Use [`BooleanAlgebra`](./boolean.ts.html#booleanalgebra) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var booleanAlgebraBoolean = {\n    meet: function (x, y) { return x && y; },\n    join: function (x, y) { return x || y; },\n    zero: false,\n    one: true,\n    implies: function (x, y) { return !x || y; },\n    not: function (x) { return !x; }\n};\n/**\n * Use [`getBooleanAlgebra`](./function.ts.html#getbooleanalgebra) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFunctionBooleanAlgebra = getBooleanAlgebra;\n", "/**\n * The `Bounded` type class represents totally ordered types that have an upper and lower boundary.\n *\n * Instances should satisfy the following law in addition to the `Ord` laws:\n *\n * - Bounded: `bottom <= a <= top`\n *\n * @since 2.0.0\n */\nimport * as O from './Ord';\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Clamp a value between bottom and top values.\n *\n * @category utils\n * @since 2.12.0\n */\nexport var clamp = function (B) { return O.clamp(B)(B.bottom, B.top); };\n/**\n * Reverses the Ord of a bound and swaps top and bottom values.\n *\n * @category utils\n * @since 2.12.0\n */\nexport var reverse = function (B) {\n    var R = O.reverse(B);\n    return {\n        equals: R.equals,\n        compare: R.compare,\n        top: B.bottom,\n        bottom: B.top\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`Bounded`](./number.ts.html#bounded) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var boundedNumber = {\n    equals: O.ordNumber.equals,\n    compare: O.ordNumber.compare,\n    top: Infinity,\n    bottom: -Infinity\n};\n", "import { getMinMaxDistributiveLattice } from './DistributiveLattice';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function getMinMaxBoundedDistributiveLattice(O) {\n    var L = getMinMaxDistributiveLattice(O);\n    return function (min, max) { return ({\n        join: L.join,\n        meet: L.meet,\n        zero: min,\n        one: max\n    }); };\n}\n", "import { max, min } from './Ord';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function getMinMaxDistributiveLattice(O) {\n    return {\n        meet: min(O),\n        join: max(O)\n    };\n}\n", "export {};\n", "export {};\n", "export {};\n", "export {};\n", "/**\n * @since 2.0.0\n */\nexport var tailRec = function (startWith, f) {\n    var ab = f(startWith);\n    while (ab._tag === 'Left') {\n        ab = f(ab.left);\n    }\n    return ab.right;\n};\n", "import { identity } from './function';\nexport function split(P, C) {\n    return function (pab, pcd) { return C.compose(P.right(pcd), P.left(pab)); };\n}\nexport function fanIn(P, C) {\n    var splitPC = split(P, C);\n    return function (pac, pbc) {\n        return C.compose(P.promap(C.id(), function (cc) { return (cc._tag === 'Left' ? cc.left : cc.right); }, identity), splitPC(pac, pbc));\n    };\n}\nexport function splitChoice(F) {\n    return split(F, F);\n}\nexport function fanin(F) {\n    return fanIn(F, F);\n}\n", "export {};\n", "import { pipe } from './function';\nimport { getFunctorComposition, map } from './Functor';\nimport { getLeft, getRight } from './Option';\nimport * as S from './Separated';\nexport function compact(F, G) {\n    return function (fga) { return F.map(fga, G.compact); };\n}\nexport function separate(F, C, G) {\n    var _compact = compact(F, C);\n    var _map = map(F, G);\n    return function (fge) { return S.separated(_compact(pipe(fge, _map(getLeft))), _compact(pipe(fge, _map(getRight)))); };\n}\n/** @deprecated */\nexport function getCompactableComposition(F, G) {\n    var map = getFunctorComposition(F, G).map;\n    return {\n        map: map,\n        compact: compact(F, G),\n        separate: separate(F, G, G)\n    };\n}\n", "import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { chainEitherK as chainEitherK_, fromEitherK as fromEitherK_, tapEither as tapEither_ } from './FromEither';\nimport { constNull, constUndefined, dual, flow, identity, pipe } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport { not } from './Predicate';\nimport { first, last } from './Semigroup';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var none = _.none;\n/**\n * Constructs a `Some`. Represents an optional value that exists.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var some = _.some;\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? some(a) : none); };\n}\n/**\n * Returns the `Left` value of an `Either` if possible.\n *\n * @example\n * import { getLeft, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getLeft(right(1)), none)\n * assert.deepStrictEqual(getLeft(left('a')), some('a'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getLeft = function (ma) { return (ma._tag === 'Right' ? none : some(ma.left)); };\n/**\n * Returns the `Right` value of an `Either` if possible.\n *\n * @example\n * import { getRight, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getRight(right(1)), some(1))\n * assert.deepStrictEqual(getRight(left('a')), none)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getRight = function (ma) { return (ma._tag === 'Left' ? none : some(ma.right)); };\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _filter = function (fa, predicate) { return pipe(fa, filter(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Option';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = function (S) { return ({\n    show: function (ma) { return (isNone(ma) ? 'none' : \"some(\".concat(S.show(ma.value), \")\")); }\n}); };\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals(none, none), true)\n * assert.strictEqual(E.equals(none, some(1)), false)\n * assert.strictEqual(E.equals(some(1), none), false)\n * assert.strictEqual(E.equals(some(1), some(2)), false)\n * assert.strictEqual(E.equals(some(1), some(1)), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = function (E) { return ({\n    equals: function (x, y) { return x === y || (isNone(x) ? isNone(y) : isNone(y) ? false : E.equals(x.value, y.value)); }\n}); };\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const O = getOrd(N.Ord)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = function (O) { return ({\n    equals: getEq(O).equals,\n    compare: function (x, y) { return (x === y ? 0 : isSome(x) ? (isSome(y) ? O.compare(x.value, y.value) : 1) : -1); }\n}); };\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(b) | some(b)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/Option'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const M = getMonoid(SemigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function (S) { return ({\n    concat: function (x, y) { return (isNone(x) ? y : isNone(y) ? x : some(S.concat(x.value, y.value))); },\n    empty: none\n}); };\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isNone(fa) ? none : some(f(fa.value));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Some` value of this `Option` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Some` value of this `Option` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = some;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) {\n    return isNone(fab) ? none : isNone(fa) ? none : some(fab.value(fa.value));\n}; };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) { return (isNone(ma) ? none : f(ma.value)); });\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isNone(fa) ? b : f(b, fa.value);\n}; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isNone(fa) ? M.empty : f(fa.value);\n}; }; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isNone(fa) ? b : f(fa.value, b);\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The `Option` to return if `self` is `None`.\n *\n * @example\n * import * as O from \"fp-ts/Option\"\n *\n * assert.deepStrictEqual(O.orElse(O.none, () => O.none), O.none)\n * assert.deepStrictEqual(O.orElse(O.some(1), () => O.none), O.some(1))\n * assert.deepStrictEqual(O.orElse(O.none, () => O.some('b')), O.some('b'))\n * assert.deepStrictEqual(O.orElse(O.some(1), () => O.some('b')), O.some(1))\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var orElse = dual(2, function (self, that) { return (isNone(self) ? that() : self); });\n/**\n * Alias of `orElse`.\n *\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category legacy\n * @since 2.9.0\n */\nexport var altW = orElse;\n/**\n * Alias of `orElse`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var alt = orElse;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @since 2.7.0\n */\nexport var zero = function () { return none; };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/ guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isNone(wa) ? none : some(f(wa));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = /*#__PURE__*/ flatMap(identity);\nvar defaultSeparated = /*#__PURE__*/ separated(none, none);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = function (ma) {\n    return isNone(ma) ? defaultSeparated : separated(getLeft(ma.value), getRight(ma.value));\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = function (predicate) {\n    return function (fa) {\n        return isNone(fa) ? none : predicate(fa.value) ? fa : none;\n    };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = function (f) { return function (fa) {\n    return isNone(fa) ? none : f(fa.value);\n}; };\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = function (predicate) {\n    return function (fa) {\n        return separated(_filter(fa, not(predicate)), _filter(fa, predicate));\n    };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return flow(map(f), separate); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    return function (f) {\n        return function (ta) {\n            return isNone(ta) ? F.of(none) : F.map(f(ta.value), some);\n        };\n    };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ta) {\n        return isNone(ta) ? F.of(none) : F.map(ta.value, some);\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * @since 2.7.0\n */\nexport var throwError = function () { return none; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    throwError: throwError\n};\n/**\n * Transforms an `Either` to an `Option` discarding the error.\n *\n * Alias of [getRight](#getright)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = getRight;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise.\n *\n * @example\n * import { some, none, isSome } from 'fp-ts/Option'\n *\n * assert.strictEqual(isSome(some(1)), true)\n * assert.strictEqual(isSome(none), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isSome = _.isSome;\n/**\n * Returns `true` if the option is `None`, `false` otherwise.\n *\n * @example\n * import { some, none, isNone } from 'fp-ts/Option'\n *\n * assert.strictEqual(isNone(some(1)), false)\n * assert.strictEqual(isNone(none), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNone = function (fa) { return fa._tag === 'None'; };\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = function (onNone, onSome) {\n    return function (ma) {\n        return isNone(ma) ? onNone() : onSome(ma.value);\n    };\n};\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is\n * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.\n *\n * @example\n * import { some, none, match } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a some containing 1'\n * )\n *\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = function (onNone) {\n    return function (ma) {\n        return isNone(ma) ? onNone() : ma.value;\n    };\n};\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns the given default value\n *\n * @example\n * import { some, none, getOrElse } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = compact;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as O from 'fp-ts/Option'\n * import * as E from 'fp-ts/Either'\n *\n * const compute = (value: number) => pipe(\n *   O.of(value),\n *   O.tapEither((value) => value > 0 ? E.right('ok') : E.left('error')),\n * )\n *\n * assert.deepStrictEqual(compute(1), O.of(1))\n * assert.deepStrictEqual(compute(-42), O.none)\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainEitherK = \n/*#__PURE__*/ chainEitherK_(FromEither, Chain);\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromNullable = function (a) { return (a == null ? none : some(a)); };\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a\n * `Some`.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f) {\n    try {\n        return some(f());\n    }\n    catch (e) {\n        return none;\n    }\n};\n/**\n * Converts a function that may throw to one returning a `Option`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return tryCatch(function () { return f.apply(void 0, a); });\n    };\n};\n/**\n * Returns a *smart constructor* from a function that returns a nullable value.\n *\n * @example\n * import { fromNullableK, none, some } from 'fp-ts/Option'\n *\n * const f = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const g = fromNullableK(f)\n *\n * assert.deepStrictEqual(g('1'), some(1))\n * assert.deepStrictEqual(g('a'), none)\n *\n * @category lifting\n * @since 2.9.0\n */\nexport var fromNullableK = function (f) { return flow(f, fromNullable); };\n/**\n * This is `chain` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Employee {\n *   readonly company?: {\n *     readonly address?: {\n *       readonly street?: {\n *         readonly name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee1.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee2.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   none\n * )\n *\n * @category sequencing\n * @since 2.9.0\n */\nexport var chainNullableK = function (f) {\n    return function (ma) {\n        return isNone(ma) ? none : fromNullable(f(ma.value));\n    };\n};\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `null`.\n *\n * @example\n * import { some, none, toNullable } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toNullable\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toNullable\n *   ),\n *   null\n * )\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toNullable = /*#__PURE__*/ match(constNull, identity);\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.\n *\n * @example\n * import { some, none, toUndefined } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toUndefined\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toUndefined\n *   ),\n *   undefined\n * )\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toUndefined = /*#__PURE__*/ match(constUndefined, identity);\nexport function elem(E) {\n    return function (a, ma) {\n        if (ma === undefined) {\n            var elemE_1 = elem(E);\n            return function (ma) { return elemE_1(a, ma); };\n        }\n        return isNone(ma) ? false : E.equals(a, ma.value);\n    };\n}\n/**\n * Returns `true` if the predicate is satisfied by the wrapped value\n *\n * @example\n * import { some, none, exists } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 0)\n *   ),\n *   true\n * )\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 1)\n *   ),\n *   false\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     exists(n => n > 0)\n *   ),\n *   false\n * )\n *\n * @since 2.0.0\n */\nexport var exists = function (predicate) {\n    return function (ma) {\n        return isNone(ma) ? false : predicate(ma.value);\n    };\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        var o = f(0, _.head(as));\n        if (isNone(o)) {\n            return none;\n        }\n        var out = [o.value];\n        for (var i = 1; i < as.length; i++) {\n            var o_1 = f(i, as[i]);\n            if (isNone(o_1)) {\n                return none;\n            }\n            out.push(o_1.value);\n        }\n        return some(out);\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `Refinement` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function getRefinement(getOption) {\n    return function (a) { return isSome(getOption(a)); };\n}\n/**\n * Use [`chainNullableK`](#chainnullablek) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var mapNullable = chainNullableK;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `O.Functor` instead of `O.option`\n * (where `O` is from `import O from 'fp-ts/Option'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var option = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    zero: zero,\n    alt: _alt,\n    extend: _extend,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = /*#__PURE__*/ getApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = /*#__PURE__*/ getApplicativeMonoid(Applicative);\n/**\n * Use\n *\n * ```ts\n * import { first } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(first())\n * ```\n *\n * instead.\n *\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFirstMonoid = function () { return getMonoid(first()); };\n/**\n * Use\n *\n * ```ts\n * import { last } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(last())\n * ```\n *\n * instead.\n *\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getLastMonoid = function () { return getMonoid(last()); };\n", "import { constFalse, constTrue, flow, pipe } from './function';\nvar contramap_ = function (predicate, f) { return pipe(predicate, contramap(f)); };\n/**\n * @since 2.11.0\n */\nexport var contramap = function (f) {\n    return function (predicate) {\n        return flow(f, predicate);\n    };\n};\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport var URI = 'Predicate';\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getSemigroupAny = function () { return ({\n    concat: function (first, second) { return pipe(first, or(second)); }\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getMonoidAny = function () { return ({\n    concat: getSemigroupAny().concat,\n    empty: constFalse\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getSemigroupAll = function () { return ({\n    concat: function (first, second) { return pipe(first, and(second)); }\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getMonoidAll = function () { return ({\n    concat: getSemigroupAll().concat,\n    empty: constTrue\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Contravariant = {\n    URI: URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var not = function (predicate) {\n    return function (a) {\n        return !predicate(a);\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var or = function (second) {\n    return function (first) {\n        return function (a) {\n            return first(a) || second(a);\n        };\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var and = function (second) {\n    return function (first) {\n        return function (a) {\n            return first(a) && second(a);\n        };\n    };\n};\n", "/**\n * @since 2.0.0\n */\nexport var log = function (a) {\n    return function () {\n        return console.log(a);\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var warn = function (a) {\n    return function () {\n        return console.warn(a);\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var error = function (a) {\n    return function () {\n        return console.error(a);\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var info = function (a) {\n    return function () {\n        return console.info(a);\n    };\n};\n", "import { identity, pipe, unsafeCoerce } from './function';\nimport { flap as flap_ } from './Functor';\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var make = unsafeCoerce;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(S) {\n    return {\n        show: function (c) { return \"make(\".concat(S.show(c), \")\"); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getOrd = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getBounded = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getSemigroup = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getMonoid = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getSemiring = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getRing = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getHeytingAlgebra = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getBooleanAlgebra = identity;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApply(S) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return make(S.concat(fab, fa)); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApplicative(M) {\n    var A = getApply(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: A.map,\n        ap: A.ap,\n        of: function () { return make(M.empty); }\n    };\n}\nvar _contramap = function (fa, f) { return pipe(fa, contramap(f)); };\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\n/* istanbul ignore next */\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/**\n * @since 2.0.0\n */\nexport var contramap = function () { return unsafeCoerce; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function () { return unsafeCoerce; };\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.6.2\n */\nexport var bimap = function (f) { return function (fa) {\n    return make(f(fa));\n}; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category error handling\n * @since 2.6.2\n */\nexport var mapLeft = function (f) { return function (fa) { return make(f(fa)); }; };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Const';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Contravariant = {\n    URI: URI,\n    contramap: _contramap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `C.Functor` instead of `C.const_`\n * (where `C` is from `import C from 'fp-ts/Const'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var const_ = {\n    URI: URI,\n    map: _map,\n    contramap: _contramap,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n", "export {};\n", "import { pipe } from './function';\nimport * as N from './number';\nimport * as O from './Ord';\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Eq = {\n    equals: function (first, second) { return first.valueOf() === second.valueOf(); }\n};\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var eqDate = {\n    equals: function (x, y) { return x.getDate() === y.getDate(); }\n};\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var eqMonth = {\n    equals: function (x, y) { return x.getMonth() === y.getMonth(); }\n};\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var eqYear = {\n    equals: function (x, y) { return x.getFullYear() === y.getFullYear(); }\n};\n/**\n * @example\n * import { Ord } from 'fp-ts/Date'\n *\n * assert.deepStrictEqual(Ord.compare(new Date(1, 1, 2020), new Date(1, 1, 2021)), -1)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Ord = /*#__PURE__*/ pipe(N.Ord, \n/*#__PURE__*/ O.contramap(function (date) { return date.valueOf(); }));\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Returns the current `Date`\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var create = function () { return new Date(); };\n/**\n * Returns the number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC\n *\n * @since 2.0.0\n */\nexport var now = function () { return new Date().getTime(); };\n", "import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { tailRec } from './ChainRec';\nimport { chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_ } from './FromEither';\nimport { dual, flow, identity, pipe } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var left = _.left;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var right = _.right;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) { return (isLeft(ma) ? ma : f(ma.right)); });\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) { return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n}; };\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\nvar _chainRec = function (a, f) {\n    return tailRec(f(a), function (e) {\n        return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n    });\n};\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = function (SE, SA) { return ({\n    show: function (ma) { return (isLeft(ma) ? \"left(\".concat(SE.show(ma.left), \")\") : \"right(\".concat(SA.show(ma.right), \")\")); }\n}); };\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = function (EL, EA) { return ({\n    equals: function (x, y) {\n        return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n    }\n}); };\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const S = getSemigroup<string, number>(SemigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getSemigroup = function (S) { return ({\n    concat: function (x, y) { return (isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right))); }\n}); };\n/**\n * Builds a `Compactable` instance for `Either` given `Monoid` for the left side.\n *\n * @category filtering\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var empty = left(M.empty);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: function (ma) { return (isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value)); },\n        separate: function (ma) {\n            return isLeft(ma)\n                ? separated(ma, ma)\n                : isLeft(ma.right)\n                    ? separated(right(ma.right.left), empty)\n                    : separated(empty, right(ma.right.right));\n        }\n    };\n};\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category filtering\n * @since 2.10.0\n */\nexport var getFilterable = function (M) {\n    var empty = left(M.empty);\n    var _a = getCompactable(M), compact = _a.compact, separate = _a.separate;\n    var filter = function (ma, predicate) {\n        return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n    };\n    var partition = function (ma, p) {\n        return isLeft(ma)\n            ? separated(ma, ma)\n            : p(ma.right)\n                ? separated(empty, right(ma.right))\n                : separated(right(ma.right), empty);\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: compact,\n        separate: separate,\n        filter: filter,\n        filterMap: function (ma, f) {\n            if (isLeft(ma)) {\n                return ma;\n            }\n            var ob = f(ma.right);\n            return ob._tag === 'None' ? empty : right(ob.value);\n        },\n        partition: partition,\n        partitionMap: function (ma, f) {\n            if (isLeft(ma)) {\n                return separated(ma, ma);\n            }\n            var e = f(ma.right);\n            return isLeft(e) ? separated(right(e.left), empty) : separated(empty, right(e.right));\n        }\n    };\n};\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var getWitherable = function (M) {\n    var F_ = getFilterable(M);\n    var C = getCompactable(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: F_.compact,\n        separate: F_.separate,\n        filter: F_.filter,\n        filterMap: F_.filterMap,\n        partition: F_.partition,\n        partitionMap: F_.partitionMap,\n        traverse: _traverse,\n        sequence: sequence,\n        reduce: _reduce,\n        foldMap: _foldMap,\n        reduceRight: _reduceRight,\n        wither: witherDefault(Traversable, C),\n        wilt: wiltDefault(Traversable, C)\n    };\n};\n/**\n * The default [`Applicative`](#applicative) instance returns the first error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * @example\n * import * as A from 'fp-ts/Apply'\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as S from 'fp-ts/Semigroup'\n * import * as string from 'fp-ts/string'\n *\n * const parseString = (u: unknown): E.Either<string, string> =>\n *   typeof u === 'string' ? E.right(u) : E.left('not a string')\n *\n * const parseNumber = (u: unknown): E.Either<string, number> =>\n *   typeof u === 'number' ? E.right(u) : E.left('not a number')\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n *\n * const parsePerson = (\n *   input: Record<string, unknown>\n * ): E.Either<string, Person> =>\n *   pipe(\n *     E.Do,\n *     E.apS('name', parseString(input.name)),\n *     E.apS('age', parseNumber(input.age))\n *   )\n *\n * assert.deepStrictEqual(parsePerson({}), E.left('not a string')) // <= first error\n *\n * const Applicative = E.getApplicativeValidation(\n *   pipe(string.Semigroup, S.intercalate(', '))\n * )\n *\n * const apS = A.apS(Applicative)\n *\n * const parsePersonAll = (\n *   input: Record<string, unknown>\n * ): E.Either<string, Person> =>\n *   pipe(\n *     E.Do,\n *     apS('name', parseString(input.name)),\n *     apS('age', parseNumber(input.age))\n *   )\n *\n * assert.deepStrictEqual(parsePersonAll({}), E.left('not a string, not a number')) // <= all errors\n *\n * @category error handling\n * @since 2.7.0\n */\nexport var getApplicativeValidation = function (SE) { return ({\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    ap: function (fab, fa) {\n        return isLeft(fab)\n            ? isLeft(fa)\n                ? left(SE.concat(fab.left, fa.left))\n                : fab\n            : isLeft(fa)\n                ? fa\n                : right(fab.right(fa.right));\n    },\n    of: of\n}); };\n/**\n * The default [`Alt`](#alt) instance returns the last error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as S from 'fp-ts/Semigroup'\n * import * as string from 'fp-ts/string'\n *\n * const parseString = (u: unknown): E.Either<string, string> =>\n *   typeof u === 'string' ? E.right(u) : E.left('not a string')\n *\n * const parseNumber = (u: unknown): E.Either<string, number> =>\n *   typeof u === 'number' ? E.right(u) : E.left('not a number')\n *\n * const parse = (u: unknown): E.Either<string, string | number> =>\n *   pipe(\n *     parseString(u),\n *     E.alt<string, string | number>(() => parseNumber(u))\n *   )\n *\n * assert.deepStrictEqual(parse(true), E.left('not a number')) // <= last error\n *\n * const Alt = E.getAltValidation(pipe(string.Semigroup, S.intercalate(', ')))\n *\n * const parseAll = (u: unknown): E.Either<string, string | number> =>\n *   Alt.alt<string | number>(parseString(u), () => parseNumber(u))\n *\n * assert.deepStrictEqual(parseAll(true), E.left('not a string, not a number')) // <= all errors\n *\n * @category error handling\n * @since 2.7.0\n */\nexport var getAltValidation = function (SE) { return ({\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    alt: function (me, that) {\n        if (isRight(me)) {\n            return me;\n        }\n        var ea = that();\n        return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n    }\n}); };\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Right` value of this `Either` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Right` value of this `Either` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = function (fa) { return function (fab) {\n    return isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n}; };\n/**\n * @since 2.0.0\n */\nexport var ap = apW;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix'\n * )\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n}; };\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as S from 'fp-ts/string'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(S.Monoid)(yell)),\n *   'a!'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(S.Monoid)(yell)),\n *   S.Monoid.empty\n * )\n *\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix'\n * )\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.Applicative)(RA.head)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.Applicative)(RA.head)),\n *   O.none\n * )\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    return function (f) {\n        return function (ta) {\n            return isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right);\n        };\n    };\n};\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.Applicative)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.Applicative)),\n *   O.none\n * )\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ma) {\n        return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var bimap = function (f, g) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : right(g(fa.right));\n}; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the error and the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) {\n    return isLeft(fa) ? that() : fa;\n}; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Either` returns the left-most non-`Left` value (or the right-most `Left` value if both values are `Left`).\n *\n * | x        | y        | pipe(x, alt(() => y) |\n * | -------- | -------- | -------------------- |\n * | left(a)  | left(b)  | left(b)              |\n * | left(a)  | right(2) | right(2)             |\n * | right(1) | left(b)  | right(1)             |\n * | right(1) | right(2) | right(1)             |\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     E.left('a'),\n *     E.alt(() => E.left('b'))\n *   ),\n *   E.left('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     E.left('a'),\n *     E.alt(() => E.right(2))\n *   ),\n *   E.right(2)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     E.right(1),\n *     E.alt(() => E.left('b'))\n *   ),\n *   E.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     E.right(1),\n *     E.alt(() => E.right(2))\n *   ),\n *   E.right(1)\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap,\n    chainRec: _chainRec\n};\n/**\n * @since 2.6.3\n */\nexport var throwError = left;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: identity\n};\n/**\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category lifting\n * @since 2.0.0\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some(1),\n *     E.fromOption(() => 'error')\n *   ),\n *   E.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     E.fromOption(() => 'error')\n *   ),\n *   E.left('error')\n * )\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromOption = \n/*#__PURE__*/ fromOption_(FromEither);\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isLeft = _.isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isRight = _.isRight;\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = function (onLeft, onRight) {\n    return function (ma) {\n        return isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n    };\n};\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { match, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     match(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     match(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = function (onLeft) {\n    return function (ma) {\n        return isLeft(ma) ? onLeft(ma.left) : ma.right;\n    };\n};\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Less strict version of [`apFirst`](#apfirst)\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apFirstW = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * Less strict version of [`apSecond`](#apsecond)\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apSecondW = apSecond;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = \n/*#__PURE__*/ flatMap(identity);\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * Use `liftOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var fromOptionK = \n/*#__PURE__*/ fromOptionK_(FromEither);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainOptionK = /*#__PURE__*/ chainOptionK_(FromEither, Chain);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.13.2\n */\nexport var chainOptionKW = chainOptionK;\n/** @internal */\nvar _FromEither = {\n    fromEither: FromEither.fromEither\n};\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftNullable = /*#__PURE__*/ _.liftNullable(_FromEither);\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftOption = /*#__PURE__*/ _.liftOption(_FromEither);\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapNullable = /*#__PURE__*/ _.flatMapNullable(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapOption = /*#__PURE__*/ _.flatMapOption(_FromEither, _FlatMap);\n/**\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     E.right(1),\n *     E.filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   E.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     E.right(-1),\n *     E.filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   E.left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     E.left('a'),\n *     E.filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   E.left('a')\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterOrElse = /*#__PURE__*/ filterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category filtering\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @since 2.0.0\n */\nexport var swap = function (ma) { return (isLeft(ma) ? right(ma.left) : left(ma.right)); };\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var orElseW = function (onLeft) {\n    return function (ma) {\n        return isLeft(ma) ? onLeft(ma.left) : ma;\n    };\n};\n/**\n * Useful for recovering from errors.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var orElse = orElseW;\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromNullable = function (e) {\n    return function (a) {\n        return a == null ? left(e) : right(a);\n    };\n};\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: ReadonlyArray<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: ReadonlyArray<A>): E.Either<Error, A> =>\n *   E.tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n *\n * assert.deepStrictEqual(head([]), E.left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), E.right(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f, onThrow) {\n    try {\n        return right(f());\n    }\n    catch (e) {\n        return left(onThrow(e));\n    }\n};\n/**\n * Converts a function that may throw to one returning a `Either`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f, onThrow) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return tryCatch(function () { return f.apply(void 0, a); }, onThrow);\n    };\n};\n/**\n * Use `liftNullable`.\n *\n * @category legacy\n * @since 2.9.0\n */\nexport var fromNullableK = function (e) {\n    var from = fromNullable(e);\n    return function (f) { return flow(f, from); };\n};\n/**\n * Use `flatMapNullable`.\n *\n * @category legacy\n * @since 2.9.0\n */\nexport var chainNullableK = function (e) {\n    var from = fromNullableK(e);\n    return function (f) { return flatMap(from(f)); };\n};\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var toUnion = /*#__PURE__*/ foldW(identity, identity);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nexport function toError(e) {\n    try {\n        return e instanceof Error ? e : new Error(String(e));\n    }\n    catch (error) {\n        return new Error();\n    }\n}\nexport function elem(E) {\n    return function (a, ma) {\n        if (ma === undefined) {\n            var elemE_1 = elem(E);\n            return function (ma) { return elemE_1(a, ma); };\n        }\n        return isLeft(ma) ? false : E.equals(a, ma.right);\n    };\n}\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nexport var exists = function (predicate) {\n    return function (ma) {\n        return isLeft(ma) ? false : predicate(ma.right);\n    };\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        var e = f(0, _.head(as));\n        if (isLeft(e)) {\n            return e;\n        }\n        var out = [e.right];\n        for (var i = 1; i < as.length; i++) {\n            var e_1 = f(i, as[i]);\n            if (isLeft(e_1)) {\n                return e_1;\n            }\n            out.push(e_1.right);\n        }\n        return right(out);\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.8.0\n */\nexport var chainFirstW = tap;\n/**\n * Use [`parse`](./Json.ts.html#parse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function parseJSON(s, onError) {\n    return tryCatch(function () { return JSON.parse(s); }, onError);\n}\n/**\n * Use [`stringify`](./Json.ts.html#stringify) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var stringifyJSON = function (u, onError) {\n    return tryCatch(function () {\n        var s = JSON.stringify(u);\n        if (typeof s !== 'string') {\n            throw new Error('Converting unsupported structure to JSON');\n        }\n        return s;\n    }, onError);\n};\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `E.Functor` instead of `E.either`\n * (where `E` is from `import E from 'fp-ts/Either'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var either = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    alt: _alt,\n    extend: _extend,\n    chainRec: _chainRec,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/ getApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/ getApplicativeMonoid(Applicative);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getValidationSemigroup = function (SE, SA) {\n    return getApplySemigroup_(getApplicativeValidation(SE))(SA);\n};\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getValidationMonoid = function (SE, MA) {\n    return getApplicativeMonoid(getApplicativeValidation(SE))(MA);\n};\n/**\n * Use [`getApplicativeValidation`](#getapplicativevalidation) and [`getAltValidation`](#getaltvalidation) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function getValidation(SE) {\n    var ap = getApplicativeValidation(SE).ap;\n    var alt = getAltValidation(SE).alt;\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        of: of,\n        chain: flatMap,\n        bimap: _bimap,\n        mapLeft: _mapLeft,\n        reduce: _reduce,\n        foldMap: _foldMap,\n        reduceRight: _reduceRight,\n        extend: _extend,\n        traverse: _traverse,\n        sequence: sequence,\n        chainRec: _chainRec,\n        throwError: throwError,\n        ap: ap,\n        alt: alt\n    };\n}\n", "import { ap as ap_ } from './Apply';\nimport * as E from './Either';\nimport { flow, pipe } from './function';\nimport { map as map_ } from './Functor';\nexport function right(F) {\n    return flow(E.right, F.of);\n}\nexport function left(F) {\n    return flow(E.left, F.of);\n}\nexport function rightF(F) {\n    return function (fa) { return F.map(fa, E.right); };\n}\nexport function leftF(F) {\n    return function (fe) { return F.map(fe, E.left); };\n}\nexport function fromNullable(F) {\n    return function (e) { return flow(E.fromNullable(e), F.of); };\n}\nexport function fromNullableK(F) {\n    var fromNullableF = fromNullable(F);\n    return function (e) {\n        var fromNullableFE = fromNullableF(e);\n        return function (f) { return flow(f, fromNullableFE); };\n    };\n}\nexport function chainNullableK(M) {\n    var chainM = chain(M);\n    var fromNullableKM = fromNullableK(M);\n    return function (e) {\n        var fromNullableKMe = fromNullableKM(e);\n        return function (f) { return chainM(fromNullableKMe(f)); };\n    };\n}\nexport function map(F) {\n    return map_(F, E.Functor);\n}\nexport function ap(F) {\n    return ap_(F, E.Apply);\n}\nexport function chain(M) {\n    var flatMapM = flatMap(M);\n    return function (f) { return function (ma) { return flatMapM(ma, f); }; };\n}\n/** @internal */\nexport function flatMap(M) {\n    return function (ma, f) { return M.chain(ma, function (e) { return (E.isLeft(e) ? M.of(e) : f(e.right)); }); };\n}\nexport function alt(M) {\n    return function (second) { return function (first) { return M.chain(first, function (e) { return (E.isLeft(e) ? second() : M.of(e)); }); }; };\n}\nexport function bimap(F) {\n    var mapBothF = mapBoth(F);\n    return function (f, g) { return function (self) { return mapBothF(self, f, g); }; };\n}\n/** @internal */\nexport function mapBoth(F) {\n    return function (self, f, g) { return F.map(self, E.bimap(f, g)); };\n}\nexport function mapLeft(F) {\n    var mapErrorF = mapError(F);\n    return function (f) { return function (self) { return mapErrorF(self, f); }; };\n}\n/** @internal */\nexport function mapError(F) {\n    return function (self, f) { return F.map(self, E.mapLeft(f)); };\n}\nexport function altValidation(M, S) {\n    return function (second) { return function (first) {\n        return M.chain(first, E.match(function (e1) {\n            return M.map(second(), E.mapLeft(function (e2) { return S.concat(e1, e2); }));\n        }, right(M)));\n    }; };\n}\nexport function match(F) {\n    return function (onLeft, onRight) { return function (ma) { return F.map(ma, E.match(onLeft, onRight)); }; };\n}\nexport function matchE(M) {\n    return function (onLeft, onRight) { return function (ma) { return M.chain(ma, E.match(onLeft, onRight)); }; };\n}\nexport function getOrElse(M) {\n    return function (onLeft) { return function (ma) { return M.chain(ma, E.match(onLeft, M.of)); }; };\n}\nexport function orElse(M) {\n    return function (onLeft) { return function (ma) { return M.chain(ma, function (e) { return (E.isLeft(e) ? onLeft(e.left) : M.of(e)); }); }; };\n}\nexport function orElseFirst(M) {\n    var tapErrorM = tapError(M);\n    return function (onLeft) { return function (ma) { return tapErrorM(ma, onLeft); }; };\n}\n/** @internal */\nexport function tapError(M) {\n    var orElseM = orElse(M);\n    return function (ma, onLeft) {\n        return pipe(ma, orElseM(function (e) { return M.map(onLeft(e), function (eb) { return (E.isLeft(eb) ? eb : E.left(e)); }); }));\n    };\n}\nexport function orLeft(M) {\n    return function (onLeft) { return function (ma) {\n        return M.chain(ma, E.match(function (e) { return M.map(onLeft(e), E.left); }, function (a) { return M.of(E.right(a)); }));\n    }; };\n}\nexport function swap(F) {\n    return function (ma) { return F.map(ma, E.swap); };\n}\nexport function toUnion(F) {\n    return function (fa) { return F.map(fa, E.toUnion); };\n}\n/** @deprecated  */\n/* istanbul ignore next */\nexport function getEitherM(M) {\n    var _ap = ap(M);\n    var _map = map(M);\n    var _chain = chain(M);\n    var _alt = alt(M);\n    var _bimap = bimap(M);\n    var _mapLeft = mapLeft(M);\n    var _fold = matchE(M);\n    var _getOrElse = getOrElse(M);\n    var _orElse = orElse(M);\n    return {\n        map: function (fa, f) { return pipe(fa, _map(f)); },\n        ap: function (fab, fa) { return pipe(fab, _ap(fa)); },\n        of: right(M),\n        chain: function (ma, f) { return pipe(ma, _chain(f)); },\n        alt: function (fa, that) { return pipe(fa, _alt(that)); },\n        bimap: function (fea, f, g) { return pipe(fea, _bimap(f, g)); },\n        mapLeft: function (fea, f) { return pipe(fea, _mapLeft(f)); },\n        fold: function (fa, onLeft, onRight) { return pipe(fa, _fold(onLeft, onRight)); },\n        getOrElse: function (fa, onLeft) { return pipe(fa, _getOrElse(onLeft)); },\n        orElse: function (fa, f) { return pipe(fa, _orElse(f)); },\n        swap: swap(M),\n        rightM: rightF(M),\n        leftM: leftF(M),\n        left: left(M)\n    };\n}\n", "/**\n * @since 2.11.0\n */\nimport { flow, identity } from './function';\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport var URI = 'Endomorphism';\n/**\n * Endomorphism form a `Semigroup` where the `concat` operation is the usual function composition.\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (first, second) { return flow(first, second); }\n}); };\n/**\n * Endomorphism form a `Monoid` where the `empty` value is the `identity` function.\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: identity\n}); };\n", "export {};\n", "// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * The *greatest common divisor* of two values\n *\n * @since 2.0.0\n */\nexport function gcd(E, field) {\n    var zero = field.zero;\n    var f = function (x, y) { return (E.equals(y, zero) ? x : f(y, field.mod(x, y))); };\n    return f;\n}\n/**\n * The *least common multiple* of two values\n *\n * @since 2.0.0\n */\nexport function lcm(E, F) {\n    var zero = F.zero;\n    var gcdSF = gcd(E, F);\n    return function (x, y) { return (E.equals(x, zero) || E.equals(y, zero) ? zero : F.div(F.mul(x, y), gcdSF(x, y))); };\n}\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`Field`](./number.ts.html#field) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var fieldNumber = {\n    add: function (x, y) { return x + y; },\n    zero: 0,\n    mul: function (x, y) { return x * y; },\n    one: 1,\n    sub: function (x, y) { return x - y; },\n    degree: function (_) { return 1; },\n    div: function (x, y) { return x / y; },\n    mod: function (x, y) { return x % y; }\n};\n", "/**\n * `Filterable` represents data structures which can be _partitioned_/_filtered_.\n *\n * Adapted from https://github.com/LiamGoodacre/purescript-filterable/blob/master/src/Data/Filterable.purs\n *\n * @since 2.0.0\n */\nimport { compact, separate } from './Compactable';\nimport { pipe } from './function';\nimport { getFunctorComposition } from './Functor';\nimport { getLeft, getRight } from './Option';\nimport { not } from './Predicate';\nimport { separated } from './Separated';\nexport function filter(F, G) {\n    return function (predicate) { return function (fga) { return F.map(fga, function (ga) { return G.filter(ga, predicate); }); }; };\n}\nexport function filterMap(F, G) {\n    return function (f) { return function (fga) { return F.map(fga, function (ga) { return G.filterMap(ga, f); }); }; };\n}\nexport function partition(F, G) {\n    var _filter = filter(F, G);\n    return function (predicate) {\n        var left = _filter(not(predicate));\n        var right = _filter(predicate);\n        return function (fgb) { return separated(left(fgb), right(fgb)); };\n    };\n}\nexport function partitionMap(F, G) {\n    var _filterMap = filterMap(F, G);\n    return function (f) { return function (fga) {\n        return separated(pipe(fga, _filterMap(function (a) { return getLeft(f(a)); })), pipe(fga, _filterMap(function (a) { return getRight(f(a)); })));\n    }; };\n}\n/** @deprecated */\nexport function getFilterableComposition(F, G) {\n    var map = getFunctorComposition(F, G).map;\n    var _compact = compact(F, G);\n    var _separate = separate(F, G, G);\n    var _filter = filter(F, G);\n    var _filterMap = filterMap(F, G);\n    var _partition = partition(F, G);\n    var _partitionMap = partitionMap(F, G);\n    return {\n        map: map,\n        compact: _compact,\n        separate: _separate,\n        filter: function (fga, f) { return pipe(fga, _filter(f)); },\n        filterMap: function (fga, f) { return pipe(fga, _filterMap(f)); },\n        partition: function (fga, p) { return pipe(fga, _partition(p)); },\n        partitionMap: function (fga, f) { return pipe(fga, _partitionMap(f)); }\n    };\n}\n", "export {};\n", "import { constant, pipe } from './function';\nexport function reduce(F, G) {\n    return function (b, f) { return function (fga) { return F.reduce(fga, b, function (b, ga) { return G.reduce(ga, b, f); }); }; };\n}\nexport function foldMap(F, G) {\n    return function (M) {\n        var foldMapF = F.foldMap(M);\n        var foldMapG = G.foldMap(M);\n        return function (f) { return function (fga) { return foldMapF(fga, function (ga) { return foldMapG(ga, f); }); }; };\n    };\n}\nexport function reduceRight(F, G) {\n    return function (b, f) { return function (fga) { return F.reduceRight(fga, b, function (ga, b) { return G.reduceRight(ga, b, f); }); }; };\n}\nexport function reduceM(M, F) {\n    return function (b, f) { return function (fa) { return F.reduce(fa, M.of(b), function (mb, a) { return M.chain(mb, function (b) { return f(b, a); }); }); }; };\n}\nexport function intercalate(M, F) {\n    return function (middle, fm) {\n        var go = function (_a, x) {\n            var init = _a.init, acc = _a.acc;\n            return init ? { init: false, acc: x } : { init: false, acc: M.concat(M.concat(acc, middle), x) };\n        };\n        return F.reduce(fm, { init: true, acc: M.empty }, go).acc;\n    };\n}\nexport function toReadonlyArray(F) {\n    return function (fa) {\n        return F.reduce(fa, [], function (acc, a) {\n            acc.push(a);\n            return acc;\n        });\n    };\n}\nexport function traverse_(M, F) {\n    var applyFirst = function (mu, mb) { return M.ap(M.map(mu, constant), mb); };\n    var mu = M.of(undefined);\n    return function (fa, f) { return F.reduce(fa, mu, function (mu, a) { return applyFirst(mu, f(a)); }); };\n}\nexport function foldM(M, F) {\n    return function (fa, b, f) { return F.reduce(fa, M.of(b), function (mb, a) { return M.chain(mb, function (b) { return f(b, a); }); }); };\n}\n/**\n * Use [`toReadonlyArray`](#toreadonlyarray) instead\n *\n * @category zone of death\n * @since 2.8.0\n * @deprecated\n */\nexport var toArray = toReadonlyArray;\n/** @deprecated */\nexport function getFoldableComposition(F, G) {\n    var _reduce = reduce(F, G);\n    var _foldMap = foldMap(F, G);\n    var _reduceRight = reduceRight(F, G);\n    return {\n        reduce: function (fga, b, f) { return pipe(fga, _reduce(b, f)); },\n        foldMap: function (M) {\n            var foldMapM = _foldMap(M);\n            return function (fga, f) { return pipe(fga, foldMapM(f)); };\n        },\n        reduceRight: function (fga, b, f) { return pipe(fga, _reduceRight(b, f)); }\n    };\n}\n", "/**\n * A `Foldable` with an additional index.\n * A `FoldableWithIndex` instance must be compatible with its `Foldable` instance\n *\n * ```ts\n * reduce(fa, b, f) = reduceWithIndex(fa, b, (_, b, a) => f(b, a))\n * foldMap(M)(fa, f) = foldMapWithIndex(M)(fa, (_, a) => f(a))\n * reduceRight(fa, b, f) = reduceRightWithIndex(fa, b, (_, a, b) => f(a, b))\n * ```\n *\n * @since 2.0.0\n */\nimport { getFoldableComposition } from './Foldable';\nimport { pipe } from './function';\nexport function reduceWithIndex(F, G) {\n    return function (b, f) { return function (fga) {\n        return F.reduceWithIndex(fga, b, function (i, b, ga) { return G.reduceWithIndex(ga, b, function (j, b, a) { return f([i, j], b, a); }); });\n    }; };\n}\nexport function foldMapWithIndex(F, G) {\n    return function (M) {\n        var foldMapWithIndexF = F.foldMapWithIndex(M);\n        var foldMapWithIndexG = G.foldMapWithIndex(M);\n        return function (f) { return function (fga) { return foldMapWithIndexF(fga, function (i, ga) { return foldMapWithIndexG(ga, function (j, a) { return f([i, j], a); }); }); }; };\n    };\n}\nexport function reduceRightWithIndex(F, G) {\n    return function (b, f) { return function (fga) {\n        return F.reduceRightWithIndex(fga, b, function (i, ga, b) { return G.reduceRightWithIndex(ga, b, function (j, a, b) { return f([i, j], a, b); }); });\n    }; };\n}\n/** @deprecated */\nexport function getFoldableWithIndexComposition(F, G) {\n    var FC = getFoldableComposition(F, G);\n    var _reduceWithIndex = reduceWithIndex(F, G);\n    var _foldMapWithIndex = foldMapWithIndex(F, G);\n    var _reduceRightWithIndex = reduceRightWithIndex(F, G);\n    return {\n        reduce: FC.reduce,\n        foldMap: FC.foldMap,\n        reduceRight: FC.reduceRight,\n        reduceWithIndex: function (fga, b, f) { return pipe(fga, _reduceWithIndex(b, f)); },\n        foldMapWithIndex: function (M) {\n            var foldMapWithIndexM = _foldMapWithIndex(M);\n            return function (fga, f) { return pipe(fga, foldMapWithIndexM(f)); };\n        },\n        reduceRightWithIndex: function (fga, b, f) { return pipe(fga, _reduceRightWithIndex(b, f)); }\n    };\n}\n", "/**\n * Lift a computation from the `IO` monad\n *\n * @since 2.10.0\n */\nimport { tap } from './Chain';\nimport { flow } from './function';\nexport function fromIOK(F) {\n    return function (f) { return flow(f, F.fromIO); };\n}\nexport function chainIOK(F, M) {\n    return function (f) {\n        var g = flow(f, F.fromIO);\n        return function (first) { return M.chain(first, g); };\n    };\n}\nexport function chainFirstIOK(F, M) {\n    var tapIOM = tapIO(F, M);\n    return function (f) { return function (first) { return tapIOM(first, f); }; };\n}\n/** @internal */\nexport function tapIO(F, M) {\n    var chainFirstM = tap(M);\n    return function (self, f) { return chainFirstM(self, flow(f, F.fromIO)); };\n}\n", "/**\n * Lift a computation from the `Reader` monad.\n *\n * @since 2.11.0\n */\nimport { tap } from './Chain';\nimport { flow } from './function';\nimport * as R from './Reader';\nexport function ask(F) {\n    return function () { return F.fromReader(R.ask()); };\n}\nexport function asks(F) {\n    return F.fromReader;\n}\nexport function fromReaderK(F) {\n    return function (f) { return flow(f, F.fromReader); };\n}\nexport function chainReaderK(F, M) {\n    var fromReaderKF = fromReaderK(F);\n    return function (f) { return function (ma) { return M.chain(ma, fromReaderKF(f)); }; };\n}\nexport function chainFirstReaderK(F, M) {\n    var tapM = tapReader(F, M);\n    return function (f) { return function (self) { return tapM(self, f); }; };\n}\n/** @internal */\nexport function tapReader(F, M) {\n    var tapM = tap(M);\n    return function (self, f) { return tapM(self, flow(f, F.fromReader)); };\n}\n", "/**\n * The `Reader` monad (also called the Environment monad). Represents a computation, which can read values from a shared environment,\n * pass values from function to function, and execute sub-computations in a modified environment.\n * Using `Reader` monad for such computations is often clearer and easier than using the `State` monad.\n *\n * In this example the `Reader` monad provides access to variable bindings. `Bindings` are a map of `number` variables.\n * The variable count contains number of variables in the bindings. You can see how to run a `Reader` monad and retrieve\n * data from it, how to access the `Reader` data with `ask` and `asks`.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as O from 'fp-ts/Option'\n * import * as R from 'fp-ts/Reader'\n * import * as RR from 'fp-ts/ReadonlyRecord'\n *\n * interface Bindings extends RR.ReadonlyRecord<string, number> {}\n *\n * // The Reader monad, which implements this complicated check.\n * const isCountCorrect: R.Reader<Bindings, boolean> = pipe(\n *   R.Do,\n *   R.bind('count', () => R.asks(lookupVar('count'))),\n *   R.bind('bindings', () => R.ask()),\n *   R.map(({ count, bindings }) => count === RR.size(bindings))\n * )\n *\n * // The selector function to use with 'asks'.\n * // Returns value of the variable with specified name.\n * const lookupVar = (name: string) => (bindings: Bindings): number =>\n *   pipe(\n *     bindings,\n *     RR.lookup(name),\n *     O.getOrElse(() => 0)\n *   )\n *\n * const sampleBindings: Bindings = { count: 3, a: 1, b: 2 }\n *\n * assert.deepStrictEqual(isCountCorrect(sampleBindings), true)\n *\n * @since 2.0.0\n */\nimport { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup } from './Apply';\nimport * as chainable from './Chain';\nimport * as E from './Either';\nimport { constant, dual, flow, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Reads the current context\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var ask = function () { return identity; };\n/**\n * Projects a value from the global context in a Reader\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var asks = identity;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Changes the value of the local context during the execution of the action `ma` (similar to `Contravariant`'s\n * `contramap`).\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as R from 'fp-ts/Reader'\n * import * as string from 'fp-ts/string'\n *\n * const calculateContentLen: R.Reader<string, number> = pipe(\n *   R.Do,\n *   R.bind('content', () => R.ask<string>()),\n *   R.map(({ content }) => string.size(content))\n * )\n *\n * // Calls calculateContentLen after adding a prefix to the Reader content.\n * const calculateModifiedContentLen: R.Reader<string, number> = pipe(\n *   calculateContentLen,\n *   R.local((s) => 'Prefix ' + s)\n * )\n *\n * const s = '12345'\n *\n * assert.deepStrictEqual(\n *   \"Modified 's' length: \" + calculateModifiedContentLen(s) + '\\n' + \"Original 's' length: \" + calculateContentLen(s),\n *   \"Modified 's' length: 12\\nOriginal 's' length: 5\"\n * )\n *\n * @since 2.0.0\n */\nexport var local = function (f) { return function (ma) { return function (r2) {\n    return ma(f(r2));\n}; }; };\n/**\n * Less strict version of [`asksReader`](#asksreader).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReaderW = function (f) {\n    return function (r) {\n        return f(r)(r);\n    };\n};\n/**\n * Effectfully accesses the environment.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReader = asksReaderW;\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _compose = function (bc, ab) { return pipe(bc, compose(ab)); };\nvar _promap = function (fea, f, g) { return pipe(fea, promap(f, g)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return function (r) { return f(fa(r)); }; }; };\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = function (fa) { return function (fab) { return function (r) {\n    return fab(r)(fa(r));\n}; }; };\n/**\n * @since 2.0.0\n */\nexport var ap = apW;\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = constant;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return function (r) {\n        return f(ma(r))(r);\n    };\n});\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = \n/*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * @since 2.0.0\n */\nexport var compose = function (ab) { return function (bc) { return flow(ab, bc); }; };\n/**\n * @since 2.0.0\n */\nexport var promap = function (f, g) { return function (fea) { return function (a) {\n    return g(fea(f(a)));\n}; }; };\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var id = function () { return identity; };\n/**\n * @since 2.10.0\n */\nexport var first = function (pab) {\n    return function (_a) {\n        var a = _a[0], c = _a[1];\n        return [pab(a), c];\n    };\n};\n/**\n * @since 2.10.0\n */\nexport var second = function (pbc) {\n    return function (_a) {\n        var a = _a[0], b = _a[1];\n        return [a, pbc(b)];\n    };\n};\n/**\n * @since 2.10.0\n */\nexport var left = function (pab) { return E.fold(function (a) { return _.left(pab(a)); }, E.right); };\n/**\n * @since 2.10.0\n */\nexport var right = function (pbc) { return E.fold(E.left, function (b) { return _.right(pbc(b)); }); };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Reader';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Less strict version of [`apFirst`](#apfirst).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @since 2.12.0\n */\nexport var apFirstW = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * Less strict version of [`apSecond`](#apsecond).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @since 2.12.0\n */\nexport var apSecondW = apSecond;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Profunctor = {\n    URI: URI,\n    map: _map,\n    promap: _promap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Category = {\n    URI: URI,\n    compose: _compose,\n    id: id\n};\n/**\n * @category instances\n * @since 2.8.3\n */\nexport var Strong = {\n    URI: URI,\n    map: _map,\n    promap: _promap,\n    first: first,\n    second: second\n};\n/**\n * @category instances\n * @since 2.8.3\n */\nexport var Choice = {\n    URI: URI,\n    map: _map,\n    promap: _promap,\n    left: left,\n    right: right\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        return function (r) {\n            var out = [f(0, _.head(as))(r)];\n            for (var i = 1; i < as.length; i++) {\n                out.push(f(i, as[i])(r));\n            }\n            return out;\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstW = tap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `R.Functor` instead of `R.reader`\n * (where `R` is from `import R from 'fp-ts/Reader'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var reader = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    promap: _promap,\n    compose: _compose,\n    id: id,\n    first: first,\n    second: second,\n    left: left,\n    right: right\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = /*#__PURE__*/ getApplySemigroup(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getMonoid = /*#__PURE__*/ getApplicativeMonoid(Applicative);\n", "import { flow } from './function';\nimport * as S from './State';\nexport function get(F) {\n    return function () { return F.fromState(S.get()); };\n}\nexport function put(F) {\n    return function (s) { return F.fromState(S.put(s)); };\n}\nexport function modify(F) {\n    return flow(S.modify, F.fromState);\n}\nexport function gets(F) {\n    return flow(S.gets, F.fromState);\n}\nexport function fromStateK(F) {\n    return function (f) { return flow(f, F.fromState); };\n}\nexport function chainStateK(F, M) {\n    var fromStateKF = fromStateK(F);\n    return function (f) { return function (ma) { return M.chain(ma, fromStateKF(f)); }; };\n}\n", "import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport * as chainable from './Chain';\nimport { dual, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Get the current state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var get = function () { return function (s) { return [s, s]; }; };\n/**\n * Set the state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var put = function (s) { return function () { return [undefined, s]; }; };\n/**\n * Modify the state by applying a function to the current state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var modify = function (f) { return function (s) { return [undefined, f(s)]; }; };\n/**\n * Get a value which depends on the current state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var gets = function (f) { return function (s) { return [f(s), s]; }; };\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return function (s1) {\n    var _a = fa(s1), a = _a[0], s2 = _a[1];\n    return [f(a), s2];\n}; }; };\n/**\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) { return function (s1) {\n    var _a = fab(s1), f = _a[0], s2 = _a[1];\n    var _b = fa(s2), a = _b[0], s3 = _b[1];\n    return [f(a), s3];\n}; }; };\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = function (a) { return function (s) { return [a, s]; }; };\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return function (s1) {\n        var _a = ma(s1), a = _a[0], s2 = _a[1];\n        return f(a)(s2);\n    };\n});\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'State';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromState = {\n    URI: URI,\n    fromState: identity\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Run a computation in the `State` monad, discarding the final state\n *\n * @since 2.8.0\n */\nexport var evaluate = function (s) {\n    return function (ma) {\n        return ma(s)[0];\n    };\n};\n/**\n * Run a computation in the `State` monad discarding the result\n *\n * @since 2.8.0\n */\nexport var execute = function (s) {\n    return function (ma) {\n        return ma(s)[1];\n    };\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        return function (s) {\n            var _a = f(0, _.head(as))(s), b = _a[0], s2 = _a[1];\n            var bs = [b];\n            var out = s2;\n            for (var i = 1; i < as.length; i++) {\n                var _b = f(i, as[i])(out), b_1 = _b[0], s2_1 = _b[1];\n                bs.push(b_1);\n                out = s2_1;\n            }\n            return [bs, out];\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : of(_.emptyReadonlyArray)); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`evaluate`](#evaluate) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var evalState = function (ma, s) { return ma(s)[0]; };\n/**\n * Use [`execute`](#execute) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var execState = function (ma, s) { return ma(s)[1]; };\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `S.Functor` instead of `S.state`\n * (where `S` is from `import S from 'fp-ts/State'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var state = Monad;\n", "/**\n * Lift a computation from the `Task` monad\n *\n * @since 2.10.0\n */\nimport { tap } from './Chain';\nimport { flow } from './function';\nexport function fromTaskK(F) {\n    return function (f) { return flow(f, F.fromTask); };\n}\nexport function chainTaskK(F, M) {\n    return function (f) {\n        var g = flow(f, F.fromTask);\n        return function (first) { return M.chain(first, g); };\n    };\n}\nexport function chainFirstTaskK(F, M) {\n    var tapTaskM = tapTask(F, M);\n    return function (f) { return function (first) { return tapTaskM(first, f); }; };\n}\n/** @internal */\nexport function tapTask(F, M) {\n    var tapM = tap(M);\n    return function (self, f) { return tapM(self, flow(f, F.fromTask)); };\n}\n", "/**\n * The `FromThese` type class represents those data types which support errors and warnings.\n *\n * @since 2.11.0\n */\nimport { flow } from './function';\nexport function fromTheseK(F) {\n    return function (f) { return flow(f, F.fromThese); };\n}\n", "/**\n * A `FunctorWithIndex` is a type constructor which supports a mapping operation `mapWithIndex`.\n *\n * `mapWithIndex` can be used to turn functions `i -> a -> b` into functions `f a -> f b` whose argument and return types use the type\n * constructor `f` to represent some computational context.\n *\n * Instances must satisfy the following laws:\n *\n * 1. Identity: `F.mapWithIndex(fa, (_i, a) => a) <-> fa`\n * 2. Composition: `F.mapWithIndex(fa, (_i, a) => bc(ab(a))) <-> F.mapWithIndex(F.mapWithIndex(fa, ab), bc)`\n *\n * @since 2.0.0\n */\nimport { pipe } from './function';\nimport { getFunctorComposition } from './Functor';\nexport function mapWithIndex(F, G) {\n    return function (f) { return function (fa) { return F.mapWithIndex(fa, function (i, ga) { return G.mapWithIndex(ga, function (j, a) { return f([i, j], a); }); }); }; };\n}\n/** @deprecated */\nexport function getFunctorWithIndexComposition(F, G) {\n    var map = getFunctorComposition(F, G).map;\n    var _mapWithIndex = mapWithIndex(F, G);\n    return {\n        map: map,\n        mapWithIndex: function (fga, f) { return pipe(fga, _mapWithIndex(f)); }\n    };\n}\n", "export {};\n", "export {};\n", "/**\n * Type defunctionalization (as describe in [Lightweight higher-kinded polymorphism](https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf))\n *\n * @since 2.0.0\n */\nexport {};\n", "import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, tap as tap_ } from './Chain';\nimport { tailRec } from './ChainRec';\nimport { dual, identity as id, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) { return function (fa, f) { return pipe(fa, foldMap(M)(f)); }; };\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\nvar _chainRec = tailRec;\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return f(fa); }; };\n/**\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) { return fab(fa); }; };\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = id;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) { return f(ma); });\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) { return f(wa); }; };\n/**\n * @category Extract\n * @since 2.6.2\n */\nexport var extract = id;\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(id);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(id);\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) { return f(b, fa); }; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = function () { return function (f) { return function (fa) { return f(fa); }; }; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) { return f(fa, b); }; };\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    return function (f) {\n        return function (ta) {\n            return F.map(f(ta), id);\n        };\n    };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ta) {\n        return F.map(ta, id);\n    };\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function () { return id; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Identity';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = id;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = id;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.7\n */\nexport var tap = /*#__PURE__*/ dual(2, tap_(Chain));\n/**\n * Alias of `tap`\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap,\n    chainRec: _chainRec\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `I.Functor` instead of `I.identity`\n * (where `I` is from `import I from 'fp-ts/Identity'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var identity = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    alt: _alt,\n    extract: extract,\n    extend: _extend,\n    chainRec: _chainRec\n};\n", "export {};\n", "/**\n * ```ts\n * interface IO<A> {\n *   (): A\n * }\n * ```\n *\n * `IO<A>` represents a non-deterministic synchronous computation that can cause side effects, yields a value of\n * type `A` and **never fails**.\n *\n * If you want to represent a synchronous computation that may fail, please see `IOEither`.\n * If you want to represent a synchronous computation that may yield nothing, please see `IOOption`.\n *\n * @since 2.0.0\n */\nimport { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup } from './Apply';\nimport * as chainable from './Chain';\nimport { constant, dual, identity } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nvar _map = function (ma, f) { return function () { return f(ma()); }; };\nvar _ap = function (mab, ma) { return function () { return mab()(ma()); }; };\nvar _chainRec = function (a, f) { return function () {\n    var e = f(a)();\n    while (e._tag === 'Left') {\n        e = f(e.left)();\n    }\n    return e.right;\n}; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return _map(fa, f); }; };\n/**\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) { return _ap(fab, fa); }; };\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = constant;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return function () {\n        return f(ma())();\n    };\n});\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'IO';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the value to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the value to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var fromIO = identity;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap,\n    chainRec: _chainRec\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: identity\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        return function () {\n            var out = [f(0, _.head(as))()];\n            for (var i = 1; i < as.length; i++) {\n                out.push(f(i, as[i])());\n            }\n            return out;\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `IO.Functor` instead of `IO.io`\n * (where `IO` is from `import IO from 'fp-ts/IO'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var io = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    fromIO: fromIO,\n    chainRec: _chainRec\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = /*#__PURE__*/ getApplySemigroup(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getMonoid = /*#__PURE__*/ getApplicativeMonoid(Applicative);\n", "import { getApplicativeMonoid } from './Applicative';\nimport { ap as ap_, apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { compact as compact_, separate as separate_ } from './Compactable';\nimport * as E from './Either';\nimport * as ET from './EitherT';\nimport { filter as filter_, filterMap as filterMap_, partition as partition_, partitionMap as partitionMap_ } from './Filterable';\nimport { chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromEitherK as fromEitherK_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_, tapEither as tapEither_ } from './FromEither';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as I from './IO';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var left = /*#__PURE__*/ ET.left(I.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var right = /*#__PURE__*/ ET.right(I.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightIO = /*#__PURE__*/ ET.rightF(I.Functor);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftIO = /*#__PURE__*/ ET.leftF(I.Functor);\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = I.of;\n/**\n * @category conversions\n * @since 2.7.0\n */\nexport var fromIO = rightIO;\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = \n/*#__PURE__*/ ET.match(I.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = match;\n/**\n * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`IO`).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchE = \n/*#__PURE__*/ ET.matchE(I.Monad);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchEW = matchE;\n/**\n * Alias of [`matchEW`](#matchew).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchEW;\n/**\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = /*#__PURE__*/ ET.getOrElse(I.Monad);\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = getOrElse;\n/**\n * Constructs a new `IOEither` from a function that performs a side effect and might throw\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f, onThrow) {\n    return function () {\n        return E.tryCatch(f, onThrow);\n    };\n};\n/**\n * Converts a function that may throw to one returning a `IOEither`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f, onThrow) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return tryCatch(function () { return f.apply(void 0, a); }, onThrow);\n    };\n};\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var toUnion = /*#__PURE__*/ ET.toUnion(I.Functor);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category error handling\n * @since 2.0.0\n */\nexport var orElse = \n/*#__PURE__*/ ET.orElse(I.Monad);\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var orElseW = orElse;\n/**\n * Returns an effect that effectfully \"peeks\" at the failure of this effect.\n *\n * @category error handling\n * @since 2.15.0\n */\nexport var tapError = /*#__PURE__*/ dual(2, ET.tapError(I.Monad));\n/**\n * @category error handling\n * @since 2.12.0\n */\nexport var orElseFirstIOK = function (onLeft) {\n    return tapError(fromIOK(onLeft));\n};\n/**\n * @category error handling\n * @since 2.11.0\n */\nexport var orLeft = \n/*#__PURE__*/ ET.orLeft(I.Monad);\n/**\n * @since 2.0.0\n */\nexport var swap = /*#__PURE__*/ ET.swap(I.Functor);\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _apSeq = function (fab, fa) { return flatMap(fab, function (f) { return pipe(fa, map(f)); }); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = /*#__PURE__*/ ET.map(I.Functor);\n/**\n * Returns a `IOEither` whose failure and success channels have been mapped by the specified pair of functions, `f` and `g`.\n *\n * @example\n * import * as IOEither from 'fp-ts/IOEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n * const g = (n: number) => n * 2\n *\n * assert.deepStrictEqual(IOEither.mapBoth(IOEither.right(1), f, g)(), Either.right(2))\n * assert.deepStrictEqual(IOEither.mapBoth(IOEither.left('err'), f, g)(), Either.left(new Error('err')))\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapBoth = /*#__PURE__*/ dual(3, ET.mapBoth(I.Functor));\n/**\n * Alias of `mapBoth`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var bimap = mapBoth;\n/**\n * Returns a `IOEither` with its error channel mapped using the specified function.\n *\n * @example\n * import * as IOEither from 'fp-ts/IOEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n *\n * assert.deepStrictEqual(IOEither.mapError(IOEither.right(1), f)(), Either.right(1))\n * assert.deepStrictEqual(IOEither.mapError(IOEither.left('err'), f)(), Either.left(new Error('err')))\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapError = /*#__PURE__*/ dual(2, ET.mapError(I.Functor));\n/**\n * Alias of `mapError`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var mapLeft = mapError;\n/**\n * @since 2.0.0\n */\nexport var ap = \n/*#__PURE__*/ ET.ap(I.Apply);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = ap;\n/**\n * @category constructors\n * @since 2.8.5\n */\nexport var of = right;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, ET.flatMap(I.Monad));\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = \n/*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = \n/*#__PURE__*/ ET.alt(I.Monad);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the error and the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = alt;\n/**\n * @since 2.7.0\n */\nexport var throwError = left;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'IOEither';\n/**\n * The default [`ApplicativePar`](#applicativepar) instance returns the first error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * See [`getApplicativeValidation`](./Either.ts.html#getapplicativevalidation).\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getApplicativeIOValidation(S) {\n    var ap = ap_(I.Apply, E.getApplicativeValidation(S));\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return pipe(fab, ap(fa)); },\n        of: of\n    };\n}\n/**\n * The default [`Alt`](#alt) instance returns the last error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * See [`getAltValidation`](./Either.ts.html#getaltvalidation).\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getAltIOValidation(S) {\n    var alt = ET.altValidation(I.Monad, S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        alt: function (fa, that) { return pipe(fa, alt(that)); }\n    };\n}\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var C = E.getCompactable(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: compact_(I.Functor, C),\n        separate: separate_(I.Functor, C, E.Functor)\n    };\n};\n/**\n * @category filtering\n * @since 2.1.0\n */\nexport function getFilterable(M) {\n    var F = E.getFilterable(M);\n    var C = getCompactable(M);\n    var filter = filter_(I.Functor, F);\n    var filterMap = filterMap_(I.Functor, F);\n    var partition = partition_(I.Functor, F);\n    var partitionMap = partitionMap_(I.Functor, F);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: C.compact,\n        separate: C.separate,\n        filter: function (fa, predicate) { return pipe(fa, filter(predicate)); },\n        filterMap: function (fa, f) { return pipe(fa, filterMap(f)); },\n        partition: function (fa, predicate) { return pipe(fa, partition(predicate)); },\n        partitionMap: function (fa, f) { return pipe(fa, partitionMap(f)); }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Right` value of this `IOEither` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Right` value of this `IOEither` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError\n};\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(ApplyPar);\n/**\n * Less strict version of [`apFirst`](#apfirst).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apFirstW = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(ApplyPar);\n/**\n * Less strict version of [`apSecond`](#apsecond).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apSecondW = apSecond;\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.8.4\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.8.4\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as IOE from 'fp-ts/IOEither'\n * import * as E from 'fp-ts/Either'\n *\n * const compute = (value: string) => pipe(\n *   IOE.of(value),\n *   IOE.tapEither(() => value.length > 0 ? E.right('ok') : E.left('error')),\n * )\n *\n * assert.deepStrictEqual(compute('')(), E.left('error'))\n * assert.deepStrictEqual(compute('fp-ts')(), E.right('fp-ts'))\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as IOE from 'fp-ts/IOEither'\n * import * as E from 'fp-ts/Either'\n * import * as Console from 'fp-ts/Console'\n *\n * const sayHello = (value: string) => Console.log(`Hello, ${value}`)\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effectA = IOE.tapIO(IOE.of('fp-ts'), sayHello)\n *\n * // No output to the stdout\n * const effectB = pipe(IOE.left<string>('error'), IOE.tapIO(sayHello))\n *\n * assert.deepStrictEqual(effectA(), E.right('fp-ts'))\n * assert.deepStrictEqual(effectB(), E.left('error'))\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    throwError: throwError\n};\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromIOK = /*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromOption = \n/*#__PURE__*/ fromOption_(FromEither);\n/**\n * Use `liftOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var fromOptionK = \n/*#__PURE__*/ fromOptionK_(FromEither);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainOptionK = /*#__PURE__*/ chainOptionK_(FromEither, Chain);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.13.2\n */\nexport var chainOptionKW = chainOptionK;\n/** @internal */\nvar _FromEither = {\n    fromEither: FromEither.fromEither\n};\n/** @internal */\nvar _FromIO = {\n    fromIO: fromIO\n};\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftNullable = /*#__PURE__*/ _.liftNullable(_FromEither);\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftOption = /*#__PURE__*/ _.liftOption(_FromEither);\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapNullable = /*#__PURE__*/ _.flatMapNullable(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapOption = /*#__PURE__*/ _.flatMapOption(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapEither = /*#__PURE__*/ _.flatMapEither(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = /*#__PURE__*/ _.flatMapIO(_FromIO, _FlatMap);\n/**\n * Alias of `flatMapIO`.\n * @category legacy\n * @since 2.10.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainEitherK = flatMapEither;\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainEitherKW = flatMapEither;\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * Alias of `tapEither`.\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherKW = tapEither;\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterOrElse = /*#__PURE__*/ filterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category filtering\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Make sure that a resource is cleaned up in the event of an exception (\\*). The release action is called regardless of\n * whether the body action throws (\\*) or returns.\n *\n * (\\*) i.e. returns a `Left`\n *\n * @since 2.0.0\n */\nexport var bracket = function (acquire, use, release) { return bracketW(acquire, use, release); };\n/**\n * Less strict version of [`bracket`](#bracket).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var bracketW = function (acquire, use, release) {\n    return flatMap(acquire, function (a) { return I.flatMap(use(a), function (e) { return flatMap(release(a, e), function () { return I.of(e); }); }); });\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(ApplyPar);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(I.traverseReadonlyNonEmptyArrayWithIndex(f), I.map(E.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {\n    return function (as) {\n        return function () {\n            var e = f(0, _.head(as))();\n            if (_.isLeft(e)) {\n                return e;\n            }\n            var out = [e.right];\n            for (var i = 1; i < as.length; i++) {\n                var e_1 = f(i, as[i])();\n                if (_.isLeft(e_1)) {\n                    return e_1;\n                }\n                out.push(e_1.right);\n            }\n            return _.right(out);\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArray = function (f) { return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceSeqArray = \n/*#__PURE__*/ traverseSeqArray(identity);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`ApplicativePar`](#applicativepar) instead\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Applicative = ApplicativePar;\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.8.0\n */\nexport var chainFirstW = tap;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirst = tapError;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirstW = tapError;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `IOE.Functor` instead of `IOE.ioEither`\n * (where `IOE` is from `import IOE from 'fp-ts/IOEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var ioEither = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    alt: _alt,\n    fromIO: fromIO,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/ getApplySemigroup_(ApplyPar);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/ getApplicativeMonoid(ApplicativePar);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = function (S) {\n    return getApplySemigroup_(I.Apply)(E.getSemigroup(S));\n};\n/**\n * Use [`getApplicativeIOValidation`](#getapplicativeiovalidation) and [`getAltIOValidation`](#getaltiovalidation).\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function getIOValidation(SE) {\n    var applicativeIOValidation = getApplicativeIOValidation(SE);\n    var altIOValidation = getAltIOValidation(SE);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: applicativeIOValidation.ap,\n        of: of,\n        chain: flatMap,\n        bimap: mapBoth,\n        mapLeft: mapError,\n        alt: altIOValidation.alt,\n        fromIO: fromIO,\n        throwError: throwError\n    };\n}\n", "import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport * as chainable from './Chain';\nimport { compact as compact_, separate as separate_ } from './Compactable';\nimport { filter as filter_, filterMap as filterMap_, partition as partition_, partitionMap as partitionMap_ } from './Filterable';\nimport { fromEitherK as fromEitherK_, tapEither as tapEither_ } from './FromEither';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as I from './IO';\nimport * as O from './Option';\nimport * as OT from './OptionT';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.12.0\n */\nexport var some = /*#__PURE__*/ OT.some(I.Pointed);\n/**\n * @category lifting\n * @since 2.12.0\n */\nexport var fromPredicate = /*#__PURE__*/ OT.fromPredicate(I.Pointed);\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var fromOption = I.of;\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var fromEither = /*#__PURE__*/ OT.fromEither(I.Pointed);\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var fromIO = /*#__PURE__*/ OT.fromF(I.Functor);\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var fromIOEither = /*#__PURE__*/ I.map(O.fromEither);\n/**\n * @category pattern matching\n * @since 2.12.0\n */\nexport var match = /*#__PURE__*/ OT.match(I.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.12.0\n */\nexport var matchW = match;\n/**\n * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`IO`).\n *\n * @category pattern matching\n * @since 2.12.0\n */\nexport var matchE = \n/*#__PURE__*/ OT.matchE(I.Chain);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category pattern matching\n * @since 2.12.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.12.0\n */\nexport var matchEW = matchE;\n/**\n * @category error handling\n * @since 2.12.0\n */\nexport var getOrElse = /*#__PURE__*/ OT.getOrElse(I.Monad);\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.12.0\n */\nexport var getOrElseW = getOrElse;\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var toUndefined = I.map(O.toUndefined);\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var toNullable = I.map(O.toNullable);\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var fromNullable = /*#__PURE__*/ OT.fromNullable(I.Pointed);\n/**\n * @category lifting\n * @since 2.12.0\n */\nexport var fromNullableK = /*#__PURE__*/ OT.fromNullableK(I.Pointed);\n/**\n * Alias of `flatMapNullable`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainNullableK = /*#__PURE__*/ OT.chainNullableK(I.Monad);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category lifting\n * @since 2.12.0\n */\nexport var fromOptionK = \n/*#__PURE__*/ OT.fromOptionK(I.Pointed);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.12.0\n */\nexport var map = /*#__PURE__*/ OT.map(I.Functor);\n/**\n * @since 2.12.0\n */\nexport var ap = /*#__PURE__*/ OT.ap(I.Apply);\n/**\n * @category constructors\n * @since 2.12.0\n */\nexport var of = some;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, OT.flatMap(I.Monad));\n/**\n * @category sequencing\n * @since 2.12.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * @category error handling\n * @since 2.12.0\n */\nexport var alt = /*#__PURE__*/ OT.alt(I.Monad);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.12.0\n */\nexport var altW = alt;\n/**\n * @since 2.12.0\n */\nexport var zero = /*#__PURE__*/ OT.zero(I.Pointed);\n/**\n * @category constructors\n * @since 2.12.0\n */\nexport var none = /*#__PURE__*/ zero();\n/**\n * @category filtering\n * @since 2.12.0\n */\nexport var compact = /*#__PURE__*/ compact_(I.Functor, O.Compactable);\n/**\n * @category filtering\n * @since 2.12.0\n */\nexport var separate = /*#__PURE__*/ separate_(I.Functor, O.Compactable, O.Functor);\n/**\n * @category filtering\n * @since 2.12.0\n */\nexport var filter = /*#__PURE__*/ filter_(I.Functor, O.Filterable);\n/**\n * @category filtering\n * @since 2.12.0\n */\nexport var filterMap = /*#__PURE__*/ filterMap_(I.Functor, O.Filterable);\n/**\n * @category filtering\n * @since 2.12.0\n */\nexport var partition = /*#__PURE__*/ partition_(I.Functor, O.Filterable);\n/**\n * @category filtering\n * @since 2.12.0\n */\nexport var partitionMap = /*#__PURE__*/ partitionMap_(I.Functor, O.Filterable);\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _filter = function (fa, predicate) { return pipe(fa, filter(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/**\n * @category type lambdas\n * @since 2.12.0\n */\nexport var URI = 'IOOption';\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Some` value of this `IOOption` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Some` value of this `IOOption` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.12.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.12.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.12.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as IOO from 'fp-ts/IOOption'\n * import * as O from 'fp-ts/Option'\n * import * as E from 'fp-ts/Either'\n *\n * const compute = (value: number) => pipe(\n *   IOO.of(value),\n *   IOO.tapEither((value) => value > 0 ? E.right('ok') : E.left('error')),\n * )\n *\n * assert.deepStrictEqual(compute(1)(), O.of(1))\n * assert.deepStrictEqual(compute(-1)(), O.none)\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as IOO from 'fp-ts/IOOption'\n * import * as O from 'fp-ts/Option'\n * import * as Console from 'fp-ts/Console'\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effectA = pipe(\n *   IOO.of('fp-ts'),\n *   IOO.tapIO((value) => Console.log(`Hello, ${value}`)),\n * )\n *\n * // No output to the stdout\n * const effectB = pipe(\n *   IOO.none as IOO.IOOption<string>,\n *   IOO.tapIO((value) => Console.log(`Hello, ${value}`)),\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(effectA(), O.of('fp-ts'))\n *   assert.deepStrictEqual(effectB(), O.none)\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category do notation\n * @since 2.12.0\n */\nexport var guard = /*#__PURE__*/ guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.12.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/** @internal */\nvar _FromIO = {\n    fromIO: FromIO.fromIO\n};\n/** @internal */\nvar _FromEither = {\n    fromEither: fromEither\n};\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = _.flatMapIO(_FromIO, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapOption = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, fromOptionK(f)); });\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapEither = /*#__PURE__*/ _.flatMapEither(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapNullable = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, fromNullableK(f)); });\n/**\n * @category lifting\n * @since 2.12.0\n */\nexport var fromIOK = \n/*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * @category lifting\n * @since 2.12.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainEitherK = flatMapEither;\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * Alias of `flatMapOption`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainOptionK = flatMapOption;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.12.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.12.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.12.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * @category do notation\n * @since 2.12.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * @since 2.12.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.12.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(I.traverseReadonlyNonEmptyArrayWithIndex(f), I.map(O.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.12.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirst = tap;\n", "import { ap as ap_ } from './Apply';\nimport { constant, flow, pipe } from './function';\nimport { map as map_ } from './Functor';\nimport * as O from './Option';\nexport function some(F) {\n    return flow(O.some, F.of);\n}\nexport function zero(F) {\n    return constant(F.of(O.none));\n}\nexport function fromF(F) {\n    return function (ma) { return F.map(ma, O.some); };\n}\nexport function fromNullable(F) {\n    return flow(O.fromNullable, F.of);\n}\nexport function fromNullableK(F) {\n    var fromNullableF = fromNullable(F);\n    return function (f) { return flow(f, fromNullableF); };\n}\nexport function chainNullableK(M) {\n    var chainM = chain(M);\n    var fromNullableKM = fromNullableK(M);\n    return function (f) { return chainM(fromNullableKM(f)); };\n}\nexport function fromOptionK(F) {\n    return function (f) { return flow(f, F.of); };\n}\nexport function chainOptionK(M) {\n    var chainM = chain(M);\n    var fromOptionKM = fromOptionK(M);\n    return function (f) { return chainM(fromOptionKM(f)); };\n}\nexport function fromPredicate(F) {\n    return function (predicate) {\n        return function (a) {\n            return F.of(O.fromPredicate(predicate)(a));\n        };\n    };\n}\nexport function fromEither(F) {\n    return flow(O.fromEither, F.of);\n}\nexport function match(F) {\n    return function (onNone, onSome) { return function (ma) { return F.map(ma, O.match(onNone, onSome)); }; };\n}\nexport function matchE(M) {\n    return function (onNone, onSome) { return function (ma) { return M.chain(ma, O.match(onNone, onSome)); }; };\n}\nexport function getOrElse(M) {\n    return function (onNone) { return function (fa) { return M.chain(fa, O.match(onNone, M.of)); }; };\n}\nexport function map(F) {\n    return map_(F, O.Functor);\n}\nexport function ap(F) {\n    return ap_(F, O.Apply);\n}\nexport function chain(M) {\n    var flatMapM = flatMap(M);\n    return function (f) { return function (ma) { return flatMapM(ma, f); }; };\n}\n/** @internal */\nexport function flatMap(M) {\n    var zeroM = zero(M);\n    return function (ma, f) {\n        return M.chain(ma, O.match(function () { return zeroM(); }, f));\n    };\n}\nexport function alt(M) {\n    var _some = some(M);\n    return function (second) { return function (first) { return M.chain(first, O.match(second, _some)); }; };\n}\n/** @deprecated */\nexport function getOptionM(M) {\n    var apM = ap(M);\n    var mapM = map(M);\n    var chainM = chain(M);\n    var altM = alt(M);\n    var foldM = matchE(M);\n    var getOrElseM = getOrElse(M);\n    var zeroM = zero(M);\n    return {\n        map: function (fa, f) { return pipe(fa, mapM(f)); },\n        ap: function (fab, fa) { return pipe(fab, apM(fa)); },\n        of: some(M),\n        chain: function (ma, f) { return pipe(ma, chainM(f)); },\n        alt: function (fa, that) { return pipe(fa, altM(that)); },\n        fold: function (fa, onNone, onSome) { return pipe(fa, foldM(onNone, onSome)); },\n        getOrElse: function (fa, onNone) { return pipe(fa, getOrElseM(onNone)); },\n        fromM: fromF(M),\n        none: function () { return zeroM(); }\n    };\n}\n", "/**\n * @example\n * import { flatMap } from 'fp-ts/IO'\n * import { newIORef } from 'fp-ts/IORef'\n *\n * assert.strictEqual(flatMap(newIORef(1), ref => flatMap(ref.write(2), () => ref.read))(), 2)\n *\n * @category model\n * @since 2.0.0\n */\nvar IORef = /** @class */ (function () {\n    function IORef(value) {\n        var _this = this;\n        this.value = value;\n        this.read = function () { return _this.value; };\n        this.write = this.write.bind(this);\n        this.modify = this.modify.bind(this);\n    }\n    /**\n     * @since 2.0.0\n     */\n    IORef.prototype.write = function (a) {\n        var _this = this;\n        return function () {\n            _this.value = a;\n        };\n    };\n    /**\n     * @since 2.0.0\n     */\n    IORef.prototype.modify = function (f) {\n        var _this = this;\n        return function () {\n            _this.value = f(_this.value);\n        };\n    };\n    return IORef;\n}());\nexport { IORef };\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function newIORef(a) {\n    return function () { return new IORef(a); };\n}\n", "/**\n * A join-semilattice (or upper semilattice) is a semilattice whose operation is called `join`, and which can be thought\n * of as a least upper bound.\n *\n * A `JoinSemilattice` must satisfy the following laws:\n *\n * - Associativity: `a ∨ (b ∨ c) <-> (a ∨ b) ∨ c`\n * - Commutativity: `a ∨ b <-> b ∨ a`\n * - Idempotency:   `a ∨ a <-> a`\n *\n * @since 2.0.0\n */\nexport {};\n", "/**\n * @since 2.10.0\n */\nimport { tryCatch } from './Either';\nimport { identity } from './function';\n/**\n * Converts a JavaScript Object Notation (JSON) string into a `Json` type.\n *\n * @example\n * import * as J from 'fp-ts/Json'\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('{\"a\":1}', J.parse), E.right({ a: 1 }))\n * assert.deepStrictEqual(pipe('{\"a\":}', J.parse), E.left(new SyntaxError(`Unexpected token '}', \"{\"a\":}\" is not valid JSON`)))\n *\n * @since 2.10.0\n */\nexport var parse = function (s) { return tryCatch(function () { return JSON.parse(s); }, identity); };\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import * as J from 'fp-ts/Json'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(J.stringify({ a: 1 }), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     J.stringify(circular),\n *     E.mapLeft(e => e instanceof Error && e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n *  @since 2.10.0\n */\nexport var stringify = function (a) {\n    return tryCatch(function () {\n        var s = JSON.stringify(a);\n        if (typeof s !== 'string') {\n            throw new Error('Converting unsupported structure to JSON');\n        }\n        return s;\n    }, identity);\n};\n", "export {};\n", "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { pipe } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as O from './Option';\nimport * as RM from './ReadonlyMap';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RM.getShow;\n/**\n * Calculate the number of key/value pairs in a map\n *\n * @since 2.0.0\n */\nexport var size = RM.size;\n/**\n * Test whether or not a map is empty\n *\n * @since 2.0.0\n */\nexport var isEmpty = RM.isEmpty;\n// TODO: remove non-curried overloading in v3\n/**\n * Test whether or not a key exists in a map\n *\n * @since 2.0.0\n */\nexport var member = RM.member;\n// TODO: remove non-curried overloading in v3\n/**\n * Test whether or not a value is a member of a map\n *\n * @since 2.0.0\n */\nexport var elem = RM.elem;\n/**\n * Get a sorted `Array` of the keys contained in a `Map`.\n *\n * @since 2.0.0\n */\nexport var keys = function (O) {\n    return function (m) {\n        return Array.from(m.keys()).sort(O.compare);\n    };\n};\n/**\n * Get a sorted `Array` of the values contained in a `Map`.\n *\n * @since 2.0.0\n */\nexport var values = function (O) {\n    return function (m) {\n        return Array.from(m.values()).sort(O.compare);\n    };\n};\n/**\n * @since 2.0.0\n */\nexport function collect(O) {\n    var keysO = keys(O);\n    return function (f) {\n        return function (m) {\n            var out = [];\n            var ks = keysO(m);\n            for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n                var key = ks_1[_i];\n                out.push(f(key, m.get(key)));\n            }\n            return out;\n        };\n    };\n}\n/**\n * Get a sorted `Array` of the key/value pairs contained in a `Map`.\n *\n * @since 2.0.0\n */\nexport function toArray(O) {\n    return collect(O)(function (k, a) { return [k, a]; });\n}\nexport function toUnfoldable(ord, U) {\n    var toArrayO = toArray(ord);\n    return function (d) {\n        var kas = toArrayO(d);\n        var len = kas.length;\n        return U.unfold(0, function (b) { return (b < len ? _.some([kas[b], b + 1]) : _.none); });\n    };\n}\n/**\n * Insert or replace a key/value pair in a `Map`.\n *\n * @since 2.0.0\n */\nexport var upsertAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k, a) {\n        var lookupWithKeyEk = lookupWithKeyE(k);\n        return function (m) {\n            var found = lookupWithKeyEk(m);\n            if (_.isNone(found)) {\n                var out = new Map(m);\n                out.set(k, a);\n                return out;\n            }\n            else if (found.value[1] !== a) {\n                var out = new Map(m);\n                out.set(found.value[0], a);\n                return out;\n            }\n            return m;\n        };\n    };\n};\n/**\n * Delete a key and value from a map\n *\n * @since 2.0.0\n */\nexport var deleteAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k) { return function (m) {\n        var found = lookupWithKeyE(k, m);\n        if (_.isSome(found)) {\n            var r = new Map(m);\n            r.delete(found.value[0]);\n            return r;\n        }\n        return m;\n    }; };\n};\n/**\n * @since 2.0.0\n */\nexport var updateAt = function (E) {\n    var modifyAtE = modifyAt(E);\n    return function (k, a) { return modifyAtE(k, function () { return a; }); };\n};\n/**\n * @since 2.0.0\n */\nexport var modifyAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k, f) { return function (m) {\n        var found = lookupWithKeyE(k, m);\n        if (_.isNone(found)) {\n            return _.none;\n        }\n        var r = new Map(m);\n        r.set(found.value[0], f(found.value[1]));\n        return _.some(r);\n    }; };\n};\n/**\n * Delete a key and value from a map, returning the value as well as the subsequent map\n *\n * @since 2.0.0\n */\nexport function pop(E) {\n    var lookupE = lookup(E);\n    var deleteAtE = deleteAt(E);\n    return function (k) {\n        var deleteAtEk = deleteAtE(k);\n        return function (m) {\n            return pipe(lookupE(k, m), O.map(function (a) { return [a, deleteAtEk(m)]; }));\n        };\n    };\n}\nexport function lookupWithKey(E) {\n    return function (k, m) {\n        if (m === undefined) {\n            var lookupWithKeyE_1 = lookupWithKey(E);\n            return function (m) { return lookupWithKeyE_1(k, m); };\n        }\n        var entries = m.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, ka = _a[0], a = _a[1];\n            if (E.equals(ka, k)) {\n                return _.some([ka, a]);\n            }\n        }\n        return _.none;\n    };\n}\n// TODO: remove non-curried overloading in v3\n/**\n * Lookup the value for a key in a `Map`.\n *\n * @since 2.0.0\n */\nexport var lookup = RM.lookup;\n// TODO: remove non-curried overloading in v3\n/**\n * Test whether or not one `Map` contains all of the keys and values contained in another `Map`\n *\n * @since 2.0.0\n */\nexport var isSubmap = RM.isSubmap;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RM.getEq;\n/**\n * Gets `Monoid` instance for Maps given `Semigroup` instance for their values\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getMonoid(SK, SA) {\n    var lookupWithKeyS = lookupWithKey(SK);\n    return {\n        concat: function (mx, my) {\n            if (isEmpty(mx)) {\n                return my;\n            }\n            if (isEmpty(my)) {\n                return mx;\n            }\n            var r = new Map(mx);\n            var entries = my.entries();\n            var e;\n            while (!(e = entries.next()).done) {\n                var _a = e.value, k = _a[0], a = _a[1];\n                var mxOptA = lookupWithKeyS(k, mx);\n                if (_.isSome(mxOptA)) {\n                    r.set(mxOptA.value[0], SA.concat(mxOptA.value[1], a));\n                }\n                else {\n                    r.set(k, a);\n                }\n            }\n            return r;\n        },\n        empty: new Map()\n    };\n}\n/**\n * Create a map with one key/value pair\n *\n * @since 2.0.0\n */\nexport var singleton = function (k, a) { return new Map([[k, a]]); };\nexport function fromFoldable(E, M, F) {\n    return function (fka) {\n        var lookupWithKeyE = lookupWithKey(E);\n        return F.reduce(fka, new Map(), function (b, _a) {\n            var k = _a[0], a = _a[1];\n            var bOpt = lookupWithKeyE(k, b);\n            if (_.isSome(bOpt)) {\n                b.set(bOpt.value[0], M.concat(bOpt.value[1], a));\n            }\n            else {\n                b.set(k, a);\n            }\n            return b;\n        });\n    };\n}\nvar _mapWithIndex = function (fa, f) {\n    var m = new Map();\n    var entries = fa.entries();\n    var e;\n    while (!(e = entries.next()).done) {\n        var _a = e.value, key = _a[0], a = _a[1];\n        m.set(key, f(key, a));\n    }\n    return m;\n};\n/**\n * @since 2.10.0\n */\nexport var partitionMapWithIndex = function (f) {\n    return function (fa) {\n        var left = new Map();\n        var right = new Map();\n        var entries = fa.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            var ei = f(k, a);\n            if (_.isLeft(ei)) {\n                left.set(k, ei.left);\n            }\n            else {\n                right.set(k, ei.right);\n            }\n        }\n        return separated(left, right);\n    };\n};\nexport function partitionWithIndex(predicateWithIndex) {\n    return function (fa) {\n        var left = new Map();\n        var right = new Map();\n        var entries = fa.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            if (predicateWithIndex(k, a)) {\n                right.set(k, a);\n            }\n            else {\n                left.set(k, a);\n            }\n        }\n        return separated(left, right);\n    };\n}\n/**\n * @since 2.10.0\n */\nexport var filterMapWithIndex = function (f) {\n    return function (fa) {\n        var m = new Map();\n        var entries = fa.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            var o = f(k, a);\n            if (_.isSome(o)) {\n                m.set(k, o.value);\n            }\n        }\n        return m;\n    };\n};\nexport function filterWithIndex(p) {\n    return function (m) {\n        var out = new Map();\n        var entries = m.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            if (p(k, a)) {\n                out.set(k, a);\n            }\n        }\n        return out;\n    };\n}\nvar _map = function (fa, f) { return _mapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _filter = function (fa, p) {\n    return _filterWithIndex(fa, function (_, a) { return p(a); });\n};\nvar _filterMap = function (fa, f) { return _filterMapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _partition = function (fa, predicate) {\n    return _partitionWithIndex(fa, function (_, a) { return predicate(a); });\n};\nvar _partitionMap = function (fa, f) { return _partitionMapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _filterWithIndex = function (fa, p) { return pipe(fa, filterWithIndex(p)); };\nvar _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\nvar _partitionWithIndex = function (fa, p) { return pipe(fa, partitionWithIndex(p)); };\nvar _partitionMapWithIndex = function (fa, f) {\n    return pipe(fa, partitionMapWithIndex(f));\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = function (fa) {\n    var m = new Map();\n    var entries = fa.entries();\n    var e;\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], oa = _a[1];\n        if (_.isSome(oa)) {\n            m.set(k, oa.value);\n        }\n    }\n    return m;\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = function (predicate) {\n    return function (fa) {\n        return _filter(fa, predicate);\n    };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = function (f) { return function (fa) {\n    return _filterMap(fa, f);\n}; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return _map(fa, f); }; };\n/**\n * @category mapping\n * @since 2.7.1\n */\nexport var mapWithIndex = function (f) { return function (fa) {\n    return _mapWithIndex(fa, f);\n}; };\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = function (predicate) {\n    return function (fa) {\n        return _partition(fa, predicate);\n    };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return function (fa) { return _partitionMap(fa, f); }; };\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = function (fa) {\n    var left = new Map();\n    var right = new Map();\n    var entries = fa.entries();\n    var e;\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], ei = _a[1];\n        if (_.isLeft(ei)) {\n            left.set(k, ei.left);\n        }\n        else {\n            right.set(k, ei.right);\n        }\n    }\n    return separated(left, right);\n};\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Map';\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E, S) {\n    var unionES = union(E, S);\n    return {\n        concat: function (first, second) { return unionES(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E, S) { return ({\n    concat: getUnionSemigroup(E, S).concat,\n    empty: new Map()\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E, S) {\n    var intersectionES = intersection(E, S);\n    return {\n        concat: function (first, second) { return intersectionES(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n    return function () {\n        var differenceE = difference(E);\n        return {\n            concat: function (first, second) { return differenceE(second)(first); }\n        };\n    };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport function getFilterableWithIndex() {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        mapWithIndex: _mapWithIndex,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        partitionMapWithIndex: _partitionMapWithIndex,\n        partitionWithIndex: _partitionWithIndex,\n        filterMapWithIndex: _filterMapWithIndex,\n        filterWithIndex: _filterWithIndex\n    };\n}\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport function getWitherable(O) {\n    var TWI = getTraversableWithIndex(O);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        reduce: TWI.reduce,\n        foldMap: TWI.foldMap,\n        reduceRight: TWI.reduceRight,\n        traverse: TWI.traverse,\n        sequence: TWI.sequence,\n        mapWithIndex: _mapWithIndex,\n        reduceWithIndex: TWI.reduceWithIndex,\n        foldMapWithIndex: TWI.foldMapWithIndex,\n        reduceRightWithIndex: TWI.reduceRightWithIndex,\n        traverseWithIndex: TWI.traverseWithIndex,\n        wilt: wiltDefault(TWI, Compactable),\n        wither: witherDefault(TWI, Compactable)\n    };\n}\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduce = RM.reduce;\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var foldMap = RM.foldMap;\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceRight = RM.reduceRight;\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldable = function (O) {\n    return __assign(__assign({}, RM.getFoldable(O)), { URI: URI });\n};\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceWithIndex = RM.reduceWithIndex;\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var foldMapWithIndex = RM.foldMapWithIndex;\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceRightWithIndex = RM.reduceRightWithIndex;\n/**\n * @category folding\n * @since 2.10.0\n */\nexport var getFoldableWithIndex = function (O) {\n    return __assign(__assign({}, RM.getFoldableWithIndex(O)), { URI: URI });\n};\n/**\n * @category traversing\n * @since 2.10.0\n */\nexport var getTraversableWithIndex = function (O) {\n    var FWI = getFoldableWithIndex(O);\n    var keysO = keys(O);\n    var traverseWithIndex = function (F) {\n        return function (ta, f) {\n            var fm = F.of(new Map());\n            var ks = keysO(ta);\n            var len = ks.length;\n            var _loop_1 = function (i) {\n                var key = ks[i];\n                var a = ta.get(key);\n                fm = F.ap(F.map(fm, function (m) { return function (b) { return m.set(key, b); }; }), f(key, a));\n            };\n            for (var i = 0; i < len; i++) {\n                _loop_1(i);\n            }\n            return fm;\n        };\n    };\n    var traverse = function (F) {\n        var traverseWithIndexF = traverseWithIndex(F);\n        return function (ta, f) { return traverseWithIndexF(ta, function (_, a) { return f(a); }); };\n    };\n    var sequence = function (F) {\n        var traverseWithIndexF = traverseWithIndex(F);\n        return function (ta) { return traverseWithIndexF(ta, function (_, a) { return a; }); };\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        mapWithIndex: _mapWithIndex,\n        reduce: FWI.reduce,\n        foldMap: FWI.foldMap,\n        reduceRight: FWI.reduceRight,\n        reduceWithIndex: FWI.reduceWithIndex,\n        foldMapWithIndex: FWI.foldMapWithIndex,\n        reduceRightWithIndex: FWI.reduceRightWithIndex,\n        traverse: traverse,\n        sequence: sequence,\n        traverseWithIndex: traverseWithIndex\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\nvar copy = function (m) { return new Map(m); };\n/**\n * @since 2.11.0\n */\nexport var union = function (E, M) {\n    var unionEM = RM.union(E, M);\n    return function (second) { return function (first) {\n        if (isEmpty(first)) {\n            return copy(second);\n        }\n        if (isEmpty(second)) {\n            return copy(first);\n        }\n        return unionEM(second)(first);\n    }; };\n};\n/**\n * @since 2.11.0\n */\nexport var intersection = function (E, M) {\n    var intersectionEM = RM.intersection(E, M);\n    return function (second) { return function (first) {\n        if (isEmpty(first) || isEmpty(second)) {\n            return new Map();\n        }\n        return intersectionEM(second)(first);\n    }; };\n};\n/**\n * @since 2.11.0\n */\nexport var difference = function (E) {\n    var differenceE = RM.difference(E);\n    return function (second) {\n        return function (first) {\n            if (isEmpty(first)) {\n                return copy(second);\n            }\n            if (isEmpty(second)) {\n                return copy(first);\n            }\n            return differenceE(second)(first);\n        };\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use a `new Map()` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var empty = new Map();\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\n/**\n * Use [`Filterable`](#filterable) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var map_ = Filterable;\n", "import { fromEquals } from './Eq';\nimport { pipe, SK } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as O from './Option';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\n/**\n * @category conversions\n * @since 2.5.0\n */\nexport var fromMap = function (m) { return new Map(m); };\n/**\n * @category conversions\n * @since 2.5.0\n */\nexport function toMap(m) {\n    return new Map(m);\n}\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getShow(SK, SA) {\n    return {\n        show: function (m) {\n            var entries = [];\n            m.forEach(function (a, k) {\n                entries.push(\"[\".concat(SK.show(k), \", \").concat(SA.show(a), \"]\"));\n            });\n            return \"new Map([\".concat(entries.sort().join(', '), \"])\");\n        }\n    };\n}\n/**\n * Calculate the number of key/value pairs in a map\n *\n * @since 2.5.0\n */\nexport var size = function (m) { return m.size; };\n/**\n * Test whether or not a map is empty\n *\n * @since 2.5.0\n */\nexport var isEmpty = function (m) { return m.size === 0; };\nexport function member(E) {\n    var lookupE = lookup(E);\n    return function (k, m) {\n        if (m === undefined) {\n            var memberE_1 = member(E);\n            return function (m) { return memberE_1(k, m); };\n        }\n        return _.isSome(lookupE(k, m));\n    };\n}\nexport function elem(E) {\n    return function (a, m) {\n        if (m === undefined) {\n            var elemE_1 = elem(E);\n            return function (m) { return elemE_1(a, m); };\n        }\n        var values = m.values();\n        var e;\n        while (!(e = values.next()).done) {\n            var v = e.value;\n            if (E.equals(a, v)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * Get a sorted `ReadonlyArray` of the keys contained in a `ReadonlyMap`.\n *\n * @since 2.5.0\n */\nexport var keys = function (O) {\n    return function (m) {\n        return Array.from(m.keys()).sort(O.compare);\n    };\n};\n/**\n * Get a sorted `ReadonlyArray` of the values contained in a `ReadonlyMap`.\n *\n * @since 2.5.0\n */\nexport var values = function (O) {\n    return function (m) {\n        return Array.from(m.values()).sort(O.compare);\n    };\n};\n/**\n * @since 2.5.0\n */\nexport function collect(O) {\n    var keysO = keys(O);\n    return function (f) {\n        return function (m) {\n            var out = [];\n            var ks = keysO(m);\n            for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n                var key = ks_1[_i];\n                out.push(f(key, m.get(key)));\n            }\n            return out;\n        };\n    };\n}\n/**\n * Get a sorted `ReadonlyArray` of the key/value pairs contained in a `ReadonlyMap`.\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toReadonlyArray = function (O) {\n    return collect(O)(function (k, a) { return [k, a]; });\n};\nexport function toUnfoldable(ord, U) {\n    var toReadonlyArrayO = toReadonlyArray(ord);\n    return function (d) {\n        var kas = toReadonlyArrayO(d);\n        var len = kas.length;\n        return U.unfold(0, function (b) { return (b < len ? _.some([kas[b], b + 1]) : _.none); });\n    };\n}\n/**\n * Insert or replace a key/value pair in a `ReadonlyMap`.\n *\n * @since 2.10.0\n */\nexport var upsertAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k, a) {\n        var lookupWithKeyEk = lookupWithKeyE(k);\n        return function (m) {\n            var found = lookupWithKeyEk(m);\n            if (_.isNone(found)) {\n                var out = new Map(m);\n                out.set(k, a);\n                return out;\n            }\n            else if (found.value[1] !== a) {\n                var out = new Map(m);\n                out.set(found.value[0], a);\n                return out;\n            }\n            return m;\n        };\n    };\n};\n/**\n * Delete a key and value from a map\n *\n * @since 2.5.0\n */\nexport var deleteAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k) { return function (m) {\n        var found = lookupWithKeyE(k, m);\n        if (_.isSome(found)) {\n            var r = new Map(m);\n            r.delete(found.value[0]);\n            return r;\n        }\n        return m;\n    }; };\n};\n/**\n * @since 2.5.0\n */\nexport var updateAt = function (E) {\n    var modifyAtE = modifyAt(E);\n    return function (k, a) { return modifyAtE(k, function () { return a; }); };\n};\n/**\n * @since 2.5.0\n */\nexport var modifyAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k, f) { return function (m) {\n        var found = lookupWithKeyE(k, m);\n        if (_.isNone(found)) {\n            return _.none;\n        }\n        var _a = found.value, fk = _a[0], fv = _a[1];\n        var next = f(fv);\n        if (next === fv) {\n            return _.some(m);\n        }\n        var r = new Map(m);\n        r.set(fk, next);\n        return _.some(r);\n    }; };\n};\n/**\n * Delete a key and value from a map, returning the value as well as the subsequent map\n *\n * @since 2.5.0\n */\nexport function pop(E) {\n    var lookupE = lookup(E);\n    var deleteAtE = deleteAt(E);\n    return function (k) {\n        var deleteAtEk = deleteAtE(k);\n        return function (m) {\n            return pipe(lookupE(k, m), O.map(function (a) { return [a, deleteAtEk(m)]; }));\n        };\n    };\n}\nexport function lookupWithKey(E) {\n    return function (k, m) {\n        if (m === undefined) {\n            var lookupWithKeyE_1 = lookupWithKey(E);\n            return function (m) { return lookupWithKeyE_1(k, m); };\n        }\n        var entries = m.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, ka = _a[0], a = _a[1];\n            if (E.equals(ka, k)) {\n                return _.some([ka, a]);\n            }\n        }\n        return _.none;\n    };\n}\nexport function lookup(E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k, m) {\n        if (m === undefined) {\n            var lookupE_1 = lookup(E);\n            return function (m) { return lookupE_1(k, m); };\n        }\n        return pipe(lookupWithKeyE(k, m), O.map(function (_a) {\n            var _ = _a[0], a = _a[1];\n            return a;\n        }));\n    };\n}\nexport function isSubmap(SK, SA) {\n    var lookupWithKeyS = lookupWithKey(SK);\n    return function (me, that) {\n        if (that === undefined) {\n            var isSubmapSKSA_1 = isSubmap(SK, SA);\n            return function (that) { return isSubmapSKSA_1(that, me); };\n        }\n        var entries = me.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            var d2OptA = lookupWithKeyS(k, that);\n            if (_.isNone(d2OptA) || !SK.equals(k, d2OptA.value[0]) || !SA.equals(a, d2OptA.value[1])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\n/**\n * @since 2.5.0\n */\nexport var empty = \n// the type annotation here is intended (otherwise it doesn't type-check)\nnew Map();\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getEq(SK, SA) {\n    var isSubmapSKSA = isSubmap(SK, SA);\n    return fromEquals(function (x, y) { return isSubmapSKSA(x, y) && isSubmapSKSA(y, x); });\n}\n/**\n * Gets `Monoid` instance for Maps given `Semigroup` instance for their values\n *\n * @category instances\n * @since 2.5.0\n */\nexport function getMonoid(SK, SA) {\n    var lookupWithKeyS = lookupWithKey(SK);\n    return {\n        concat: function (mx, my) {\n            if (isEmpty(mx)) {\n                return my;\n            }\n            if (isEmpty(my)) {\n                return mx;\n            }\n            var r = new Map(mx);\n            var entries = my.entries();\n            var e;\n            while (!(e = entries.next()).done) {\n                var _a = e.value, k = _a[0], a = _a[1];\n                var mxOptA = lookupWithKeyS(k, mx);\n                if (_.isSome(mxOptA)) {\n                    r.set(mxOptA.value[0], SA.concat(mxOptA.value[1], a));\n                }\n                else {\n                    r.set(k, a);\n                }\n            }\n            return r;\n        },\n        empty: empty\n    };\n}\n/**\n * Create a map with one key/value pair\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var singleton = function (k, a) { return new Map([[k, a]]); };\nexport function fromFoldable(E, M, F) {\n    return function (fka) {\n        var lookupWithKeyE = lookupWithKey(E);\n        return F.reduce(fka, new Map(), function (b, _a) {\n            var k = _a[0], a = _a[1];\n            var bOpt = lookupWithKeyE(k, b);\n            if (_.isSome(bOpt)) {\n                b.set(bOpt.value[0], M.concat(bOpt.value[1], a));\n            }\n            else {\n                b.set(k, a);\n            }\n            return b;\n        });\n    };\n}\nvar _mapWithIndex = function (fa, f) {\n    var m = new Map();\n    var entries = fa.entries();\n    var e;\n    while (!(e = entries.next()).done) {\n        var _a = e.value, key = _a[0], a = _a[1];\n        m.set(key, f(key, a));\n    }\n    return m;\n};\n/**\n * @since 2.10.0\n */\nexport var partitionMapWithIndex = function (f) {\n    return function (fa) {\n        var left = new Map();\n        var right = new Map();\n        var entries = fa.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            var ei = f(k, a);\n            if (_.isLeft(ei)) {\n                left.set(k, ei.left);\n            }\n            else {\n                right.set(k, ei.right);\n            }\n        }\n        return separated(left, right);\n    };\n};\nexport function partitionWithIndex(predicateWithIndex) {\n    return function (m) {\n        var left = new Map();\n        var right = new Map();\n        var entries = m.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            if (predicateWithIndex(k, a)) {\n                right.set(k, a);\n            }\n            else {\n                left.set(k, a);\n            }\n        }\n        return separated(left, right);\n    };\n}\n/**\n * @since 2.10.0\n */\nexport var filterMapWithIndex = function (f) {\n    return function (fa) {\n        var m = new Map();\n        var entries = fa.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            var o = f(k, a);\n            if (_.isSome(o)) {\n                m.set(k, o.value);\n            }\n        }\n        return m;\n    };\n};\nexport function filterWithIndex(predicateWithIndex) {\n    return function (m) {\n        var out = new Map();\n        var entries = m.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            if (predicateWithIndex(k, a)) {\n                out.set(k, a);\n            }\n        }\n        return out;\n    };\n}\nvar _map = function (fa, f) { return _mapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _filter = function (fa, p) {\n    return _filterWithIndex(fa, function (_, a) { return p(a); });\n};\nvar _filterMap = function (fa, f) { return _filterMapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _partition = function (fa, predicate) {\n    return _partitionWithIndex(fa, function (_, a) { return predicate(a); });\n};\nvar _partitionMap = function (fa, f) { return _partitionMapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _filterWithIndex = function (fa, p) { return pipe(fa, filterWithIndex(p)); };\nvar _filterMapWithIndex = function (fa, f) {\n    return pipe(fa, filterMapWithIndex(f));\n};\nvar _partitionWithIndex = function (fa, p) { return pipe(fa, partitionWithIndex(p)); };\nvar _partitionMapWithIndex = function (fa, f) {\n    return pipe(fa, partitionMapWithIndex(f));\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var compact = function (fa) {\n    var m = new Map();\n    var entries = fa.entries();\n    var e;\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], oa = _a[1];\n        if (_.isSome(oa)) {\n            m.set(k, oa.value);\n        }\n    }\n    return m;\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var filter = function (predicate) {\n    return function (fa) {\n        return _filter(fa, predicate);\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var filterMap = function (f) { return function (fa) {\n    return _filterMap(fa, f);\n}; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.5.0\n */\nexport var map = function (f) { return function (fa) { return _map(fa, f); }; };\n/**\n * @category mapping\n * @since 2.7.1\n */\nexport var mapWithIndex = function (f) { return function (fa) {\n    return _mapWithIndex(fa, f);\n}; };\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var partition = function (predicate) {\n    return function (fa) {\n        return _partition(fa, predicate);\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var partitionMap = function (f) { return function (fa) { return _partitionMap(fa, f); }; };\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport var separate = function (fa) {\n    var left = new Map();\n    var right = new Map();\n    var entries = fa.entries();\n    var e;\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], ei = _a[1];\n        if (_.isLeft(ei)) {\n            left.set(k, ei.left);\n        }\n        else {\n            right.set(k, ei.right);\n        }\n    }\n    return separated(left, right);\n};\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyMap';\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E, S) {\n    var unionES = union(E, S);\n    return {\n        concat: function (first, second) { return unionES(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E, S) { return ({\n    concat: getUnionSemigroup(E, S).concat,\n    empty: empty\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E, S) {\n    var intersectionES = intersection(E, S);\n    return {\n        concat: function (first, second) { return intersectionES(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n    return function () {\n        var differenceE = difference(E);\n        return {\n            concat: function (first, second) { return differenceE(second)(first); }\n        };\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport function getFilterableWithIndex() {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        mapWithIndex: _mapWithIndex,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        partitionMapWithIndex: _partitionMapWithIndex,\n        partitionWithIndex: _partitionWithIndex,\n        filterMapWithIndex: _filterMapWithIndex,\n        filterWithIndex: _filterWithIndex\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getFunctorWithIndex = function () { return ({\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduce = function (O) {\n    var reduceWithIndexO = reduceWithIndex(O);\n    return function (b, f) { return reduceWithIndexO(b, function (_, b, a) { return f(b, a); }); };\n};\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var foldMap = function (O) {\n    var foldMapWithIndexO = foldMapWithIndex(O);\n    return function (M) {\n        var foldMapWithIndexOM = foldMapWithIndexO(M);\n        return function (f) { return foldMapWithIndexOM(function (_, a) { return f(a); }); };\n    };\n};\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceRight = function (O) {\n    var reduceRightWithIndexO = reduceRightWithIndex(O);\n    return function (b, f) { return reduceRightWithIndexO(b, function (_, b, a) { return f(b, a); }); };\n};\n/**\n * @category folding\n * @since 2.10.0\n */\nexport var getFoldable = function (O) {\n    var reduceO = reduce(O);\n    var foldMapO = foldMap(O);\n    var reduceRightO = reduceRight(O);\n    return {\n        URI: URI,\n        _E: undefined,\n        reduce: function (fa, b, f) { return pipe(fa, reduceO(b, f)); },\n        foldMap: function (M) {\n            var foldMapOM = foldMapO(M);\n            return function (fa, f) { return pipe(fa, foldMapOM(f)); };\n        },\n        reduceRight: function (fa, b, f) { return pipe(fa, reduceRightO(b, f)); }\n    };\n};\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceWithIndex = function (O) {\n    var keysO = keys(O);\n    return function (b, f) { return function (m) {\n        var out = b;\n        for (var _i = 0, _a = keysO(m); _i < _a.length; _i++) {\n            var k = _a[_i];\n            out = f(k, out, m.get(k));\n        }\n        return out;\n    }; };\n};\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var foldMapWithIndex = function (O) {\n    var keysO = keys(O);\n    return function (M) { return function (f) { return function (m) {\n        var out = M.empty;\n        for (var _i = 0, _a = keysO(m); _i < _a.length; _i++) {\n            var k = _a[_i];\n            out = M.concat(out, f(k, m.get(k)));\n        }\n        return out;\n    }; }; };\n};\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceRightWithIndex = function (O) {\n    var keysO = keys(O);\n    return function (b, f) { return function (m) {\n        var out = b;\n        var ks = keysO(m);\n        var len = ks.length;\n        for (var i = len - 1; i >= 0; i--) {\n            var k = ks[i];\n            out = f(k, m.get(k), out);\n        }\n        return out;\n    }; };\n};\n/**\n * @category folding\n * @since 2.10.0\n */\nexport var getFoldableWithIndex = function (O) {\n    var F = getFoldable(O);\n    var reduceWithIndexO = reduceWithIndex(O);\n    var foldMapWithIndexO = foldMapWithIndex(O);\n    var reduceRightWithIndexO = reduceRightWithIndex(O);\n    return {\n        URI: URI,\n        _E: undefined,\n        reduce: F.reduce,\n        foldMap: F.foldMap,\n        reduceRight: F.reduceRight,\n        reduceWithIndex: function (fa, b, f) { return pipe(fa, reduceWithIndexO(b, f)); },\n        foldMapWithIndex: function (M) {\n            var foldMapWithIndexOM = foldMapWithIndexO(M);\n            return function (fa, f) { return pipe(fa, foldMapWithIndexOM(f)); };\n        },\n        reduceRightWithIndex: function (fa, b, f) { return pipe(fa, reduceRightWithIndexO(b, f)); }\n    };\n};\n/**\n * @category traversing\n * @since 2.10.0\n */\nexport var getTraversable = function (O) {\n    var TWI = getTraversableWithIndex(O);\n    var F = getFoldable(O);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        reduce: F.reduce,\n        foldMap: F.foldMap,\n        reduceRight: F.reduceRight,\n        traverse: TWI.traverse,\n        sequence: TWI.sequence\n    };\n};\n/**\n * @category traversing\n * @since 2.10.0\n */\nexport var getTraversableWithIndex = function (O) {\n    var FWI = getFoldableWithIndex(O);\n    var keysO = keys(O);\n    var traverseWithIndex = function (F) {\n        return function (ta, f) {\n            var fm = F.of(new Map());\n            var ks = keysO(ta);\n            var len = ks.length;\n            var _loop_1 = function (i) {\n                var key = ks[i];\n                var a = ta.get(key);\n                fm = F.ap(F.map(fm, function (m) { return function (b) { return m.set(key, b); }; }), f(key, a));\n            };\n            for (var i = 0; i < len; i++) {\n                _loop_1(i);\n            }\n            return fm;\n        };\n    };\n    var traverse = function (F) {\n        var traverseWithIndexF = traverseWithIndex(F);\n        return function (ta, f) { return traverseWithIndexF(ta, function (_, a) { return f(a); }); };\n    };\n    var sequence = function (F) {\n        var traverseWithIndexF = traverseWithIndex(F);\n        return function (ta) { return traverseWithIndexF(ta, SK); };\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        mapWithIndex: _mapWithIndex,\n        reduce: FWI.reduce,\n        foldMap: FWI.foldMap,\n        reduceRight: FWI.reduceRight,\n        reduceWithIndex: FWI.reduceWithIndex,\n        foldMapWithIndex: FWI.foldMapWithIndex,\n        reduceRightWithIndex: FWI.reduceRightWithIndex,\n        traverse: traverse,\n        sequence: sequence,\n        traverseWithIndex: traverseWithIndex\n    };\n};\n/**\n * @category filtering\n * @since 2.5.0\n */\nexport function getWitherable(O) {\n    var TWI = getTraversableWithIndex(O);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        reduce: TWI.reduce,\n        foldMap: TWI.foldMap,\n        reduceRight: TWI.reduceRight,\n        traverse: TWI.traverse,\n        sequence: TWI.sequence,\n        mapWithIndex: _mapWithIndex,\n        reduceWithIndex: TWI.reduceWithIndex,\n        foldMapWithIndex: TWI.foldMapWithIndex,\n        reduceRightWithIndex: TWI.reduceRightWithIndex,\n        traverseWithIndex: TWI.traverseWithIndex,\n        wilt: wiltDefault(TWI, Compactable),\n        wither: witherDefault(TWI, Compactable)\n    };\n}\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var union = function (E, M) {\n    var lookupE = lookup(E);\n    return function (second) { return function (first) {\n        if (isEmpty(first)) {\n            return second;\n        }\n        if (isEmpty(second)) {\n            return first;\n        }\n        var out = new Map();\n        var firstEntries = first.entries();\n        var e;\n        while (!(e = firstEntries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            var oka = lookupE(k)(second);\n            if (_.isSome(oka)) {\n                out.set(k, M.concat(a, oka.value));\n            }\n            else {\n                out.set(k, a);\n            }\n        }\n        var secondEntries = second.entries();\n        while (!(e = secondEntries.next()).done) {\n            var _b = e.value, k = _b[0], a = _b[1];\n            var oka = lookupE(k)(out);\n            if (_.isNone(oka)) {\n                out.set(k, a);\n            }\n        }\n        return out;\n    }; };\n};\n/**\n * @since 2.11.0\n */\nexport var intersection = function (E, M) {\n    var lookupE = lookup(E);\n    return function (second) { return function (first) {\n        if (isEmpty(first) || isEmpty(second)) {\n            return empty;\n        }\n        var out = new Map();\n        var entries = first.entries();\n        var e;\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            var oka = lookupE(k)(second);\n            if (_.isSome(oka)) {\n                out.set(k, M.concat(a, oka.value));\n            }\n        }\n        return out;\n    }; };\n};\n/**\n * @since 2.11.0\n */\nexport var difference = function (E) {\n    var memberE = member(E);\n    return function (second) {\n        return function (first) {\n            if (isEmpty(first)) {\n                return second;\n            }\n            if (isEmpty(second)) {\n                return first;\n            }\n            var out = new Map();\n            var firstEntries = first.entries();\n            var e;\n            while (!(e = firstEntries.next()).done) {\n                var _a = e.value, k = _a[0], a = _a[1];\n                if (!memberE(k)(second)) {\n                    out.set(k, a);\n                }\n            }\n            var secondEntries = second.entries();\n            while (!(e = secondEntries.next()).done) {\n                var _b = e.value, k = _b[0], a = _b[1];\n                if (!memberE(k)(first)) {\n                    out.set(k, a);\n                }\n            }\n            return out;\n        };\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RM.Functor` instead of `RM.readonlyMap`\n * (where `RM` is from `import RM from 'fp-ts/ReadonlyMap'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyMap = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n", "/**\n * A meet-semilattice (or lower semilattice) is a semilattice whose operation is called `meet`, and which can be thought\n * of as a greatest lower bound.\n *\n * A `MeetSemilattice` must satisfy the following laws:\n *\n * - Associativity: `a ∧ (b ∧ c) <-> (a ∧ b) ∧ c`\n * - Commutativity: `a ∧ b <-> b ∧ a`\n * - Idempotency:   `a ∧ a <-> a`\n *\n * @since 2.0.0\n */\nexport {};\n", "export {};\n", "export {};\n", "export {};\n", "export {};\n", "import { getMonoid as getEM } from './Endomorphism';\nimport { getMonoid as getFM } from './function';\nimport * as _ from './internal';\nimport * as Se from './Semigroup';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Get a monoid where `concat` will return the minimum, based on the provided bounded order.\n *\n * The `empty` value is the `top` value.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as M from 'fp-ts/Monoid'\n *\n * const M1 = M.min(N.Bounded)\n *\n * assert.deepStrictEqual(M1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var min = function (B) { return ({\n    concat: Se.min(B).concat,\n    empty: B.top\n}); };\n/**\n * Get a monoid where `concat` will return the maximum, based on the provided bounded order.\n *\n * The `empty` value is the `bottom` value.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as M from 'fp-ts/Monoid'\n *\n * const M1 = M.max(N.Bounded)\n *\n * assert.deepStrictEqual(M1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var max = function (B) { return ({\n    concat: Se.max(B).concat,\n    empty: B.bottom\n}); };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Monoid`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Monoid'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Monoid).concat('a', 'b'), 'ba')\n *\n * @since 2.10.0\n */\nexport var reverse = function (M) { return ({\n    concat: Se.reverse(M).concat,\n    empty: M.empty\n}); };\n/**\n * Given a struct of monoids returns a monoid for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const M = struct<Point>({\n *   x: N.MonoidSum,\n *   y: N.MonoidSum\n * })\n *\n * assert.deepStrictEqual(M.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @since 2.10.0\n */\nexport var struct = function (monoids) {\n    var empty = {};\n    for (var k in monoids) {\n        if (_.has.call(monoids, k)) {\n            empty[k] = monoids[k].empty;\n        }\n    }\n    return {\n        concat: Se.struct(monoids).concat,\n        empty: empty\n    };\n};\n/**\n * Given a tuple of monoids returns a monoid for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Monoid'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const M1 = tuple(S.Monoid, N.MonoidSum)\n * assert.deepStrictEqual(M1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const M2 = tuple(S.Monoid, N.MonoidSum, B.MonoidAll)\n * assert.deepStrictEqual(M2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var monoids = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        monoids[_i] = arguments[_i];\n    }\n    return ({\n        concat: Se.tuple.apply(Se, monoids).concat,\n        empty: monoids.map(function (m) { return m.empty; })\n    });\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the monoid `empty` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(concatAll(N.MonoidSum)([1, 2, 3]), 6)\n * assert.deepStrictEqual(concatAll(N.MonoidSum)([]), 0)\n *\n * @since 2.10.0\n */\nexport var concatAll = function (M) { return Se.concatAll(M)(M.empty); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`Monoid`](./void.ts.html#monoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidVoid = {\n    concat: Se.semigroupVoid.concat,\n    empty: undefined\n};\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleMonoid = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getStructMonoid = struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getDualMonoid = reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getJoinMonoid = max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getMeetMonoid = min;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var fold = concatAll;\n/**\n * Use [`MonoidAll`](./boolean.ts.html#monoidall) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidAll = {\n    concat: Se.semigroupAll.concat,\n    empty: true\n};\n/**\n * Use [`MonoidAny`](./boolean.ts.html#monoidany) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidAny = {\n    concat: Se.semigroupAny.concat,\n    empty: false\n};\n/**\n * Use [`getMonoid`](./function.ts.html#getmonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFunctionMonoid = getFM;\n/**\n * Use [`getEndomorphismMonoid`](./function.ts.html#getendomorphismmonoid) instead.\n *\n * **Note**. The execution order in [`getEndomorphismMonoid`](./function.ts.html#getendomorphismmonoid) is reversed.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getEndomorphismMonoid = function () { return reverse(getEM()); };\n/**\n * Use [`Monoid`](./string.ts.html#monoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidString = {\n    concat: Se.semigroupString.concat,\n    empty: ''\n};\n/**\n * Use [`MonoidSum`](./number.ts.html#monoidsum) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidSum = {\n    concat: Se.semigroupSum.concat,\n    empty: 0\n};\n/**\n * Use [`MonoidProduct`](./number.ts.html#monoidproduct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidProduct = {\n    concat: Se.semigroupProduct.concat,\n    empty: 1\n};\n", "export {};\n", "/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.12.0\n */\nexport var matchW = function (onLessThan, onEqual, onGreaterThan) {\n    return function (o) {\n        return o === -1 ? onLessThan() : o === 0 ? onEqual() : onGreaterThan();\n    };\n};\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = matchW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nexport var reverse = function (o) { return (o === -1 ? 1 : o === 1 ? -1 : 0); };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Eq = {\n    equals: function (x, y) { return x === y; }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Semigroup = {\n    concat: function (x, y) { return (x !== 0 ? x : y); }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monoid = {\n    concat: Semigroup.concat,\n    empty: 0\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.0.0\n */\nexport var sign = function (n) { return (n <= -1 ? -1 : n >= 1 ? 1 : 0); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var invert = reverse;\n/**\n * Use [`Semigroup`](#semigroup) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupOrdering = Semigroup;\n/**\n * Use [`Eq`](#eq) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var eqOrdering = Eq;\n/**\n * Use [`Monoid`](#monoid) instead\n *\n * @category zone of death\n * @since 2.4.0\n * @deprecated\n */\nexport var monoidOrdering = Monoid;\n", "import { apFirst as apFirst_, apSecond as apSecond_ } from './Apply';\nimport { chainFirst as chainFirst_ } from './Chain';\nimport { identity, pipe as pipeFromFunctionModule } from './function';\nexport function map(F) {\n    return function (f) { return function (fa) { return F.map(fa, f); }; };\n}\nexport function contramap(F) {\n    return function (f) { return function (fa) { return F.contramap(fa, f); }; };\n}\nexport function mapWithIndex(F) {\n    return function (f) { return function (fa) { return F.mapWithIndex(fa, f); }; };\n}\nexport function ap(F) {\n    return function (fa) { return function (fab) { return F.ap(fab, fa); }; };\n}\nexport function chain(F) {\n    return function (f) { return function (fa) { return F.chain(fa, f); }; };\n}\nexport function bimap(F) {\n    return function (f, g) { return function (fea) { return F.bimap(fea, f, g); }; };\n}\nexport function mapLeft(F) {\n    return function (f) { return function (fea) { return F.mapLeft(fea, f); }; };\n}\nexport function extend(F) {\n    return function (f) { return function (wa) { return F.extend(wa, f); }; };\n}\nexport function reduce(F) {\n    return function (b, f) { return function (fa) { return F.reduce(fa, b, f); }; };\n}\nexport function foldMap(F) {\n    return function (M) {\n        var foldMapM = F.foldMap(M);\n        return function (f) { return function (fa) { return foldMapM(fa, f); }; };\n    };\n}\nexport function reduceRight(F) {\n    return function (b, f) { return function (fa) { return F.reduceRight(fa, b, f); }; };\n}\nexport function reduceWithIndex(F) {\n    return function (b, f) { return function (fa) { return F.reduceWithIndex(fa, b, f); }; };\n}\nexport function foldMapWithIndex(F) {\n    return function (M) {\n        var foldMapWithIndexM = F.foldMapWithIndex(M);\n        return function (f) { return function (fa) { return foldMapWithIndexM(fa, f); }; };\n    };\n}\nexport function reduceRightWithIndex(F) {\n    return function (b, f) { return function (fa) { return F.reduceRightWithIndex(fa, b, f); }; };\n}\nexport function alt(F) {\n    return function (that) { return function (fa) { return F.alt(fa, that); }; };\n}\nexport function filter(F) {\n    return function (predicate) { return function (fa) { return F.filter(fa, predicate); }; };\n}\nexport function filterMap(F) {\n    return function (f) { return function (fa) { return F.filterMap(fa, f); }; };\n}\nexport function partition(F) {\n    return function (f) { return function (fa) { return F.partition(fa, f); }; };\n}\nexport function partitionMap(F) {\n    return function (f) { return function (fa) { return F.partitionMap(fa, f); }; };\n}\nexport function filterWithIndex(F) {\n    return function (predicate) { return function (fa) { return F.filterWithIndex(fa, predicate); }; };\n}\nexport function filterMapWithIndex(F) {\n    return function (f) { return function (fa) { return F.filterMapWithIndex(fa, f); }; };\n}\nexport function partitionWithIndex(F) {\n    return function (f) { return function (fa) { return F.partitionWithIndex(fa, f); }; };\n}\nexport function partitionMapWithIndex(F) {\n    return function (f) { return function (fa) { return F.partitionMapWithIndex(fa, f); }; };\n}\nexport function promap(F) {\n    return function (f, g) { return function (fbc) { return F.promap(fbc, f, g); }; };\n}\nexport function compose(F) {\n    return function (ea) { return function (ab) { return F.compose(ab, ea); }; };\n}\nvar isFunctor = function (I) { return typeof I.map === 'function'; };\nvar isContravariant = function (I) { return typeof I.contramap === 'function'; };\nvar isFunctorWithIndex = function (I) { return typeof I.mapWithIndex === 'function'; };\nvar isApply = function (I) { return typeof I.ap === 'function'; };\nvar isChain = function (I) { return typeof I.chain === 'function'; };\nvar isBifunctor = function (I) { return typeof I.bimap === 'function'; };\nvar isExtend = function (I) { return typeof I.extend === 'function'; };\nvar isFoldable = function (I) { return typeof I.reduce === 'function'; };\nvar isFoldableWithIndex = function (I) { return typeof I.reduceWithIndex === 'function'; };\nvar isAlt = function (I) { return typeof I.alt === 'function'; };\nvar isCompactable = function (I) { return typeof I.compact === 'function'; };\nvar isFilterable = function (I) { return typeof I.filter === 'function'; };\nvar isFilterableWithIndex = function (I) {\n    return typeof I.filterWithIndex === 'function';\n};\nvar isProfunctor = function (I) { return typeof I.promap === 'function'; };\nvar isSemigroupoid = function (I) { return typeof I.compose === 'function'; };\nvar isMonadThrow = function (I) { return typeof I.throwError === 'function'; };\n/** @deprecated */\nexport function pipeable(I) {\n    var r = {};\n    if (isFunctor(I)) {\n        r.map = map(I);\n    }\n    if (isContravariant(I)) {\n        r.contramap = contramap(I);\n    }\n    if (isFunctorWithIndex(I)) {\n        r.mapWithIndex = mapWithIndex(I);\n    }\n    if (isApply(I)) {\n        r.ap = ap(I);\n        r.apFirst = apFirst_(I);\n        r.apSecond = apSecond_(I);\n    }\n    if (isChain(I)) {\n        r.chain = chain(I);\n        r.chainFirst = chainFirst_(I);\n        r.flatten = r.chain(identity);\n    }\n    if (isBifunctor(I)) {\n        r.bimap = bimap(I);\n        r.mapLeft = mapLeft(I);\n    }\n    if (isExtend(I)) {\n        r.extend = extend(I);\n        r.duplicate = r.extend(identity);\n    }\n    if (isFoldable(I)) {\n        r.reduce = reduce(I);\n        r.foldMap = foldMap(I);\n        r.reduceRight = reduceRight(I);\n    }\n    if (isFoldableWithIndex(I)) {\n        r.reduceWithIndex = reduceWithIndex(I);\n        r.foldMapWithIndex = foldMapWithIndex(I);\n        r.reduceRightWithIndex = reduceRightWithIndex(I);\n    }\n    if (isAlt(I)) {\n        r.alt = alt(I);\n    }\n    if (isCompactable(I)) {\n        r.compact = I.compact;\n        r.separate = I.separate;\n    }\n    if (isFilterable(I)) {\n        r.filter = filter(I);\n        r.filterMap = filterMap(I);\n        r.partition = partition(I);\n        r.partitionMap = partitionMap(I);\n    }\n    if (isFilterableWithIndex(I)) {\n        r.filterWithIndex = filterWithIndex(I);\n        r.filterMapWithIndex = filterMapWithIndex(I);\n        r.partitionWithIndex = partitionWithIndex(I);\n        r.partitionMapWithIndex = partitionMapWithIndex(I);\n    }\n    if (isProfunctor(I)) {\n        r.promap = promap(I);\n    }\n    if (isSemigroupoid(I)) {\n        r.compose = compose(I);\n    }\n    if (isMonadThrow(I)) {\n        var fromOption = function (onNone) { return function (ma) {\n            return ma._tag === 'None' ? I.throwError(onNone()) : I.of(ma.value);\n        }; };\n        var fromEither = function (ma) {\n            return ma._tag === 'Left' ? I.throwError(ma.left) : I.of(ma.right);\n        };\n        var fromPredicate = function (predicate, onFalse) {\n            return function (a) {\n                return predicate(a) ? I.of(a) : I.throwError(onFalse(a));\n            };\n        };\n        var filterOrElse = function (predicate, onFalse) {\n            return function (ma) {\n                return I.chain(ma, function (a) { return (predicate(a) ? I.of(a) : I.throwError(onFalse(a))); });\n            };\n        };\n        r.fromOption = fromOption;\n        r.fromEither = fromEither;\n        r.fromPredicate = fromPredicate;\n        r.filterOrElse = filterOrElse;\n    }\n    return r;\n}\n/**\n * Use [`pipe`](https://gcanti.github.io/fp-ts/modules/function.ts.html#pipe) from `function` module instead.\n *\n * @since 2.0.0\n * @deprecated\n */\nexport var pipe = pipeFromFunctionModule;\n", "export {};\n", "export {};\n", "/**\n * @since 2.0.0\n */\nimport { pipe } from './function';\nimport { map } from './IO';\n/**\n * Returns a random number between 0 (inclusive) and 1 (exclusive). This is a direct wrapper around JavaScript's\n * `Math.random()`.\n *\n * @since 2.0.0\n */\nexport var random = function () { return Math.random(); };\n/**\n * Takes a range specified by `low` (the first argument) and `high` (the second), and returns a random integer uniformly\n * distributed in the closed interval `[low, high]`. It is unspecified what happens if `low > high`, or if either of\n * `low` or `high` is not an integer.\n *\n * @since 2.0.0\n */\nexport function randomInt(low, high) {\n    return pipe(random, map(function (n) { return Math.floor((high - low + 1) * n + low); }));\n}\n/**\n * Returns a random number between a minimum value (inclusive) and a maximum value (exclusive). It is unspecified what\n * happens if `maximum < minimum`.\n *\n * @since 2.0.0\n */\nexport function randomRange(min, max) {\n    return pipe(random, map(function (n) { return (max - min) * n + min; }));\n}\n/**\n * Returns a random boolean value with an equal chance of being `true` or `false`\n *\n * @since 2.0.0\n */\nexport var randomBool = /*#__PURE__*/ pipe(random, map(function (n) { return n < 0.5; }));\n/**\n * Returns a random element of a `ReadonlyNonEmptyArray`.\n *\n * @since 2.10.0\n */\nexport var randomElem = function (as) {\n    return pipe(randomInt(0, as.length - 1), map(function (i) { return as[i]; }));\n};\n", "import { getApplicativeMonoid } from './Applicative';\nimport { ap as ap_, apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { compact as compact_, separate as separate_ } from './Compactable';\nimport * as E from './Either';\nimport * as ET from './EitherT';\nimport { filter as filter_, filterMap as filterMap_, partition as partition_, partitionMap as partitionMap_ } from './Filterable';\nimport { chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromEitherK as fromEitherK_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_, tapEither as tapEither_ } from './FromEither';\nimport { ask as ask_, asks as asks_, fromReaderK as fromReaderK_, tapReader as tapReader_ } from './FromReader';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as R from './Reader';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var left = /*#__PURE__*/ ET.left(R.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var right = /*#__PURE__*/ ET.right(R.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightReader = \n/*#__PURE__*/ ET.rightF(R.Functor);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftReader = /*#__PURE__*/ ET.leftF(R.Functor);\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = R.of;\n/**\n * @category conversions\n * @since 2.11.0\n */\nexport var fromReader = rightReader;\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = /*#__PURE__*/ ET.match(R.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = match;\n/**\n * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`Reader`).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchE = /*#__PURE__*/ ET.matchE(R.Monad);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchEW = matchE;\n/**\n * Alias of [`matchEW`](#matchew).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchEW;\n/**\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = \n/*#__PURE__*/ ET.getOrElse(R.Monad);\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = getOrElse;\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var toUnion = /*#__PURE__*/ ET.toUnion(R.Functor);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Changes the value of the local context during the execution of the action `ma` (similar to `Contravariant`'s\n * `contramap`).\n *\n * @since 2.0.0\n */\nexport var local = R.local;\n/**\n * Less strict version of [`asksReaderEither`](#asksreadereither).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReaderEitherW = R.asksReaderW;\n/**\n * Effectfully accesses the environment.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReaderEither = asksReaderEitherW;\n/**\n * @category error handling\n * @since 2.0.0\n */\nexport var orElse = /*#__PURE__*/ ET.orElse(R.Monad);\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the return types will be merged.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var orElseW = orElse;\n/**\n * Returns an effect that effectfully \"peeks\" at the failure of this effect.\n *\n * @category error handling\n * @since 2.15.0\n */\nexport var tapError = /*#__PURE__*/ dual(2, ET.tapError(R.Monad));\n/**\n * @category error handling\n * @since 2.11.0\n */\nexport var orLeft = /*#__PURE__*/ ET.orLeft(R.Monad);\n/**\n * @category error handling\n * @since 2.16.6\n */\nexport var orLeftW = orLeft;\n/**\n * @since 2.0.0\n */\nexport var swap = /*#__PURE__*/ ET.swap(R.Functor);\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = \n/*#__PURE__*/ ET.map(R.Functor);\n/**\n * Returns a `ReaderEither` whose failure and success channels have been mapped by the specified pair of functions, `f` and `g`.\n *\n * @example\n * import * as ReaderEither from 'fp-ts/ReaderEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n * const g = (n: number) => n * 2\n *\n * assert.deepStrictEqual(ReaderEither.mapBoth(ReaderEither.right(1), f, g)({}), Either.right(2))\n * assert.deepStrictEqual(ReaderEither.mapBoth(ReaderEither.left('err'), f, g)({}), Either.left(new Error('err')))\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapBoth = /*#__PURE__*/ dual(3, ET.mapBoth(R.Functor));\n/**\n * Alias of `mapBoth`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var bimap = mapBoth;\n/**\n * Returns a `ReaderEither` with its error channel mapped using the specified function.\n *\n * @example\n * import * as ReaderEither from 'fp-ts/ReaderEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n *\n * assert.deepStrictEqual(ReaderEither.mapError(ReaderEither.right(1), f)({}), Either.right(1))\n * assert.deepStrictEqual(ReaderEither.mapError(ReaderEither.left('err'), f)({}), Either.left(new Error('err')))\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapError = /*#__PURE__*/ dual(2, ET.mapError(R.Functor));\n/**\n * Alias of `mapError`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var mapLeft = mapError;\n/**\n * @since 2.0.0\n */\nexport var ap = /*#__PURE__*/ ET.ap(R.Apply);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = ap;\n/**\n * @category constructors\n * @since 2.8.5\n */\nexport var of = right;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, ET.flatMap(R.Monad));\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = /*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = \n/*#__PURE__*/ ET.alt(R.Monad);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the environment, the error and the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = alt;\n/**\n * @since 2.7.0\n */\nexport var throwError = left;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'ReaderEither';\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var C = E.getCompactable(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: compact_(R.Functor, C),\n        separate: separate_(R.Functor, C, E.Functor)\n    };\n};\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport function getFilterable(M) {\n    var F = E.getFilterable(M);\n    var C = getCompactable(M);\n    var filter = filter_(R.Functor, F);\n    var filterMap = filterMap_(R.Functor, F);\n    var partition = partition_(R.Functor, F);\n    var partitionMap = partitionMap_(R.Functor, F);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: C.compact,\n        separate: C.separate,\n        filter: function (fa, predicate) { return pipe(fa, filter(predicate)); },\n        filterMap: function (fa, f) { return pipe(fa, filterMap(f)); },\n        partition: function (fa, predicate) { return pipe(fa, partition(predicate)); },\n        partitionMap: function (fa, f) { return pipe(fa, partitionMap(f)); }\n    };\n}\n/**\n * The default [`Applicative`](#applicative) instance returns the first error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * See [`getApplicativeValidation`](./Either.ts.html#getapplicativevalidation).\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getApplicativeReaderValidation(S) {\n    var ap = ap_(R.Apply, E.getApplicativeValidation(S));\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return pipe(fab, ap(fa)); },\n        of: of\n    };\n}\n/**\n * The default [`Alt`](#alt) instance returns the last error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * See [`getAltValidation`](./Either.ts.html#getaltvalidation).\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getAltReaderValidation(S) {\n    var alt = ET.altValidation(R.Monad, S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        alt: function (fa, that) { return pipe(fa, alt(that)); }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Right` value of this `ReaderEither` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Right` value of this `ReaderEither` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Less strict version of [`apFirst`](#apfirst)\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apFirstW = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * Less strict version of [`apSecond`](#apsecond)\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apSecondW = apSecond;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromReader = {\n    URI: URI,\n    fromReader: fromReader\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as RE from 'fp-ts/ReaderEither'\n *\n * const checkString = (value: string) => pipe(\n *   RE.ask<number>(),\n *   RE.tapEither(\n *     (minLength) => value.length > minLength\n *       ? E.right('ok')\n *       : E.left('error')\n *   )\n * )\n *\n * assert.deepStrictEqual(checkString('')(1), E.left('error'))\n * assert.deepStrictEqual(checkString('fp-ts')(2), E.right(2))\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReader = /*#__PURE__*/ dual(2, tapReader_(FromReader, Chain));\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * Reads the current context.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var ask = /*#__PURE__*/ ask_(FromReader);\n/**\n * Projects a value from the global context in a `ReaderEither`.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var asks = /*#__PURE__*/ asks_(FromReader);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromReaderK = /*#__PURE__*/ fromReaderK_(FromReader);\n/**\n * Alias of `tapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderK = tapReader;\n/**\n * Alias of `tapReader`.\n *\n * Less strict version of [`chainReaderK`](#chainreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderKW = tapReader;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    throwError: throwError\n};\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromOption = \n/*#__PURE__*/ fromOption_(FromEither);\n/**\n * Use `liftOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var fromOptionK = /*#__PURE__*/ fromOptionK_(FromEither);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainOptionK = \n/*#__PURE__*/ chainOptionK_(FromEither, Chain);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.13.2\n */\nexport var chainOptionKW = chainOptionK;\n/** @internal */\nvar _FromEither = {\n    fromEither: FromEither.fromEither\n};\n/** @internal */\nvar _FromReader = {\n    fromReader: FromReader.fromReader\n};\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftNullable = /*#__PURE__*/ _.liftNullable(_FromEither);\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftOption = /*#__PURE__*/ _.liftOption(_FromEither);\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapNullable = /*#__PURE__*/ _.flatMapNullable(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapOption = /*#__PURE__*/ _.flatMapOption(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapEither = /*#__PURE__*/ _.flatMapEither(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReader = /*#__PURE__*/ _.flatMapReader(_FromReader, _FlatMap);\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainEitherK = flatMapEither;\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainEitherKW = flatMapEither;\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * Alias of `tapEither`.\n *\n * Less strict version of [`chainFirstEitherK`](#chainfirsteitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherKW = tapEither;\n/**\n * Alias of `flatMapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderK = flatMapReader;\n/**\n * Alias of `flatMapReader`.\n *\n * Less strict version of [`chainReaderK`](#chainreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderKW = flatMapReader;\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterOrElse = /*#__PURE__*/ filterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category filtering\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(R.traverseReadonlyNonEmptyArrayWithIndex(f), R.map(E.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = /*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.8.0\n */\nexport var chainFirstW = tap;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirst = tapError;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirstW = tapError;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RE.Functor` instead of `RE.readerEither`\n * (where `R` is from `import R from 'fp-ts/ReaderEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var readerEither = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    alt: _alt,\n    throwError: left\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/ getApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/ getApplicativeMonoid(Applicative);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = function (S) {\n    return getApplySemigroup_(R.Apply)(E.getSemigroup(S));\n};\n/**\n * Use [`getApplicativeReaderValidation`](#getapplicativereadervalidation) and [`getAltReaderValidation`](#getaltreadervalidation) instead.\n *\n * @category zone of death\n * @since 2.3.0\n * @deprecated\n */\nexport function getReaderValidation(SE) {\n    var applicativeReaderValidation = getApplicativeReaderValidation(SE);\n    var altReaderValidation = getAltReaderValidation(SE);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: applicativeReaderValidation.ap,\n        of: of,\n        chain: flatMap,\n        bimap: mapBoth,\n        mapLeft: mapError,\n        alt: altReaderValidation.alt,\n        throwError: throwError\n    };\n}\n", "import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport * as chainable from './Chain';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { ask as ask_, asks as asks_, fromReaderK as fromReaderK_, tapReader as tapReader_ } from './FromReader';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as I from './IO';\nimport * as R from './Reader';\nimport * as RT from './ReaderT';\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.13.0\n */\nexport var fromReader = /*#__PURE__*/ RT.fromReader(I.Pointed);\n/**\n * @category conversions\n * @since 2.13.0\n */\nexport var fromIO = R.of;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Changes the value of the local context during the execution of the action `ma` (similar to `Contravariant`'s\n * `contramap`).\n *\n * @since 2.13.0\n */\nexport var local = R.local;\n/**\n * Less strict version of [`asksReaderIO`](#asksreaderio).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category constructors\n * @since 2.13.0\n */\nexport var asksReaderIOW = R.asksReaderW;\n/**\n * Effectfully accesses the environment.\n *\n * @category constructors\n * @since 2.13.0\n */\nexport var asksReaderIO = asksReaderIOW;\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.13.0\n */\nexport var map = /*#__PURE__*/ RT.map(I.Functor);\n/**\n * @since 2.13.0\n */\nexport var ap = \n/*#__PURE__*/ RT.ap(I.Apply);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @since 2.13.0\n */\nexport var apW = ap;\n/**\n * @category constructors\n * @since 2.13.0\n */\nexport var of = /*#__PURE__*/ RT.of(I.Pointed);\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, RT.flatMap(I.Monad));\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category sequencing\n * @since 2.13.0\n */\nexport var flattenW = \n/*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.13.0\n */\nexport var flatten = flattenW;\n/**\n * @category type lambdas\n * @since 2.13.0\n */\nexport var URI = 'ReaderIO';\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the value to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the value to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.13.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.13.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.13.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.13.0\n */\nexport var FromReader = {\n    URI: URI,\n    fromReader: fromReader\n};\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/** @internal */\nvar _FromIO = {\n    fromIO: FromIO.fromIO\n};\n/** @internal */\nvar _FromReader = {\n    fromReader: fromReader\n};\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = _.flatMapIO(_FromIO, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReader = /*#__PURE__*/ _.flatMapReader(_FromReader, _FlatMap);\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RIO from 'fp-ts/ReaderIO'\n * import * as Console from 'fp-ts/Console'\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effect = pipe(\n *   RIO.ask<string>(),\n *   RIO.tapIO((value) => Console.log(`Hello, ${value}`)),\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(effect('fp-ts')(), 'fp-ts')\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReader = /*#__PURE__*/ dual(2, tapReader_(FromReader, Chain));\n/**\n * @category lifting\n * @since 2.13.0\n */\nexport var fromIOK = /*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * Reads the current context.\n *\n * @category constructors\n * @since 2.13.0\n */\nexport var ask = /*#__PURE__*/ ask_(FromReader);\n/**\n * Projects a value from the global context in a `ReaderIO`.\n *\n * @category constructors\n * @since 2.13.0\n */\nexport var asks = /*#__PURE__*/ asks_(FromReader);\n/**\n * @category lifting\n * @since 2.13.0\n */\nexport var fromReaderK = /*#__PURE__*/ fromReaderK_(FromReader);\n/**\n * Alias of `flatMapReader`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainReaderK = flatMapReader;\n/**\n * Alias of `flatMapReader`.\n *\n * Less strict version of [`chainReaderK`](#chainreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainReaderKW = flatMapReader;\n/**\n * Alias of `tapReader`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstReaderK = tapReader;\n/**\n * Alias of `tapReader`.\n *\n * Less strict version of [`chainFirstReaderK`](#chainfirstreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstReaderKW = tapReader;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.13.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.13.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\n/**\n * @category do notation\n * @since 2.13.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category do notation\n * @since 2.13.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.13.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category do notation\n * @since 2.13.0\n */\nexport var apSW = apS;\n/**\n * @since 2.13.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.13.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(R.traverseReadonlyNonEmptyArrayWithIndex(f), R.map(I.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.13.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.13.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.13.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.13.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstW = tap;\n", "import { flow, pipe } from './function';\nexport function of(F) {\n    return function (a) { return function () { return F.of(a); }; };\n}\nexport function map(F) {\n    return function (f) { return function (fa) { return function (r) { return F.map(fa(r), f); }; }; };\n}\nexport function ap(F) {\n    return function (fa) { return function (fab) { return function (r) { return F.ap(fab(r), fa(r)); }; }; };\n}\nexport function chain(M) {\n    var flatMapM = flatMap(M);\n    return function (f) { return function (ma) { return flatMapM(ma, f); }; };\n}\n/** @internal */\nexport function flatMap(M) {\n    return function (ma, f) { return function (r) { return M.chain(ma(r), function (a) { return f(a)(r); }); }; };\n}\nexport function fromReader(F) {\n    return function (ma) { return flow(ma, F.of); };\n}\nexport function fromNaturalTransformation(nt) {\n    return function (f) { return flow(f, nt); };\n}\n/** @deprecated */\n/* istanbul ignore next */\nexport function getReaderM(M) {\n    var _ap = ap(M);\n    var _map = map(M);\n    var _chain = chain(M);\n    return {\n        map: function (fa, f) { return pipe(fa, _map(f)); },\n        ap: function (fab, fa) { return pipe(fab, _ap(fa)); },\n        of: of(M),\n        chain: function (ma, f) { return pipe(ma, _chain(f)); },\n        ask: function () { return M.of; },\n        asks: function (f) { return flow(f, M.of); },\n        local: function (ma, f) { return function (q) { return ma(f(q)); }; },\n        fromReader: fromReader(M),\n        fromM: function (ma) { return function () { return ma; }; }\n    };\n}\n", "/**\n * @since 2.3.0\n */\nimport { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { ask as ask_, asks as asks_, fromReaderK as fromReaderK_, tapReader as tapReader_ } from './FromReader';\nimport { fromTaskK as fromTaskK_, tapTask as tapTask_ } from './FromTask';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as R from './Reader';\nimport * as RT from './ReaderT';\nimport * as T from './Task';\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.3.0\n */\nexport var fromReader = /*#__PURE__*/ RT.fromReader(T.Pointed);\n/**\n * @category conversions\n * @since 2.3.0\n */\nexport var fromTask = R.of;\n/**\n * @category conversions\n * @since 2.3.0\n */\nexport var fromIO = /*#__PURE__*/ flow(T.fromIO, fromTask);\n/**\n * @category conversions\n * @since 2.13.0\n */\nexport var fromReaderIO = R.map(T.fromIO);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Changes the value of the local context during the execution of the action `ma` (similar to `Contravariant`'s\n * `contramap`).\n *\n * @since 2.3.0\n */\nexport var local = R.local;\n/**\n * Less strict version of [`asksReaderTask`](#asksreadertask).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReaderTaskW = R.asksReaderW;\n/**\n * Effectfully accesses the environment.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReaderTask = asksReaderTaskW;\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _apPar = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _apSeq = function (fab, fa) { return flatMap(fab, function (f) { return pipe(fa, map(f)); }); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.3.0\n */\nexport var map = /*#__PURE__*/ RT.map(T.Functor);\n/**\n * @since 2.3.0\n */\nexport var ap = \n/*#__PURE__*/ RT.ap(T.ApplyPar);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = ap;\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var of = /*#__PURE__*/ RT.of(T.Pointed);\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, RT.flatMap(T.Monad));\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = \n/*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.3.0\n */\nexport var flatten = flattenW;\n/**\n * @category type lambdas\n * @since 2.3.0\n */\nexport var URI = 'ReaderTask';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the value to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the value to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.3.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(ApplyPar);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.3.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(ApplyPar);\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    of: of\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplySeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromReader = {\n    URI: URI,\n    fromReader: fromReader\n};\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/** @internal */\nvar _FromIO = {\n    fromIO: FromIO.fromIO\n};\n/** @internal */\nvar _FromTask = {\n    fromTask: fromTask\n};\n/** @internal */\nvar _FromReader = {\n    fromReader: fromReader\n};\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = _.flatMapIO(_FromIO, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTask = _.flatMapTask(_FromTask, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReader = _.flatMapReader(_FromReader, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReaderIO = /*#__PURE__*/ dual(2, function (self, f) {\n    return flatMap(self, fromReaderIOK(f));\n});\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RT from 'fp-ts/ReaderTask'\n * import * as Console from 'fp-ts/Console'\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effect = pipe(\n *   RT.ask<string>(),\n *   RT.tapIO((value) => Console.log(`Hello, ${value}`)),\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effect('fp-ts')(), 'fp-ts')\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReader = /*#__PURE__*/ dual(2, tapReader_(FromReader, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RT from 'fp-ts/ReaderTask'\n * import * as T from 'fp-ts/Task'\n *\n * const effect = pipe(\n *   RT.ask<number>(),\n *   RT.tapTask((value) => T.of(value + 1)),\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effect(1)(), 1)\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapTask = /*#__PURE__*/ dual(2, tapTask_(FromTask, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReaderIO = /*#__PURE__*/ dual(2, function (self, f) {\n    return tap(self, fromReaderIOK(f));\n});\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromIOK = /*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * Reads the current context.\n *\n * @category constructors\n * @since 2.3.0\n */\nexport var ask = /*#__PURE__*/ ask_(FromReader);\n/**\n * Projects a value from the global context in a `ReaderTask`.\n *\n * @category constructors\n * @since 2.3.0\n */\nexport var asks = /*#__PURE__*/ asks_(FromReader);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromReaderK = /*#__PURE__*/ fromReaderK_(FromReader);\n/**\n * Alias of `flatMapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderK = flatMapReader;\n/**\n * Alias of `flatMapReader`.\n *\n * Less strict version of [`chainReaderK`](#chainreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderKW = flatMapReader;\n/**\n * Alias of `tapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderK = tapReader;\n/**\n * Alias of `tapReader`.\n *\n * Less strict version of [`chainFirstReaderK`](#chainfirstreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderKW = tapReader;\n/**\n * @category lifting\n * @since 2.13.0\n */\nexport var fromReaderIOK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromReaderIO(f.apply(void 0, a));\n    };\n};\n/**\n * Alias of `flatMapReaderIO`.\n *\n * Less strict version of [`chainReaderIOK`](#chainreaderiok).\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainReaderIOKW = flatMapReaderIO;\n/**\n * Alias of `flatMapReaderIO`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainReaderIOK = flatMapReaderIO;\n/**\n * Alias of `tapReaderIO`.\n *\n * Less strict version of [`chainFirstReaderIOK`](#chainfirstreaderiok).\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstReaderIOKW = tapReaderIO;\n/**\n * Alias of `tapReaderIO`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstReaderIOK = tapReaderIO;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromTaskK = /*#__PURE__*/ fromTaskK_(FromTask);\n/**\n * Alias of `flatMapTask`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainTaskK = flatMapTask;\n/**\n * Alias of `tapTask`.\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstTaskK = tapTask;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(ApplyPar);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(R.traverseReadonlyNonEmptyArrayWithIndex(f), R.map(T.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {\n    return flow(R.traverseReadonlyNonEmptyArrayWithIndex(f), R.map(T.traverseReadonlyNonEmptyArrayWithIndexSeq(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var traverseSeqArray = function (f) { return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); }); };\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.3.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.7\n */\nexport var chainW = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.3.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstW = tap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `traverseReadonlyArrayWithIndexSeq` instead.\n *\n * @category zone of death\n * @since 2.10.0\n * @deprecated\n */\nexport var sequenceSeqArray = \n/*#__PURE__*/ traverseSeqArray(identity);\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RT.Functor` instead of `RT.readerTask`\n * (where `RT` is from `import RT from 'fp-ts/ReaderTask'`)\n *\n * @category zone of death\n * @since 2.3.0\n * @deprecated\n */\nexport var readerTask = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RT.Functor` instead of `RT.readerTaskSeq`\n * (where `RT` is from `import RT from 'fp-ts/ReaderTask'`)\n *\n * @category zone of death\n * @since 2.3.0\n * @deprecated\n */\nexport var readerTaskSeq = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apSeq,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.3.0\n * @deprecated\n */\nexport var getSemigroup = \n/*#__PURE__*/ getApplySemigroup_(ApplySeq);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.3.0\n * @deprecated\n */\nexport var getMonoid = \n/*#__PURE__*/ getApplicativeMonoid(ApplicativeSeq);\n/**\n * @category zone of death\n * @since 2.4.0\n * @deprecated\n */\n/* istanbul ignore next */\nexport function run(ma, r) {\n    return ma(r)();\n}\n", "/**\n * ```ts\n * interface Task<A> {\n *   (): Promise<A>\n * }\n * ```\n *\n * `Task<A>` represents an asynchronous computation that yields a value of type `A` and **never fails**.\n * If you want to represent an asynchronous computation that may fail, please see `TaskEither`.\n *\n * @since 2.0.0\n */\nimport { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { dual, identity, pipe } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromIO = function (ma) { return function () { return Promise.resolve().then(ma); }; };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Creates a task that will complete after a time delay\n *\n * @example\n * import { sequenceT } from 'fp-ts/Apply'\n * import * as T from 'fp-ts/Task'\n * import { takeRight } from 'fp-ts/Array'\n *\n * async function test() {\n *   const log: Array<string> = []\n *   const append = (message: string): T.Task<void> =>\n *     T.fromIO(() => {\n *       log.push(message)\n *     })\n *   const fa = append('a')\n *   const fb = T.delay(20)(append('b'))\n *   const fc = T.delay(10)(append('c'))\n *   const fd = append('d')\n *   await sequenceT(T.ApplyPar)(fa, fb, fc, fd)()\n *   assert.deepStrictEqual(takeRight(2)(log), ['c', 'b'])\n * }\n *\n * test()\n *\n * @since 2.0.0\n */\nexport function delay(millis) {\n    return function (ma) { return function () {\n        return new Promise(function (resolve) {\n            setTimeout(function () {\n                Promise.resolve().then(ma).then(resolve);\n            }, millis);\n        });\n    }; };\n}\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _apPar = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _apSeq = function (fab, fa) { return flatMap(fab, function (f) { return pipe(fa, map(f)); }); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return function () {\n    return Promise.resolve().then(fa).then(f);\n}; }; };\n/**\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) { return function () {\n    return Promise.all([Promise.resolve().then(fab), Promise.resolve().then(fa)]).then(function (_a) {\n        var f = _a[0], a = _a[1];\n        return f(a);\n    });\n}; }; };\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = function (a) { return function () { return Promise.resolve(a); }; };\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    return function () {\n        return Promise.resolve()\n            .then(ma)\n            .then(function (a) { return f(a)(); });\n    };\n});\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Task';\n/**\n * Monoid returning the first completed task.\n *\n * Note: uses `Promise.race` internally.\n *\n * @example\n * import * as T from 'fp-ts/Task'\n *\n * async function test() {\n *   const S = T.getRaceMonoid<string>()\n *   const fa = T.delay(20)(T.of('a'))\n *   const fb = T.delay(10)(T.of('b'))\n *   assert.deepStrictEqual(await S.concat(fa, fb)(), 'b')\n * }\n *\n * test()\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getRaceMonoid() {\n    return {\n        concat: function (x, y) { return function () { return Promise.race([Promise.resolve().then(x), Promise.resolve().then(y)]); }; },\n        empty: never\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the value to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the value to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(ApplyPar);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(ApplyPar);\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    of: of\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplySeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var fromTask = identity;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/** @internal */\nvar _FromIO = {\n    fromIO: FromIO.fromIO\n};\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = _.flatMapIO(_FromIO, _FlatMap);\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as T from 'fp-ts/Task'\n * import * as Console from 'fp-ts/Console'\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effect = pipe(\n *   T.of('fp-ts'),\n *   T.tapIO((value) => Console.log(`Hello, ${value}`)),\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effect(), 'fp-ts')\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromIOK = \n/*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * A `Task` that never completes.\n *\n * @since 2.0.0\n */\nexport var never = function () { return new Promise(function (_) { return undefined; }); };\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(ApplyPar);\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        return function () {\n            return Promise.all(as.map(function (a, i) { return Promise.resolve().then(function () { return f(i, a)(); }); }));\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {\n    return function (as) {\n        return function () {\n            return _.tail(as).reduce(function (acc, a, i) {\n                return acc.then(function (bs) {\n                    return Promise.resolve()\n                        .then(f(i + 1, a))\n                        .then(function (b) {\n                        bs.push(b);\n                        return bs;\n                    });\n                });\n            }, Promise.resolve()\n                .then(f(0, _.head(as)))\n                .then(_.singleton));\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArray = function (f) {\n    return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceSeqArray = \n/*#__PURE__*/ traverseSeqArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.task`\n * (where `T` is from `import T from 'fp-ts/Task'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var task = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.taskSeq`\n * (where `T` is from `import T from 'fp-ts/Task'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var taskSeq = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apSeq,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = /*#__PURE__*/ getApplySemigroup_(ApplySeq);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * Lift a monoid into 'Task', the inner values are concatenated using the provided `Monoid`.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getMonoid = /*#__PURE__*/ getApplicativeMonoid(ApplicativeSeq);\n", "import { getApplicativeMonoid } from './Applicative';\nimport { ap as ap_, apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { compact as compact_, separate as separate_ } from './Compactable';\nimport * as E from './Either';\nimport * as ET from './EitherT';\nimport { filter as filter_, filterMap as filterMap_, partition as partition_, partitionMap as partitionMap_ } from './Filterable';\nimport { chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromEitherK as fromEitherK_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_, tapEither as tapEither_ } from './FromEither';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { ask as ask_, asks as asks_, fromReaderK as fromReaderK_, tapReader as tapReader_ } from './FromReader';\nimport { fromTaskK as fromTaskK_, tapTask as tapTask_ } from './FromTask';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as R from './Reader';\nimport * as RT from './ReaderTask';\nimport * as T from './Task';\nimport * as TE from './TaskEither';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromTaskEither = R.of;\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var left = /*#__PURE__*/ ET.left(RT.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var right = /*#__PURE__*/ ET.right(RT.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightTask = /*#__PURE__*/ flow(TE.rightTask, fromTaskEither);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftTask = /*#__PURE__*/ flow(TE.leftTask, fromTaskEither);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightReader = function (ma) {\n    return flow(ma, TE.right);\n};\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftReader = function (me) {\n    return flow(me, TE.left);\n};\n/**\n * @category constructors\n * @since 2.5.0\n */\nexport var rightReaderTask = \n/*#__PURE__*/ ET.rightF(RT.Functor);\n/**\n * @category constructors\n * @since 2.5.0\n */\nexport var leftReaderTask = \n/*#__PURE__*/ ET.leftF(RT.Functor);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightIO = /*#__PURE__*/ flow(TE.rightIO, fromTaskEither);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftIO = /*#__PURE__*/ flow(TE.leftIO, fromTaskEither);\n/**\n * @category constructors\n * @since 2.13.0\n */\nexport var rightReaderIO = function (ma) {\n    return flow(ma, TE.rightIO);\n};\n/**\n * @category constructors\n * @since 2.13.0\n */\nexport var leftReaderIO = function (me) {\n    return flow(me, TE.leftIO);\n};\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = RT.of;\n/**\n * @category conversions\n * @since 2.11.0\n */\nexport var fromReader = rightReader;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromIO = rightIO;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromTask = rightTask;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromIOEither = /*#__PURE__*/ flow(TE.fromIOEither, fromTaskEither);\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromReaderEither = function (ma) {\n    return flow(ma, TE.fromEither);\n};\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = /*#__PURE__*/ ET.match(RT.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = match;\n/**\n * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`ReaderTask`).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchE = /*#__PURE__*/ ET.matchE(RT.Chain);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchEW = matchE;\n/**\n * Alias of [`matchEW`](#matchew).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchEW;\n/**\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = /*#__PURE__*/ ET.getOrElse(RT.Monad);\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = getOrElse;\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var toUnion = /*#__PURE__*/ ET.toUnion(RT.Functor);\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var fromNullable = \n/*#__PURE__*/ ET.fromNullable(RT.Pointed);\n/**\n * Use `liftNullable`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var fromNullableK = /*#__PURE__*/ ET.fromNullableK(RT.Pointed);\n/**\n * Use `flatMapNullable`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainNullableK = /*#__PURE__*/ ET.chainNullableK(RT.Monad);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Changes the value of the local context during the execution of the action `ma` (similar to `Contravariant`'s\n * `contramap`).\n *\n * @since 2.0.0\n */\nexport var local = R.local;\n/**\n * Less strict version of [`asksReaderTaskEither`](#asksreadertaskeither).\n *\n * The `W` suffix (short for **W**idening) means that the environment types will be merged.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReaderTaskEitherW = R.asksReaderW;\n/**\n * Effectfully accesses the environment.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksReaderTaskEither = asksReaderTaskEitherW;\n/**\n * @category error handling\n * @since 2.0.0\n */\nexport var orElse = /*#__PURE__*/ ET.orElse(RT.Monad);\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the return types will be merged.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var orElseW = orElse;\n/**\n * Returns an effect that effectfully \"peeks\" at the failure of this effect.\n *\n * @category error handling\n * @since 2.15.0\n */\nexport var tapError = /*#__PURE__*/ dual(2, ET.tapError(RT.Monad));\n/**\n * @category error handling\n * @since 2.11.0\n */\nexport var orLeft = /*#__PURE__*/ ET.orLeft(RT.Monad);\n/**\n * @category error handling\n * @since 2.16.6\n */\nexport var orLeftW = orLeft;\n/**\n * @since 2.0.0\n */\nexport var swap = /*#__PURE__*/ ET.swap(RT.Functor);\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromIOEitherK = function (f) { return flow(f, fromIOEither); };\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromTaskEitherK = function (f) { return flow(f, fromTaskEither); };\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromReaderEitherK = function (f) { return flow(f, fromReaderEither); };\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _apPar = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _apSeq = function (fab, fa) { return flatMap(fab, function (f) { return pipe(fa, map(f)); }); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = \n/*#__PURE__*/ ET.map(RT.Functor);\n/**\n * Returns a `ReaderTaskEither` whose failure and success channels have been mapped by the specified pair of functions, `f` and `g`.\n *\n * @example\n * import * as ReaderTaskEither from 'fp-ts/ReaderTaskEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n * const g = (n: number) => n * 2\n *\n * async function test() {\n *   assert.deepStrictEqual(await ReaderTaskEither.mapBoth(ReaderTaskEither.right(1), f, g)({})(), Either.right(2))\n *   assert.deepStrictEqual(await ReaderTaskEither.mapBoth(ReaderTaskEither.left('err'), f, g)({})(), Either.left(new Error('err')))\n * }\n *\n * test()\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapBoth = /*#__PURE__*/ dual(3, ET.mapBoth(RT.Functor));\n/**\n * Alias of `mapBoth`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var bimap = mapBoth;\n/**\n * Returns a `ReaderTaskEither` with its error channel mapped using the specified function.\n *\n * @example\n * import * as ReaderTaskEither from 'fp-ts/ReaderTaskEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n *\n * async function test() {\n *   assert.deepStrictEqual(await ReaderTaskEither.mapError(ReaderTaskEither.right(1), f)({})(), Either.right(1))\n *   assert.deepStrictEqual(await ReaderTaskEither.mapError(ReaderTaskEither.left('err'), f)({})(), Either.left(new Error('err')))\n * }\n *\n * test()\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapError = /*#__PURE__*/ dual(2, ET.mapError(RT.Functor));\n/**\n * Alias of `mapError`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var mapLeft = mapError;\n/**\n * @since 2.0.0\n */\nexport var ap = /*#__PURE__*/ ET.ap(RT.ApplyPar);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = ap;\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, ET.flatMap(RT.Monad));\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = /*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = /*#__PURE__*/ ET.alt(RT.Monad);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the environment, the error and the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = alt;\n/**\n * @since 2.0.0\n */\nexport var throwError = left;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'ReaderTaskEither';\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var C = E.getCompactable(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: compact_(RT.Functor, C),\n        separate: separate_(RT.Functor, C, E.Functor)\n    };\n};\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport function getFilterable(M) {\n    var F = E.getFilterable(M);\n    var C = getCompactable(M);\n    var filter = filter_(RT.Functor, F);\n    var filterMap = filterMap_(RT.Functor, F);\n    var partition = partition_(RT.Functor, F);\n    var partitionMap = partitionMap_(RT.Functor, F);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: C.compact,\n        separate: C.separate,\n        filter: function (fa, predicate) { return pipe(fa, filter(predicate)); },\n        filterMap: function (fa, f) { return pipe(fa, filterMap(f)); },\n        partition: function (fa, predicate) { return pipe(fa, partition(predicate)); },\n        partitionMap: function (fa, f) { return pipe(fa, partitionMap(f)); }\n    };\n}\n/**\n * The default [`ApplicativePar`](#applicativepar) instance returns the first error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * See [`getApplicativeValidation`](./Either.ts.html#getapplicativevalidation).\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getApplicativeReaderTaskValidation(A, S) {\n    var ap = ap_(R.Apply, TE.getApplicativeTaskValidation(A, S));\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return pipe(fab, ap(fa)); },\n        of: of\n    };\n}\n/**\n * The default [`Alt`](#alt) instance returns the last error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * See [`getAltValidation`](./Either.ts.html#getaltvalidation).\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getAltReaderTaskValidation(S) {\n    var alt = ET.altValidation(RT.Monad, S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        alt: function (fa, that) { return pipe(fa, alt(that)); }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Right` value of this `ReaderTaskEither` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Right` value of this `ReaderTaskEither` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(ApplyPar);\n/**\n * Less strict version of [`apFirst`](#apfirst).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apFirstW = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(ApplyPar);\n/**\n * Less strict version of [`apSecond`](#apsecond).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apSecondW = apSecond;\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    of: of\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplySeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromReader = {\n    URI: URI,\n    fromReader: fromReader\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as RTE from 'fp-ts/ReaderTaskEither'\n *\n * const checkString = (value: string) => pipe(\n *   RTE.ask<number>(),\n *   RTE.tapEither((minLength) => value.length > minLength ? E.right('ok') : E.left('error'))\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await checkString('')(2)(), E.left('error'))\n *   assert.deepStrictEqual(await checkString('fp-ts')(2)(), E.right(2))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as RTE from 'fp-ts/ReaderTaskEither'\n * import * as E from 'fp-ts/Either'\n * import * as Console from 'fp-ts/Console'\n *\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effect = RTE.tapIO(\n *   RTE.ask<string>(),\n *   (value) => Console.log(`Hello, ${value}`)\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effect('fp-ts')(), E.of('fp-ts'))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as RTE from 'fp-ts/ReaderTaskEither'\n * import * as E from 'fp-ts/Either'\n * import * as T from 'fp-ts/Task'\n *\n *\n * const effect = RTE.tapTask(\n *   RTE.ask<number>(),\n *   (value) => T.of(value + 1)\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effect(1)(), E.of(1))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapTask = /*#__PURE__*/ dual(2, tapTask_(FromTask, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReader = /*#__PURE__*/ dual(2, tapReader_(FromReader, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReaderEither = /*#__PURE__*/ dual(2, function (self, f) { return tap(self, fromReaderEitherK(f)); });\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapTaskEither = /*#__PURE__*/ dual(2, function (self, f) { return tap(self, fromTaskEitherK(f)); });\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReaderTask = /*#__PURE__*/ dual(2, function (self, f) { return tap(self, fromReaderTaskK(f)); });\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReaderIO = /*#__PURE__*/ dual(2, function (self, f) {\n    return tap(self, fromReaderIOK(f));\n});\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * Reads the current context.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var ask = /*#__PURE__*/ ask_(FromReader);\n/**\n * Projects a value from the global context in a `ReaderEither`.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var asks = /*#__PURE__*/ asks_(FromReader);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromReaderK = /*#__PURE__*/ fromReaderK_(FromReader);\n/**\n * Alias of `tapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderK = tapReader;\n/**\n * Alias of `tapReader`.\n *\n * Less strict version of [`chainFirstReaderK`](#chainfirstreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderKW = tapReader;\n/**\n * Alias of `tapReaderEither`.\n *\n * Less strict version of [`chainFirstReaderEitherK`](#chainfirstreadereitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderEitherKW = tapReaderEither;\n/**\n * Alias of `tapReaderEither`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderEitherK = tapReaderEither;\n/**\n * Alias of `tapTaskEither`.\n *\n * Less strict version of [`chainFirstTaskEitherK`](#chainfirsttaskeitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstTaskEitherKW = tapTaskEither;\n/**\n * Alias of `tapTaskEither`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstTaskEitherK = tapTaskEither;\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromReaderTaskK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return rightReaderTask(f.apply(void 0, a));\n    };\n};\n/**\n * Alias of `tapReaderTask`.\n *\n * Less strict version of [`chainFirstReaderTaskK`](#chainfirstreadertaskk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderTaskKW = tapReaderTask;\n/**\n * Alias of `tapReaderTask`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderTaskK = tapReaderTask;\n/**\n * @category lifting\n * @since 2.13.0\n */\nexport var fromReaderIOK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return rightReaderIO(f.apply(void 0, a));\n    };\n};\n/**\n * Alias of `tapReaderIO`.\n *\n * Less strict version of [`chainFirstReaderIOK`](#chainfirstreaderiok).\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstReaderIOKW = tapReaderIO;\n/**\n * Alias of `tapReaderIO`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainFirstReaderIOK = tapReaderIO;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromOption = \n/*#__PURE__*/ fromOption_(FromEither);\n/**\n * Use `liftOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var fromOptionK = /*#__PURE__*/ fromOptionK_(FromEither);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainOptionK = \n/*#__PURE__*/ chainOptionK_(FromEither, Chain);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.13.2\n */\nexport var chainOptionKW = chainOptionK;\n/** @internal */\nvar _FromEither = {\n    fromEither: FromEither.fromEither\n};\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftNullable = /*#__PURE__*/ _.liftNullable(_FromEither);\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftOption = /*#__PURE__*/ _.liftOption(_FromEither);\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/** @internal */\nvar _FromIO = {\n    fromIO: fromIO\n};\n/** @internal */\nvar _FromTask = {\n    fromTask: fromTask\n};\n/** @internal */\nvar _FromReader = {\n    fromReader: fromReader\n};\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapNullable = /*#__PURE__*/ _.flatMapNullable(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapOption = /*#__PURE__*/ _.flatMapOption(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapEither = /*#__PURE__*/ _.flatMapEither(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTaskEither = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, fromTaskEitherK(f)); });\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReaderTask = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, fromReaderTaskK(f)); });\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = /*#__PURE__*/ _.flatMapIO(_FromIO, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTask = /*#__PURE__*/ _.flatMapTask(_FromTask, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReader = /*#__PURE__*/ _.flatMapReader(_FromReader, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReaderIO = /*#__PURE__*/ dual(2, function (self, f) {\n    return flatMap(self, fromReaderIOK(f));\n});\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIOEither = /*#__PURE__*/ dual(2, function (self, f) {\n    return flatMap(self, fromIOEitherK(f));\n});\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReaderEither = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, fromReaderEitherK(f)); });\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainEitherK = flatMapEither;\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainEitherKW = flatMapEither;\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * Alias of `tapEither`.\n *\n * Less strict version of [`chainFirstEitherK`](#chainfirsteitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherKW = tapEither;\n/**\n * Alias of `flatMapTaskEither`.\n *\n * Less strict version of [`chainTaskEitherK`](#chaintaskeitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainTaskEitherKW = flatMapTaskEither;\n/**\n * Alias of `flatMapTaskEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainTaskEitherK = flatMapTaskEither;\n/**\n * Alias of `flatMapReaderTask`.\n *\n * Less strict version of [`chainReaderTaskK`](#chainreadertaskk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderTaskKW = flatMapReaderTask;\n/**\n * Alias of `flatMapReaderTask`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderTaskK = flatMapReaderTask;\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterOrElse = /*#__PURE__*/ filterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category filtering\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromIOK = /*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromTaskK = /*#__PURE__*/ fromTaskK_(FromTask);\n/**\n * Alias of `flatMapTask`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainTaskK = flatMapTask;\n/**\n * Alias of `tapTask`.\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstTaskK = tapTask;\n/**\n * Alias of `flatMapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderK = flatMapReader;\n/**\n * Alias of `flatMapReader`.\n *\n * Less strict version of [`chainReaderK`](#chainreaderk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderKW = flatMapReader;\n/**\n * Alias of `flatMapReaderIO`.\n *\n * Less strict version of [`chainReaderIOK`](#chainreaderiok).\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainReaderIOKW = flatMapReaderIO;\n/**\n * Alias of `flatMapReaderIO`.\n *\n * @category legacy\n * @since 2.13.0\n */\nexport var chainReaderIOK = flatMapReaderIO;\n/**\n * Alias of `flatMapIOEither`.\n *\n * Less strict version of [`chainIOEitherK`](#chainioeitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainIOEitherKW = flatMapIOEither;\n/**\n * Alias of `flatMapIOEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainIOEitherK = flatMapIOEither;\n/**\n * Alias of `flatMapReaderEither`.\n *\n * Less strict version of [`chainReaderEitherK`](#chainreadereitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderEitherKW = flatMapReaderEither;\n/**\n * Alias of `flatMapReaderEither`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderEitherK = flatMapReaderEither;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Make sure that a resource is cleaned up in the event of an exception (\\*). The release action is called regardless of\n * whether the body action throws (\\*) or returns.\n *\n * (\\*) i.e. returns a `Left`\n *\n * @since 2.0.4\n */\nexport function bracket(acquire, use, release) {\n    return bracketW(acquire, use, release);\n}\n/**\n * Less strict version of [`bracket`](#bracket).\n *\n * @since 2.12.0\n */\nexport function bracketW(acquire, use, release) {\n    return function (r) {\n        return TE.bracketW(acquire(r), function (a) { return use(a)(r); }, function (a, e) { return release(a, e)(r); });\n    };\n}\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(ApplyPar);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(R.traverseReadonlyNonEmptyArrayWithIndex(f), R.map(TE.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {\n    return flow(R.traverseReadonlyNonEmptyArrayWithIndex(f), R.map(TE.traverseReadonlyNonEmptyArrayWithIndexSeq(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = /*#__PURE__*/ traverseArray(identity);\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArray = function (f) {\n    return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceSeqArray = /*#__PURE__*/ traverseSeqArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.8.0\n */\nexport var chainFirstW = tap;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirst = tapError;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirstW = tapError;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RTE.Functor` instead of `RTE.readerTaskEither`\n * (where `RTE` is from `import RTE from 'fp-ts/ReaderTaskEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var readerTaskEither = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    alt: _alt,\n    bimap: mapBoth,\n    mapLeft: mapError,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RTE.Functor` instead of `RTE.readerTaskEitherSeq`\n * (where `RTE` is from `import RTE from 'fp-ts/ReaderTaskEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var readerTaskEitherSeq = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apSeq,\n    chain: flatMap,\n    alt: _alt,\n    bimap: mapBoth,\n    mapLeft: mapError,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/ getApplySemigroup_(ApplySeq);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/ getApplicativeMonoid(ApplicativeSeq);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = function (S) {\n    return getApplySemigroup_(RT.ApplySeq)(E.getSemigroup(S));\n};\n/**\n * Use [`getApplicativeReaderTaskValidation`](#getapplicativereadertaskvalidation) and [`getAltReaderTaskValidation`](#getaltreadertaskvalidation) instead.\n *\n * @category instances\n * @since 2.3.0\n * @deprecated\n */\nexport function getReaderTaskValidation(SE) {\n    var applicativeReaderTaskValidation = getApplicativeReaderTaskValidation(T.ApplicativePar, SE);\n    var altReaderTaskValidation = getAltReaderTaskValidation(SE);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        of: of,\n        chain: flatMap,\n        bimap: mapBoth,\n        mapLeft: mapError,\n        ap: applicativeReaderTaskValidation.ap,\n        alt: altReaderTaskValidation.alt,\n        fromIO: fromIO,\n        fromTask: fromTask,\n        throwError: throwError\n    };\n}\n/**\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\n/* istanbul ignore next */\nexport function run(ma, r) {\n    return ma(r)();\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { getApplicativeMonoid } from './Applicative';\nimport { ap as ap_, apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport * as chainable from './Chain';\nimport { compact as compact_, separate as separate_ } from './Compactable';\nimport * as E from './Either';\nimport * as ET from './EitherT';\nimport { filter as filter_, filterMap as filterMap_, partition as partition_, partitionMap as partitionMap_ } from './Filterable';\nimport { chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromEitherK as fromEitherK_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_, tapEither as tapEither_ } from './FromEither';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { fromTaskK as fromTaskK_, tapTask as tapTask_ } from './FromTask';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as T from './Task';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var left = /*#__PURE__*/ ET.left(T.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var right = /*#__PURE__*/ ET.right(T.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightTask = /*#__PURE__*/ ET.rightF(T.Functor);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftTask = /*#__PURE__*/ ET.leftF(T.Functor);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightIO = /*#__PURE__*/ flow(T.fromIO, rightTask);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftIO = /*#__PURE__*/ flow(T.fromIO, leftTask);\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.7.0\n */\nexport var fromIO = rightIO;\n/**\n * @category conversions\n * @since 2.7.0\n */\nexport var fromTask = rightTask;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = T.of;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromIOEither = T.fromIO;\n/**\n * @category conversions\n * @since 2.11.0\n */\nexport var fromTaskOption = function (onNone) {\n    return T.map(E.fromOption(onNone));\n};\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = \n/*#__PURE__*/ ET.match(T.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = match;\n/**\n * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`Task`).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchE = /*#__PURE__*/ ET.matchE(T.Monad);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchEW = matchE;\n/**\n * Alias of [`matchEW`](#matchew).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchEW;\n/**\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = \n/*#__PURE__*/ ET.getOrElse(T.Monad);\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = getOrElse;\n/**\n * Transforms a `Promise` that may reject to a `Promise` that never rejects and returns an `Either` instead.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import { left, right } from 'fp-ts/Either'\n * import { tryCatch } from 'fp-ts/TaskEither'\n *\n * tryCatch(() => Promise.resolve(1), String)().then(result => {\n *   assert.deepStrictEqual(result, right(1))\n * })\n * tryCatch(() => Promise.reject('error'), String)().then(result => {\n *   assert.deepStrictEqual(result, left('error'))\n * })\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f, onRejected) {\n    return function () { return __awaiter(void 0, void 0, void 0, function () {\n        var reason_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    return [4 /*yield*/, f().then(_.right)];\n                case 1: return [2 /*return*/, _a.sent()];\n                case 2:\n                    reason_1 = _a.sent();\n                    return [2 /*return*/, _.left(onRejected(reason_1))];\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); };\n};\n/**\n * Converts a function returning a `Promise` to one returning a `TaskEither`.\n *\n * @category interop\n * @since 2.5.0\n */\nexport var tryCatchK = function (f, onRejected) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return tryCatch(function () { return f.apply(void 0, a); }, onRejected);\n    };\n};\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var toUnion = /*#__PURE__*/ ET.toUnion(T.Functor);\n/**\n * @category conversions\n * @since 2.12.0\n */\nexport var fromNullable = /*#__PURE__*/ ET.fromNullable(T.Pointed);\n/**\n * Use `liftNullable`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var fromNullableK = /*#__PURE__*/ ET.fromNullableK(T.Pointed);\n/**\n * Use `flatMapNullable`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainNullableK = \n/*#__PURE__*/ ET.chainNullableK(T.Monad);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Returns `ma` if is a `Right` or the value returned by `onLeft` otherwise.\n *\n * See also [alt](#alt).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as TE from 'fp-ts/TaskEither'\n *\n * async function test() {\n *   const errorHandler = TE.orElse((error: string) => TE.right(`recovering from ${error}...`))\n *   assert.deepStrictEqual(await pipe(TE.right('ok'), errorHandler)(), E.right('ok'))\n *   assert.deepStrictEqual(await pipe(TE.left('ko'), errorHandler)(), E.right('recovering from ko...'))\n * }\n *\n * test()\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var orElse = \n/*#__PURE__*/ ET.orElse(T.Monad);\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var orElseW = orElse;\n/**\n * Returns an effect that effectfully \"peeks\" at the failure of this effect.\n *\n * @category error handling\n * @since 2.15.0\n */\nexport var tapError = /*#__PURE__*/ dual(2, ET.tapError(T.Monad));\n/**\n * @category error handling\n * @since 2.12.0\n */\nexport var orElseFirstIOK = function (onLeft) { return tapError(fromIOK(onLeft)); };\n/**\n * @category error handling\n * @since 2.12.0\n */\nexport var orElseFirstTaskK = function (onLeft) { return tapError(fromTaskK(onLeft)); };\n/**\n * @category error handling\n * @since 2.11.0\n */\nexport var orLeft = \n/*#__PURE__*/ ET.orLeft(T.Monad);\n/**\n * @since 2.0.0\n */\nexport var swap = /*#__PURE__*/ ET.swap(T.Functor);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromTaskOptionK = function (onNone) {\n    var from = fromTaskOption(onNone);\n    return function (f) { return flow(f, from); };\n};\n/**\n * Use `flatMapTaskOption`.\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category legacy\n * @since 2.12.3\n */\nexport var chainTaskOptionKW = function (onNone) {\n    return function (f) {\n        return function (ma) {\n            return flatMap(ma, fromTaskOptionK(onNone)(f));\n        };\n    };\n};\n/**\n * Use `flatMapTaskOption`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainTaskOptionK = chainTaskOptionKW;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromIOEitherK = function (f) { return flow(f, fromIOEither); };\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _apPar = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _apSeq = function (fab, fa) { return flatMap(fab, function (f) { return pipe(fa, map(f)); }); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = /*#__PURE__*/ ET.map(T.Functor);\n/**\n * Returns a `TaskEither` whose failure and success channels have been mapped by the specified pair of functions, `f` and `g`.\n *\n * @example\n * import * as TaskEither from 'fp-ts/TaskEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n * const g = (n: number) => n * 2\n *\n * async function test() {\n *   assert.deepStrictEqual(await TaskEither.mapBoth(TaskEither.right(1), f, g)(), Either.right(2))\n *   assert.deepStrictEqual(await TaskEither.mapBoth(TaskEither.left('err'), f, g)(), Either.left(new Error('err')))\n * }\n *\n * test()\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapBoth = /*#__PURE__*/ dual(3, ET.mapBoth(T.Functor));\n/**\n * Alias of `mapBoth`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var bimap = mapBoth;\n/**\n * Returns a `TaskEither` with its error channel mapped using the specified function.\n *\n * @example\n * import * as TaskEither from 'fp-ts/TaskEither'\n * import * as Either from 'fp-ts/Either'\n *\n * const f = (s: string) => new Error(s)\n *\n * async function test() {\n *   assert.deepStrictEqual(await TaskEither.mapError(TaskEither.right(1), f)(), Either.right(1))\n *   assert.deepStrictEqual(await TaskEither.mapError(TaskEither.left('err'), f)(), Either.left(new Error('err')))\n * }\n *\n * test()\n *\n * @category error handling\n * @since 2.16.0\n */\nexport var mapError = /*#__PURE__*/ dual(2, ET.mapError(T.Functor));\n/**\n * Alias of `mapError`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var mapLeft = mapError;\n/**\n * @since 2.0.0\n */\nexport var ap = \n/*#__PURE__*/ ET.ap(T.ApplyPar);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = ap;\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, ET.flatMap(T.Monad));\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = \n/*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `TaskEither` returns `fa` if is a `Right` or the value returned by `that` otherwise.\n *\n * See also [orElse](#orelse).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as TE from 'fp-ts/TaskEither'\n *\n * async function test() {\n *   assert.deepStrictEqual(\n *     await pipe(\n *       TE.right(1),\n *       TE.alt(() => TE.right(2))\n *     )(),\n *     E.right(1)\n *   )\n *   assert.deepStrictEqual(\n *     await pipe(\n *       TE.left('a'),\n *       TE.alt(() => TE.right(2))\n *     )(),\n *     E.right(2)\n *   )\n *   assert.deepStrictEqual(\n *     await pipe(\n *       TE.left('a'),\n *       TE.alt(() => TE.left('b'))\n *     )(),\n *     E.left('b')\n *   )\n * }\n *\n * test()\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = \n/*#__PURE__*/ ET.alt(T.Monad);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the error and the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = alt;\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = right;\n/**\n * @since 2.7.0\n */\nexport var throwError = left;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'TaskEither';\n/**\n * The default [`ApplicativePar`](#applicativepar) instance returns the first error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/Semigroup'\n * import * as string from 'fp-ts/string'\n * import * as T from 'fp-ts/Task'\n * import * as TE from 'fp-ts/TaskEither'\n *\n * interface User {\n *   readonly id: string\n *   readonly name: string\n * }\n *\n * const remoteDatabase: ReadonlyArray<User> = [\n *   { id: 'id1', name: 'John' },\n *   { id: 'id2', name: 'Mary' },\n *   { id: 'id3', name: 'Joey' }\n * ]\n *\n * const fetchUser = (id: string): TE.TaskEither<string, User> =>\n *   pipe(\n *     remoteDatabase,\n *     RA.findFirst((user) => user.id === id),\n *     TE.fromOption(() => `${id} not found`)\n *   )\n *\n * async function test() {\n *   assert.deepStrictEqual(\n *     await pipe(['id4', 'id5'], RA.traverse(TE.ApplicativePar)(fetchUser))(),\n *     E.left('id4 not found') // <= first error\n *   )\n *\n *   const Applicative = TE.getApplicativeTaskValidation(\n *     T.ApplyPar,\n *     pipe(string.Semigroup, S.intercalate(', '))\n *   )\n *\n *   assert.deepStrictEqual(\n *     await pipe(['id4', 'id5'], RA.traverse(Applicative)(fetchUser))(),\n *     E.left('id4 not found, id5 not found') // <= all errors\n *   )\n * }\n *\n * test()\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getApplicativeTaskValidation(A, S) {\n    var ap = ap_(A, E.getApplicativeValidation(S));\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return pipe(fab, ap(fa)); },\n        of: of\n    };\n}\n/**\n * The default [`Alt`](#alt) instance returns the last error, if you want to\n * get all errors you need to provide a way to concatenate them via a `Semigroup`.\n *\n * See [`getAltValidation`](./Either.ts.html#getaltvalidation).\n *\n * @category error handling\n * @since 2.7.0\n */\nexport function getAltTaskValidation(S) {\n    var alt = ET.altValidation(T.Monad, S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        alt: function (fa, that) { return pipe(fa, alt(that)); }\n    };\n}\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var C = E.getCompactable(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: compact_(T.Functor, C),\n        separate: separate_(T.Functor, C, E.Functor)\n    };\n};\n/**\n * @category filtering\n * @since 2.1.0\n */\nexport function getFilterable(M) {\n    var F = E.getFilterable(M);\n    var C = getCompactable(M);\n    var filter = filter_(T.Functor, F);\n    var filterMap = filterMap_(T.Functor, F);\n    var partition = partition_(T.Functor, F);\n    var partitionMap = partitionMap_(T.Functor, F);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: C.compact,\n        separate: C.separate,\n        filter: function (fa, predicate) { return pipe(fa, filter(predicate)); },\n        filterMap: function (fa, f) { return pipe(fa, filterMap(f)); },\n        partition: function (fa, predicate) { return pipe(fa, partition(predicate)); },\n        partitionMap: function (fa, f) { return pipe(fa, partitionMap(f)); }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Right` value of this `TaskEither` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Right` value of this `TaskEither` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(ApplyPar);\n/**\n * Less strict version of [`apFirst`](#apfirst).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apFirstW = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(ApplyPar);\n/**\n * Less strict version of [`apSecond`](#apsecond).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apSecondW = apSecond;\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    of: of\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplySeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: flatMap,\n    of: of,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as TE from 'fp-ts/TaskEither'\n *\n * const checkString = (value: string) => pipe(\n *   TE.of(value),\n *   TE.tapEither(() => value.length > 0 ? E.right('ok') : E.left('error'))\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await checkString('')(), E.left('error'))\n *   assert.deepStrictEqual(await checkString('fp-ts')(), E.right('fp-ts'))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as TE from 'fp-ts/TaskEither'\n * import * as E from 'fp-ts/Either'\n * import * as Console from 'fp-ts/Console'\n *\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effectA = TE.tapIO(\n *   TE.of(1),\n *   (value) => Console.log(`Hello, ${value}`)\n * )\n *\n * // No output to the stdout\n * const effectB = pipe(\n *   TE.left('error'),\n *   TE.tapIO((value) => Console.log(`Hello, ${value}`))\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effectA(), E.of(1))\n *   assert.deepStrictEqual(await effectB(), E.left('error'))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as TE from 'fp-ts/TaskEither'\n * import * as T from 'fp-ts/Task'\n * import * as E from 'fp-ts/Either'\n *\n *\n * const effect = TE.tapIO(\n *   TE.of(1),\n *   (value) => T.of(value + 1)\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effect(), E.of(1))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapTask = /*#__PURE__*/ dual(2, tapTask_(FromTask, Chain));\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromOption = \n/*#__PURE__*/ fromOption_(FromEither);\n/**\n * Use `liftOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var fromOptionK = \n/*#__PURE__*/ fromOptionK_(FromEither);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainOptionK = /*#__PURE__*/ chainOptionK_(FromEither, Chain);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.13.2\n */\nexport var chainOptionKW = chainOptionK;\n/** @internal */\nvar _FromEither = {\n    fromEither: FromEither.fromEither\n};\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftNullable = /*#__PURE__*/ _.liftNullable(_FromEither);\n/**\n * @category lifting\n * @since 2.15.0\n */\nexport var liftOption = /*#__PURE__*/ _.liftOption(_FromEither);\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/** @internal */\nvar _FromIO = {\n    fromIO: FromIO.fromIO\n};\n/** @internal */\nvar _FromTask = {\n    fromTask: fromTask\n};\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapNullable = /*#__PURE__*/ _.flatMapNullable(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapOption = /*#__PURE__*/ _.flatMapOption(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapEither = /*#__PURE__*/ _.flatMapEither(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.15.0\n */\nexport var flatMapIO = /*#__PURE__*/ _.flatMapIO(_FromIO, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTask = /*#__PURE__*/ _.flatMapTask(_FromTask, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIOEither = /*#__PURE__*/ dual(2, function (self, f) {\n    return flatMap(self, fromIOEitherK(f));\n});\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTaskOption = /*#__PURE__*/ dual(3, function (self, f, onNone) {\n    return flatMap(self, function (a) { return fromTaskOption(function () { return onNone(a); })(f(a)); });\n});\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainEitherK = flatMapEither;\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainEitherKW = flatMapEither;\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * Alias of `tapEither`.\n *\n * Less strict version of [`chainFirstEitherK`](#chainfirsteitherk).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherKW = tapEither;\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterOrElse = /*#__PURE__*/ filterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category filtering\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromIOK = /*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromTaskK = /*#__PURE__*/ fromTaskK_(FromTask);\n/**\n * Alias of `flatMapTask`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainTaskK = flatMapTask;\n/**\n * Alias of `tapTask`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstTaskK = tapTask;\n/**\n * Alias of `flatMapIOEither`.\n *\n * Less strict version of [`chainIOEitherK`](#chainioeitherk).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainIOEitherKW = flatMapIOEither;\n/**\n * Alias of `flatMapIOEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainIOEitherK = flatMapIOEither;\nexport function taskify(f) {\n    return function () {\n        var args = Array.prototype.slice.call(arguments);\n        return function () {\n            return new Promise(function (resolve) {\n                var cbResolver = function (e, r) { return (e != null ? resolve(_.left(e)) : resolve(_.right(r))); };\n                f.apply(null, args.concat(cbResolver));\n            });\n        };\n    };\n}\n/**\n * Make sure that a resource is cleaned up in the event of an exception (\\*). The release action is called regardless of\n * whether the body action throws (\\*) or returns.\n *\n * (\\*) i.e. returns a `Left`\n *\n * @since 2.0.0\n */\nexport var bracket = function (acquire, use, release) { return bracketW(acquire, use, release); };\n/**\n * Less strict version of [`bracket`](#bracket).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var bracketW = function (acquire, use, release) {\n    return flatMap(acquire, function (a) { return T.flatMap(use(a), function (e) { return flatMap(release(a, e), function () { return T.of(e); }); }); });\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var bindW = bind;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(ApplyPar);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(T.traverseReadonlyNonEmptyArrayWithIndex(f), T.map(E.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {\n    return function (as) {\n        return function () {\n            return _.tail(as).reduce(function (acc, a, i) {\n                return acc.then(function (ebs) {\n                    return _.isLeft(ebs)\n                        ? acc\n                        : f(i + 1, a)().then(function (eb) {\n                            if (_.isLeft(eb)) {\n                                return eb;\n                            }\n                            ebs.right.push(eb.right);\n                            return ebs;\n                        });\n                });\n            }, f(0, _.head(as))().then(E.map(_.singleton)));\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseSeqArray = function (f) { return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceSeqArray = \n/*#__PURE__*/ traverseSeqArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.8.0\n */\nexport var chainFirstW = tap;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirst = tapError;\n/**\n * Alias of `tapError`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var orElseFirstW = tapError;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `TE.Functor` instead of `TE.taskEither`\n * (where `TE` is from `import TE from 'fp-ts/TaskEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var taskEither = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: flatMap,\n    alt: _alt,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `TE.Functor` instead of `TE.taskEitherSeq`\n * (where `TE` is from `import TE from 'fp-ts/TaskEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var taskEitherSeq = {\n    URI: URI,\n    bimap: mapBoth,\n    mapLeft: mapError,\n    map: _map,\n    of: of,\n    ap: _apSeq,\n    chain: flatMap,\n    alt: _alt,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/ getApplySemigroup_(ApplySeq);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/ getApplicativeMonoid(ApplicativeSeq);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = function (S) {\n    return getApplySemigroup_(T.ApplySeq)(E.getSemigroup(S));\n};\n/**\n * Use [`getApplicativeTaskValidation`](#getapplicativetaskvalidation) and [`getAltTaskValidation`](#getalttaskvalidation) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function getTaskValidation(SE) {\n    var applicativeTaskValidation = getApplicativeTaskValidation(T.ApplicativePar, SE);\n    var altTaskValidation = getAltTaskValidation(SE);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: applicativeTaskValidation.ap,\n        of: of,\n        chain: flatMap,\n        bimap: mapBoth,\n        mapLeft: mapError,\n        alt: altTaskValidation.alt,\n        fromIO: fromIO,\n        fromTask: fromTask,\n        throwError: throwError\n    };\n}\n", "import { fromEquals } from './Eq';\nimport { flow, identity, pipe, SK } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated';\nimport * as S from './string';\nimport { wiltDefault, witherDefault } from './Witherable';\n/**\n * Builds a `ReadonlyRecord` by copying a `Record`.\n *\n * @example\n * import { ReadonlyRecord, fromRecord } from \"fp-ts/ReadonlyRecord\"\n *\n * const x: Record<string, number> = { a: 1, b: 2 };\n * const y: ReadonlyRecord<string, number> = fromRecord(x);\n * assert.deepStrictEqual(x,y);\n * // `y.a = 5` gives compiler error\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var fromRecord = function (r) { return Object.assign({}, r); };\n/**\n * Builds a mutable `Record` from a `ReadonlyRecord`.\n *\n * @example\n * import { ReadonlyRecord, toRecord } from \"fp-ts/ReadonlyRecord\"\n *\n * const x: ReadonlyRecord<string, number> = { a: 1, b: 2 };\n * const y: Record<string, number> = toRecord(x);\n * assert.deepStrictEqual(x,y);\n * y.a = 5; // it's ok, y is mutable\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toRecord = function (r) { return Object.assign({}, r); };\n/**\n * Calculate the number of key/value pairs in a `ReadonlyRecord`,\n *\n * @example\n * import { size } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(size({ a: true, b: 2, c: \"three\" }), 3);\n *\n * @since 2.5.0\n */\nexport var size = function (r) { return Object.keys(r).length; };\n/**\n * Test whether a `ReadonlyRecord` is empty.\n *\n * @example\n * import { isEmpty } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(isEmpty({}), true);\n * assert.deepStrictEqual(isEmpty({ a: 3 }), false);\n * @since 2.5.0\n */\nexport var isEmpty = function (r) {\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            return false;\n        }\n    }\n    return true;\n};\nvar keys_ = function (O) {\n    return function (r) {\n        return Object.keys(r).sort(O.compare);\n    };\n};\n/**\n * @since 2.5.0\n */\nexport var keys = /*#__PURE__*/ keys_(S.Ord);\nexport function collect(O) {\n    if (typeof O === 'function') {\n        return collect(S.Ord)(O);\n    }\n    var keysO = keys_(O);\n    return function (f) {\n        return function (r) {\n            var out = [];\n            for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {\n                var key = _a[_i];\n                out.push(f(key, r[key]));\n            }\n            return out;\n        };\n    };\n}\n/**\n * Get a sorted `ReadonlyArray` of the key/value pairs contained in a `ReadonlyRecord`.\n *\n * @example\n * import { toReadonlyArray } from 'fp-ts/ReadonlyRecord'\n *\n * const x = { c: 3, a: \"foo\", b: false };\n * assert.deepStrictEqual(toReadonlyArray(x), [\n *   [\"a\", \"foo\"],\n *   [\"b\", false],\n *   [\"c\", 3],\n * ]);\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toReadonlyArray = \n/*#__PURE__*/ collect(S.Ord)(function (k, a) { return [k, a]; });\nexport function toUnfoldable(U) {\n    return function (r) {\n        var sas = toReadonlyArray(r);\n        var len = sas.length;\n        return U.unfold(0, function (b) { return (b < len ? _.some([sas[b], b + 1]) : _.none); });\n    };\n}\n/**\n * Insert or replace a key/value pair in a `ReadonlyRecord`.\n *\n * @example\n * import { upsertAt } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(upsertAt(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(upsertAt(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n *\n * @since 2.10.0\n */\nexport var upsertAt = function (k, a) {\n    return function (r) {\n        if (_.has.call(r, k) && r[k] === a) {\n            return r;\n        }\n        var out = Object.assign({}, r);\n        out[k] = a;\n        return out;\n    };\n};\n/**\n * Test whether or not a key exists in a `ReadonlyRecord`.\n *\n * Note. This function is not pipeable because is a `Refinement`.\n *\n * @example\n * import { has } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(has(\"a\", { a: 1, b: 2 }), true);\n * assert.deepStrictEqual(has(\"c\", { a: 1, b: 2 }), false);\n *\n * @since 2.10.0\n */\nexport var has = function (k, r) { return _.has.call(r, k); };\nexport function deleteAt(k) {\n    return function (r) {\n        if (!_.has.call(r, k)) {\n            return r;\n        }\n        var out = Object.assign({}, r);\n        delete out[k];\n        return out;\n    };\n}\n/**\n * Replace a key/value pair in a `ReadonlyRecord`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { updateAt } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(updateAt(\"a\", 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(updateAt(\"c\", 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.5.0\n */\nexport var updateAt = function (k, a) {\n    return function (r) {\n        if (!has(k, r)) {\n            return _.none;\n        }\n        if (r[k] === a) {\n            return _.some(r);\n        }\n        var out = Object.assign({}, r);\n        out[k] = a;\n        return _.some(out);\n    };\n};\n/**\n * Applies a mapping function to one specific key/value pair in a `ReadonlyRecord`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { modifyAt } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(modifyAt(\"a\", (x: number) => x * 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(modifyAt(\"c\", (x: number) => x * 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.5.0\n */\nexport var modifyAt = function (k, f) {\n    return function (r) {\n        if (!has(k, r)) {\n            return _.none;\n        }\n        var next = f(r[k]);\n        if (next === r[k]) {\n            return _.some(r);\n        }\n        var out = Object.assign({}, r);\n        out[k] = next;\n        return _.some(out);\n    };\n};\nexport function pop(k) {\n    var deleteAtk = deleteAt(k);\n    return function (r) {\n        var oa = lookup(k, r);\n        return _.isNone(oa) ? _.none : _.some([oa.value, deleteAtk(r)]);\n    };\n}\nexport function isSubrecord(E) {\n    return function (me, that) {\n        if (that === undefined) {\n            var isSubrecordE_1 = isSubrecord(E);\n            return function (that) { return isSubrecordE_1(that, me); };\n        }\n        for (var k in me) {\n            if (!_.has.call(that, k) || !E.equals(me[k], that[k])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\nexport function lookup(k, r) {\n    if (r === undefined) {\n        return function (r) { return lookup(k, r); };\n    }\n    return _.has.call(r, k) ? _.some(r[k]) : _.none;\n}\n/**\n * @since 2.5.0\n */\nexport var empty = {};\nexport function mapWithIndex(f) {\n    return function (r) {\n        var out = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                out[k] = f(k, r[k]);\n            }\n        }\n        return out;\n    };\n}\nexport function map(f) {\n    return mapWithIndex(function (_, a) { return f(a); });\n}\nexport function reduceWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 2) {\n        return reduceWithIndex(S.Ord).apply(void 0, args);\n    }\n    var keysO = keys_(args[0]);\n    return function (b, f) { return function (fa) {\n        var out = b;\n        var ks = keysO(fa);\n        var len = ks.length;\n        for (var i = 0; i < len; i++) {\n            var k = ks[i];\n            out = f(k, out, fa[k]);\n        }\n        return out;\n    }; };\n}\nexport function foldMapWithIndex(O) {\n    if ('compare' in O) {\n        var keysO_1 = keys_(O);\n        return function (M) {\n            return function (f) {\n                return function (fa) {\n                    var out = M.empty;\n                    var ks = keysO_1(fa);\n                    var len = ks.length;\n                    for (var i = 0; i < len; i++) {\n                        var k = ks[i];\n                        out = M.concat(out, f(k, fa[k]));\n                    }\n                    return out;\n                };\n            };\n        };\n    }\n    return foldMapWithIndex(S.Ord)(O);\n}\nexport function reduceRightWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 2) {\n        return reduceRightWithIndex(S.Ord).apply(void 0, args);\n    }\n    var keysO = keys_(args[0]);\n    return function (b, f) { return function (fa) {\n        var out = b;\n        var ks = keysO(fa);\n        var len = ks.length;\n        for (var i = len - 1; i >= 0; i--) {\n            var k = ks[i];\n            out = f(k, fa[k], out);\n        }\n        return out;\n    }; };\n}\n/**\n * Create a `ReadonlyRecord` with one key/value pair.\n *\n * @example\n * import { singleton } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(singleton(\"a\", 1), { a: 1 });\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var singleton = function (k, a) {\n    var _a;\n    return (_a = {}, _a[k] = a, _a);\n};\nexport function traverseWithIndex(F) {\n    var traverseWithIndexOF = _traverseWithIndex(S.Ord)(F);\n    return function (f) { return function (ta) { return traverseWithIndexOF(ta, f); }; };\n}\nexport function traverse(F) {\n    var traverseOF = _traverse(S.Ord)(F);\n    return function (f) { return function (ta) { return traverseOF(ta, f); }; };\n}\nexport function sequence(F) {\n    return _sequence(S.Ord)(F);\n}\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), compact); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), separate); }; };\n};\nexport function partitionMapWithIndex(f) {\n    return function (r) {\n        var left = {};\n        var right = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var e = f(k, r[k]);\n                switch (e._tag) {\n                    case 'Left':\n                        left[k] = e.left;\n                        break;\n                    case 'Right':\n                        right[k] = e.right;\n                        break;\n                }\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function partitionWithIndex(predicateWithIndex) {\n    return function (r) {\n        var left = {};\n        var right = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var a = r[k];\n                if (predicateWithIndex(k, a)) {\n                    right[k] = a;\n                }\n                else {\n                    left[k] = a;\n                }\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function filterMapWithIndex(f) {\n    return function (r) {\n        var out = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var ob = f(k, r[k]);\n                if (_.isSome(ob)) {\n                    out[k] = ob.value;\n                }\n            }\n        }\n        return out;\n    };\n}\nexport function filterWithIndex(predicateWithIndex) {\n    return function (fa) {\n        var out = {};\n        var changed = false;\n        for (var key in fa) {\n            if (_.has.call(fa, key)) {\n                var a = fa[key];\n                if (predicateWithIndex(key, a)) {\n                    out[key] = a;\n                }\n                else {\n                    changed = true;\n                }\n            }\n        }\n        return changed ? out : fa;\n    };\n}\nexport function fromFoldable(M, F) {\n    var fromFoldableMapM = fromFoldableMap(M, F);\n    return function (fka) { return fromFoldableMapM(fka, identity); };\n}\nexport function fromFoldableMap(M, F) {\n    return function (ta, f) {\n        return F.reduce(ta, {}, function (r, a) {\n            var _a = f(a), k = _a[0], b = _a[1];\n            r[k] = _.has.call(r, k) ? M.concat(r[k], b) : b;\n            return r;\n        });\n    };\n}\n/**\n * Alias of [`toReadonlyArray`](#toreadonlyarray).\n *\n * @example\n * import { toEntries } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(toEntries({ b: 2, a: 1 }), [['a', 1], ['b', 2]])\n *\n * @category conversions\n * @since 2.12.0\n */\nexport var toEntries = toReadonlyArray;\n/**\n * Converts a `ReadonlyArray` of `[key, value]` tuples into a `ReadonlyRecord`.\n *\n * @example\n * import { fromEntries } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(fromEntries([['a', 1], ['b', 2], ['a', 3]]), { b: 2, a: 3 })\n *\n * @since 2.12.0\n * @category conversions\n */\nexport var fromEntries = function (fa) {\n    var out = {};\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var a = fa_1[_i];\n        out[a[0]] = a[1];\n    }\n    return out;\n};\nexport function every(predicate) {\n    return function (r) {\n        for (var k in r) {\n            if (!predicate(r[k])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\n/**\n * Test if at least one value in a `ReadonlyRecord` satisfies the predicate.\n *\n * @example\n * import { some } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: 1, b: -2 }), true);\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: -1, b: -2 }), false);\n *\n * @since 2.5.0\n */\nexport function some(predicate) {\n    return function (r) {\n        for (var k in r) {\n            if (predicate(r[k])) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nexport function elem(E) {\n    return function (a, fa) {\n        if (fa === undefined) {\n            var elemE_1 = elem(E);\n            return function (fa) { return elemE_1(a, fa); };\n        }\n        for (var k in fa) {\n            if (E.equals(fa[k], a)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * Union of two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining all the\n * entries of the two inputs.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements with the same key.\n *\n * @example\n * import { union } from \"fp-ts/ReadonlyRecord\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(union(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4, b: 2, c: 3 });\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(union(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1, b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var union = function (M) {\n    return function (second) {\n        return function (first) {\n            if (isEmpty(first)) {\n                return second;\n            }\n            if (isEmpty(second)) {\n                return first;\n            }\n            var out = {};\n            for (var k in first) {\n                if (has(k, second)) {\n                    out[k] = M.concat(first[k], second[k]);\n                }\n                else {\n                    out[k] = first[k];\n                }\n            }\n            for (var k in second) {\n                if (!has(k, out)) {\n                    out[k] = second[k];\n                }\n            }\n            return out;\n        };\n    };\n};\n/**\n * Intersection of two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining only the\n * entries of the two inputswith the same key.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements.\n *\n * @example\n * import { intersection } from \"fp-ts/ReadonlyRecord\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(intersection(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4});\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(intersection(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1});\n *\n * @since 2.11.0\n */\nexport var intersection = function (M) {\n    return function (second) {\n        return function (first) {\n            if (isEmpty(first) || isEmpty(second)) {\n                return empty;\n            }\n            var out = {};\n            for (var k in first) {\n                if (has(k, second)) {\n                    out[k] = M.concat(first[k], second[k]);\n                }\n            }\n            return out;\n        };\n    };\n};\n/**\n * Difference between two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` composed by the\n * entries of the two inputs, removing the entries with the same\n * key in both inputs.\n *\n * @example\n * import { difference } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(difference({ a: 1 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3, c: 3 })({ a: 1, b: 2 }), { b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var difference = function (second) {\n    return function (first) {\n        if (isEmpty(first)) {\n            return second;\n        }\n        if (isEmpty(second)) {\n            return first;\n        }\n        var out = {};\n        for (var k in first) {\n            if (!has(k, second)) {\n                out[k] = first[k];\n            }\n        }\n        for (var k in second) {\n            if (!has(k, first)) {\n                out[k] = second[k];\n            }\n        }\n        return out;\n    };\n};\n/** @internal */\nexport var _map = function (fa, f) { return pipe(fa, map(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduce = function (O) {\n    var reduceO = reduce(O);\n    return function (fa, b, f) { return pipe(fa, reduceO(b, f)); };\n};\n/** @internal */\nexport var _foldMap = function (O) { return function (M) {\n    var foldMapM = foldMap(O)(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n}; };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRight = function (O) {\n    var reduceRightO = reduceRight(O);\n    return function (fa, b, f) { return pipe(fa, reduceRightO(b, f)); };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filter = function (fa, predicate) {\n    return pipe(fa, filter(predicate));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partition = function (fa, predicate) { return pipe(fa, partition(predicate)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceWithIndex = function (O) {\n    var reduceWithIndexO = reduceWithIndex(O);\n    return function (fa, b, f) { return pipe(fa, reduceWithIndexO(b, f)); };\n};\n/** @internal */\nexport var _foldMapWithIndex = function (O) {\n    var foldMapWithIndexO = foldMapWithIndex(O);\n    return function (M) {\n        var foldMapWithIndexM = foldMapWithIndexO(M);\n        return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n    };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRightWithIndex = function (O) {\n    var reduceRightWithIndexO = reduceRightWithIndex(O);\n    return function (fa, b, f) { return pipe(fa, reduceRightWithIndexO(b, f)); };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionWithIndex = function (fa, predicateWithIndex) {\n    return pipe(fa, partitionWithIndex(predicateWithIndex));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _filterWithIndex = function (fa, predicateWithIndex) { return pipe(fa, filterWithIndex(predicateWithIndex)); };\n/** @internal */\nexport var _traverse = function (O) {\n    var traverseWithIndexO = _traverseWithIndex(O);\n    return function (F) {\n        var traverseWithIndexOF = traverseWithIndexO(F);\n        return function (ta, f) { return traverseWithIndexOF(ta, flow(SK, f)); };\n    };\n};\n/** @internal */\nexport var _sequence = function (O) {\n    var traverseO = _traverse(O);\n    return function (F) {\n        var traverseOF = traverseO(F);\n        return function (ta) { return traverseOF(ta, identity); };\n    };\n};\nvar _traverseWithIndex = function (O) {\n    return function (F) {\n        var keysO = keys_(O);\n        return function (ta, f) {\n            var ks = keysO(ta);\n            if (ks.length === 0) {\n                return F.of(empty);\n            }\n            var fr = F.of({});\n            var _loop_1 = function (key) {\n                fr = F.ap(F.map(fr, function (r) { return function (b) {\n                    var _a;\n                    return Object.assign({}, r, (_a = {}, _a[key] = b, _a));\n                }; }), f(key, ta[key]));\n            };\n            for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n                var key = ks_1[_i];\n                _loop_1(key);\n            }\n            return fr;\n        };\n    };\n};\n/**\n * Given a `Predicate`, it produces a new `ReadonlyRecord` keeping only the entries with a\n * value that satisfies the provided predicate.\n *\n * @example\n * import { filter } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(filter((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo\",\n *   b: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var filter = function (predicate) {\n    return filterWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * Maps a `ReadonlyRecord` with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from \"fp-ts/ReadonlyRecord\"\n * import { option } from \"fp-ts\"\n *\n * const f = (s: string) => s.length < 4 ? option.some(`${s} is short`): option.none\n * assert.deepStrictEqual(filterMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo is short\",\n *   b: \"bar is short\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var filterMap = function (f) { return filterMapWithIndex(function (_, a) { return f(a); }); };\n/**\n * Partition a `ReadonlyRecord` into two parts according to a `Predicate`.\n *\n * @example\n * import { partition } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(partition((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left:{\n *     c: \"verylong\"\n *   },\n *   right: {\n *     a: \"foo\",\n *     b: \"bar\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * Maps a `ReadonlyRecord` with a function returning an `Either` and\n * partitions the resulting `ReadonlyRecord` into `Left`s and `Right`s.\n *\n * @example\n * import { partitionMap } from \"fp-ts/ReadonlyRecord\"\n * import { either } from \"fp-ts\"\n *\n * const f = (s: string) => (s.length < 4 ? either.right(`${s} is short`) : either.left(`${s} is not short`));\n * assert.deepStrictEqual(partitionMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left: {\n *     c: \"verylong is not short\",\n *   },\n *   right: {\n *     a: \"foo is short\",\n *     b: \"bar is short\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var partitionMap = function (f) {\n    return partitionMapWithIndex(function (_, a) { return f(a); });\n};\nexport function reduce() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 1) {\n        var reduceWithIndexO_1 = reduceWithIndex(args[0]);\n        return function (b, f) { return reduceWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };\n    }\n    return reduce(S.Ord).apply(void 0, args);\n}\nexport function foldMap(O) {\n    if ('compare' in O) {\n        var foldMapWithIndexO_1 = foldMapWithIndex(O);\n        return function (M) {\n            var foldMapWithIndexM = foldMapWithIndexO_1(M);\n            return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };\n        };\n    }\n    return foldMap(S.Ord)(O);\n}\nexport function reduceRight() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 1) {\n        var reduceRightWithIndexO_1 = reduceRightWithIndex(args[0]);\n        return function (b, f) { return reduceRightWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };\n    }\n    return reduceRight(S.Ord).apply(void 0, args);\n}\n/**\n * Compact a `ReadonlyRecord` of `Option`s discarding the `None` values and\n * keeping the `Some` values.\n *\n * @example\n * import { compact } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(compact({ a: option.some(\"foo\"), b: option.none, c: option.some(\"bar\") }), {\n *   a: \"foo\",\n *   c: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var compact = function (r) {\n    var out = {};\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            var oa = r[k];\n            if (_.isSome(oa)) {\n                out[k] = oa.value;\n            }\n        }\n    }\n    return out;\n};\n/**\n * Separate a `ReadonlyRecord` of `Either`s into `Left`s and `Right`s.\n *\n * @example\n * import { separate } from 'fp-ts/ReadonlyRecord'\n * import { either } from 'fp-ts'\n *\n * assert.deepStrictEqual(\n *   separate({ a: either.right(\"foo\"), b: either.left(\"bar\"), c: either.right(\"baz\") }),\n *   {\n *     right: {\n *       a: \"foo\",\n *       c: \"baz\",\n *     },\n *     left: {\n *       b: \"bar\",\n *     },\n *   }\n * );\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var separate = function (r) {\n    var left = {};\n    var right = {};\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            var e = r[k];\n            if (_.isLeft(e)) {\n                left[k] = e.left;\n            }\n            else {\n                right[k] = e.right;\n            }\n        }\n    }\n    return separated(left, right);\n};\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyRecord';\nexport function getShow(O) {\n    if ('compare' in O) {\n        return function (S) { return ({\n            show: function (r) {\n                var elements = collect(O)(function (k, a) { return \"\".concat(JSON.stringify(k), \": \").concat(S.show(a)); })(r).join(', ');\n                return elements === '' ? '{}' : \"{ \".concat(elements, \" }\");\n            }\n        }); };\n    }\n    return getShow(S.Ord)(O);\n}\nexport function getEq(E) {\n    var isSubrecordE = isSubrecord(E);\n    return fromEquals(function (x, y) { return isSubrecordE(x)(y) && isSubrecordE(y)(x); });\n}\nexport function getMonoid(S) {\n    return {\n        concat: function (first, second) {\n            if (isEmpty(first)) {\n                return second;\n            }\n            if (isEmpty(second)) {\n                return first;\n            }\n            var r = Object.assign({}, first);\n            for (var k in second) {\n                if (_.has.call(second, k)) {\n                    r[k] = _.has.call(first, k) ? S.concat(first[k], second[k]) : second[k];\n                }\n            }\n            return r;\n        },\n        empty: empty\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Takes a value and a `ReadonlyRecord` of functions and returns a\n * `ReadonlyRecord` by applying each function to the input value.\n *\n * @example\n * import { flap } from \"fp-ts/ReadonlyRecord\"\n *\n * const fab = { x: (n: number) => `${n} times 2`, y: (n: number) => `${n * 2}` };\n * assert.deepStrictEqual(flap(3)(fab), {\n *   x: \"3 times 2\",\n *   y: \"6\",\n * });\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * Produces a `Foldable` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldable = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O)\n}); };\n/**\n * Produces a `FoldableWithIndex1` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldableWithIndex = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O)\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex\n};\n/**\n * Produces a `Traversable` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversable = function (O) { return ({\n    URI: URI,\n    map: _map,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O)\n}); };\n/**\n * Produces a `TraversableWithIndex` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversableWithIndex = function (O) { return ({\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O),\n    traverseWithIndex: _traverseWithIndex(O)\n}); };\n/**\n * @category filtering\n * @since 2.11.0\n */\nexport var getWitherable = function (O) {\n    var T = getTraversable(O);\n    return {\n        URI: URI,\n        map: _map,\n        reduce: _reduce(O),\n        foldMap: _foldMap(O),\n        reduceRight: _reduceRight(O),\n        traverse: T.traverse,\n        sequence: T.sequence,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        wither: witherDefault(T, Compactable),\n        wilt: wiltDefault(T, Compactable)\n    };\n};\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `ReadonlyRecord` of the base type.\n * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by\n * `union`.\n *\n * @example\n * import { getUnionSemigroup, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getUnionSemigroup(sNumber);\n * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { a: 1, b: -1, c: 4 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (S) {\n    var unionS = union(S);\n    return {\n        concat: function (first, second) { return unionS(second)(first); }\n    };\n};\n/**\n * Same as `getMonoid`.\n * Returns a `Monoid` instance for `ReadonlyRecord`s given a `Semigroup`\n * instance for the base type.\n * The `Monoid` makes the union of two `ReadonlyRecord`s combining the\n * entries that have the same key with the provided `Semigroup`.\n *\n * @example\n * import { SemigroupSum } from 'fp-ts/number'\n * import { getUnionMonoid } from 'fp-ts/ReadonlyRecord'\n *\n * const M = getUnionMonoid(SemigroupSum);\n * assert.deepStrictEqual(M.concat({ foo: 123, bar: 234 }, { foo: 456, baz: 567 }), { foo: 579 , bar: 234, baz: 567 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (S) { return ({\n    concat: getUnionSemigroup(S).concat,\n    empty: empty\n}); };\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `ReadonlyRecord` of the base type.\n * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by\n * `intersection`.\n *\n * @example\n * import { getIntersectionSemigroup, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getIntersectionSemigroup(sNumber);\n * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { b: -1 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (S) {\n    var intersectionS = intersection(S);\n    return {\n        concat: function (first, second) { return intersectionS(second)(first); }\n    };\n};\n/**\n * Produces a `Magma` with a `concat` function that combines\n * two `ReadonlyRecord`s by making the `difference`.\n *\n * @example\n * import { getDifferenceMagma, difference, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Magma } from \"fp-ts/Magma\"\n *\n * const r1 = { a: 3, c: 3 };\n * const r2 = { a: 1, b: 2 };\n * const m: Magma<ReadonlyRecord<string, number>> = getDifferenceMagma<number>();\n * assert.deepStrictEqual(m.concat(r1, r2), difference(r2)(r1));\n * assert.deepStrictEqual(m.concat(r1, r2), { c: 3, b: 2 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function () { return ({\n    concat: function (first, second) { return difference(second)(first); }\n}); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `getFoldable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord)\n};\n/**\n * Use `getFoldableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord)\n};\n/**\n * Use `getTraversable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence\n};\n/**\n * Use `getTraversableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord)\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * Use `getWitherable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\nexport function hasOwnProperty(k, r) {\n    return _.has.call(r === undefined ? this : r, k);\n}\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RR.Functor` instead of `RR.readonlyRecord`\n * (where `RR` is from `import RR from 'fp-ts/ReadonlyRecord'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyRecord = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord),\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord),\n    wither: _wither,\n    wilt: _wilt\n};\n", "import { isNonEmpty } from './ReadonlyNonEmptyArray';\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Eq.equals('a', 'a'), true)\n * assert.deepStrictEqual(S.Eq.equals('a', 'b'), false)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Eq = {\n    equals: function (first, second) { return first === second; }\n};\n/**\n * `string` semigroup under concatenation.\n *\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Semigroup.concat('a', 'b'), 'ab')\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Semigroup = {\n    concat: function (first, second) { return first + second; }\n};\n/**\n * An empty `string`.\n *\n * @since 2.10.0\n */\nexport var empty = '';\n/**\n * `string` monoid under concatenation.\n *\n * The `empty` value is `''`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Monoid.concat('a', 'b'), 'ab')\n * assert.deepStrictEqual(S.Monoid.concat('a', S.Monoid.empty), 'a')\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Monoid = {\n    concat: Semigroup.concat,\n    empty: empty\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Ord.compare('a', 'a'), 0)\n * assert.deepStrictEqual(S.Ord.compare('a', 'b'), -1)\n * assert.deepStrictEqual(S.Ord.compare('b', 'a'), 1)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Ord = {\n    equals: Eq.equals,\n    compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Show.show('a'), '\"a\"')\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Show = {\n    show: function (s) { return JSON.stringify(s); }\n};\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.isString('a'), true)\n * assert.deepStrictEqual(S.isString(1), false)\n *\n * @category refinements\n * @since 2.11.0\n */\nexport var isString = function (u) { return typeof u === 'string'; };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('a', S.toUpperCase), 'A')\n *\n * @since 2.11.0\n */\nexport var toUpperCase = function (s) { return s.toUpperCase(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('A', S.toLowerCase), 'a')\n *\n * @since 2.11.0\n */\nexport var toLowerCase = function (s) { return s.toLowerCase(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.replace('b', 'd')), 'adc')\n *\n * @since 2.11.0\n */\nexport var replace = function (searchValue, replaceValue) {\n    return function (s) {\n        return s.replace(searchValue, replaceValue);\n    };\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trim), 'a')\n *\n * @since 2.11.0\n */\nexport var trim = function (s) { return s.trim(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trimLeft), 'a ')\n *\n * @since 2.11.0\n */\nexport var trimLeft = function (s) { return s.trimLeft(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trimRight), ' a')\n *\n * @since 2.11.0\n */\nexport var trimRight = function (s) { return s.trimRight(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abcd', S.slice(1, 3)), 'bc')\n *\n * @since 2.11.0\n */\nexport var slice = function (start, end) {\n    return function (s) {\n        return s.slice(start, end);\n    };\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Test whether a `string` is empty.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('', S.isEmpty), true)\n * assert.deepStrictEqual(pipe('a', S.isEmpty), false)\n *\n * @since 2.10.0\n */\nexport var isEmpty = function (s) { return s.length === 0; };\n/**\n * Calculate the number of characters in a `string`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.size), 3)\n *\n * @since 2.10.0\n */\nexport var size = function (s) { return s.length; };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.split('')), ['a', 'b', 'c'])\n * assert.deepStrictEqual(pipe('', S.split('')), [''])\n *\n * @since 2.11.0\n */\nexport var split = function (separator) {\n    return function (s) {\n        var out = s.split(separator);\n        return isNonEmpty(out) ? out : [s];\n    };\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.includes('b')), true)\n * assert.deepStrictEqual(pipe('abc', S.includes('d')), false)\n *\n * @since 2.11.0\n */\nexport var includes = function (searchString, position) {\n    return function (s) {\n        return s.includes(searchString, position);\n    };\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.startsWith('a')), true)\n * assert.deepStrictEqual(pipe('bc', S.startsWith('a')), false)\n *\n * @since 2.11.0\n */\nexport var startsWith = function (searchString, position) {\n    return function (s) {\n        return s.startsWith(searchString, position);\n    };\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.endsWith('c')), true)\n * assert.deepStrictEqual(pipe('ab', S.endsWith('c')), false)\n *\n * @since 2.11.0\n */\nexport var endsWith = function (searchString, position) {\n    return function (s) {\n        return s.endsWith(searchString, position);\n    };\n};\n", "import { fromEquals } from './Eq';\nimport { identity } from './function';\nimport { not } from './Predicate';\nimport { separated } from './Separated';\n/**\n * @category conversions\n * @since 2.5.0\n */\nexport var fromSet = function (s) { return new Set(s); };\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Create a set with one element\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var singleton = function (a) { return new Set([a]); };\n/**\n * Create a `ReadonlySet` from a `ReadonlyArray`\n *\n * @category conversions\n * @since 2.10.0\n */\nexport var fromReadonlyArray = function (E) {\n    return function (as) {\n        var len = as.length;\n        var out = new Set();\n        var has = elem(E);\n        for (var i = 0; i < len; i++) {\n            var a = as[i];\n            if (!has(a, out)) {\n                out.add(a);\n            }\n        }\n        return out;\n    };\n};\n/**\n * @category conversions\n * @since 2.5.0\n */\nexport function toSet(s) {\n    return new Set(s);\n}\n/**\n * Projects a Set through a function\n *\n * @since 2.5.0\n */\nexport function map(E) {\n    var elemE = elem(E);\n    return function (f) { return function (set) {\n        var r = new Set();\n        set.forEach(function (e) {\n            var v = f(e);\n            if (!elemE(v, r)) {\n                r.add(v);\n            }\n        });\n        return r;\n    }; };\n}\n/**\n * @since 2.5.0\n */\nexport function chain(E) {\n    var elemE = elem(E);\n    return function (f) { return function (set) {\n        var r = new Set();\n        set.forEach(function (e) {\n            f(e).forEach(function (e) {\n                if (!elemE(e, r)) {\n                    r.add(e);\n                }\n            });\n        });\n        return r;\n    }; };\n}\nexport function filter(predicate) {\n    return function (set) {\n        var values = set.values();\n        var e;\n        var r = new Set();\n        while (!(e = values.next()).done) {\n            var a = e.value;\n            if (predicate(a)) {\n                r.add(a);\n            }\n        }\n        return r;\n    };\n}\nexport function partition(predicate) {\n    return function (set) {\n        var values = set.values();\n        var e;\n        var right = new Set();\n        var left = new Set();\n        while (!(e = values.next()).done) {\n            var a = e.value;\n            if (predicate(a)) {\n                right.add(a);\n            }\n            else {\n                left.add(a);\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function union(E) {\n    var elemE = elem(E);\n    return function (me, that) {\n        if (that === undefined) {\n            var unionE_1 = union(E);\n            return function (that) { return unionE_1(me, that); };\n        }\n        if (isEmpty(me)) {\n            return that;\n        }\n        if (isEmpty(that)) {\n            return me;\n        }\n        var r = new Set(me);\n        that.forEach(function (e) {\n            if (!elemE(e, r)) {\n                r.add(e);\n            }\n        });\n        return r;\n    };\n}\nexport function intersection(E) {\n    var elemE = elem(E);\n    return function (me, that) {\n        if (that === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (that) { return intersectionE_1(that, me); };\n        }\n        if (isEmpty(me) || isEmpty(that)) {\n            return empty;\n        }\n        var r = new Set();\n        me.forEach(function (e) {\n            if (elemE(e, that)) {\n                r.add(e);\n            }\n        });\n        return r;\n    };\n}\n/**\n * @since 2.5.0\n */\nexport function partitionMap(EB, EC) {\n    return function (f) {\n        return function (set) {\n            var values = set.values();\n            var e;\n            var left = new Set();\n            var right = new Set();\n            var hasB = elem(EB);\n            var hasC = elem(EC);\n            while (!(e = values.next()).done) {\n                var v = f(e.value);\n                switch (v._tag) {\n                    case 'Left':\n                        if (!hasB(v.left, left)) {\n                            left.add(v.left);\n                        }\n                        break;\n                    case 'Right':\n                        if (!hasC(v.right, right)) {\n                            right.add(v.right);\n                        }\n                        break;\n                }\n            }\n            return separated(left, right);\n        };\n    };\n}\nexport function difference(E) {\n    var elemE = elem(E);\n    return function (me, that) {\n        if (that === undefined) {\n            var differenceE_1 = difference(E);\n            return function (that) { return differenceE_1(that, me); };\n        }\n        return filter(function (a) { return !elemE(a, that); })(me);\n    };\n}\n/**\n * @since 2.5.0\n */\nexport function reduce(O) {\n    var toReadonlyArrayO = toReadonlyArray(O);\n    return function (b, f) { return function (fa) { return toReadonlyArrayO(fa).reduce(f, b); }; };\n}\n/**\n * @since 2.5.0\n */\nexport function foldMap(O, M) {\n    var toReadonlyArrayO = toReadonlyArray(O);\n    return function (f) { return function (fa) { return toReadonlyArrayO(fa).reduce(function (b, a) { return M.concat(b, f(a)); }, M.empty); }; };\n}\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceRight = function (O) {\n    var toReadonlyArrayO = toReadonlyArray(O);\n    return function (b, f) { return function (fa) { return toReadonlyArrayO(fa).reduceRight(function (b, a) { return f(a, b); }, b); }; };\n};\n/**\n * Insert a value into a set\n *\n * @since 2.5.0\n */\nexport function insert(E) {\n    var elemE = elem(E);\n    return function (a) { return function (set) {\n        if (!elemE(a)(set)) {\n            var r = new Set(set);\n            r.add(a);\n            return r;\n        }\n        else {\n            return set;\n        }\n    }; };\n}\n/**\n * Delete a value from a set\n *\n * @since 2.5.0\n */\nexport var remove = function (E) {\n    return function (a) {\n        return function (set) {\n            return filter(function (ax) { return !E.equals(a, ax); })(set);\n        };\n    };\n};\n/**\n * Checks an element is a member of a set;\n * If yes, removes the value from the set\n * If no, inserts the value to the set\n *\n * @since 2.10.0\n */\nexport var toggle = function (E) {\n    var elemE = elem(E);\n    var removeE = remove(E);\n    var insertE = insert(E);\n    return function (a) { return function (set) { return (elemE(a, set) ? removeE : insertE)(a)(set); }; };\n};\n/**\n * @since 2.5.0\n */\nexport var compact = function (E) { return filterMap(E)(identity); };\n/**\n * @since 2.5.0\n */\nexport function separate(EE, EA) {\n    return function (fa) {\n        var elemEE = elem(EE);\n        var elemEA = elem(EA);\n        var left = new Set();\n        var right = new Set();\n        fa.forEach(function (e) {\n            switch (e._tag) {\n                case 'Left':\n                    if (!elemEE(e.left, left)) {\n                        left.add(e.left);\n                    }\n                    break;\n                case 'Right':\n                    if (!elemEA(e.right, right)) {\n                        right.add(e.right);\n                    }\n                    break;\n            }\n        });\n        return separated(left, right);\n    };\n}\n/**\n * @since 2.5.0\n */\nexport function filterMap(E) {\n    var elemE = elem(E);\n    return function (f) { return function (fa) {\n        var r = new Set();\n        fa.forEach(function (a) {\n            var ob = f(a);\n            if (ob._tag === 'Some' && !elemE(ob.value, r)) {\n                r.add(ob.value);\n            }\n        });\n        return r;\n    }; };\n}\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.5.0\n */\nexport var empty = new Set();\n/**\n * Test whether a `ReadonlySet` is empty.\n *\n * @since 2.10.0\n */\nexport var isEmpty = function (set) { return set.size === 0; };\n/**\n * Calculate the number of elements in a `ReadonlySet`.\n *\n * @since 2.10.0\n */\nexport var size = function (set) { return set.size; };\n/**\n * @since 2.5.0\n */\nexport var some = function (predicate) {\n    return function (set) {\n        var values = set.values();\n        var e;\n        var found = false;\n        while (!found && !(e = values.next()).done) {\n            found = predicate(e.value);\n        }\n        return found;\n    };\n};\nexport function every(predicate) {\n    return not(some(not(predicate)));\n}\nexport function isSubset(E) {\n    var elemE = elem(E);\n    return function (me, that) {\n        if (that === undefined) {\n            var isSubsetE_1 = isSubset(E);\n            return function (that) { return isSubsetE_1(that, me); };\n        }\n        return every(function (a) { return elemE(a, that); })(me);\n    };\n}\nexport function elem(E) {\n    return function (a, set) {\n        if (set === undefined) {\n            var elemE_1 = elem(E);\n            return function (set) { return elemE_1(a, set); };\n        }\n        var values = set.values();\n        var e;\n        var found = false;\n        while (!found && !(e = values.next()).done) {\n            found = E.equals(a, e.value);\n        }\n        return found;\n    };\n}\n/**\n * Get a sorted `ReadonlyArray` of the values contained in a `ReadonlySet`.\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toReadonlyArray = function (O) {\n    return function (set) {\n        var out = [];\n        set.forEach(function (e) { return out.push(e); });\n        return out.sort(O.compare);\n    };\n};\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport var URI = 'ReadonlySet';\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getShow(S) {\n    return {\n        show: function (s) {\n            var entries = [];\n            s.forEach(function (a) {\n                entries.push(S.show(a));\n            });\n            return \"new Set([\".concat(entries.sort().join(', '), \"])\");\n        }\n    };\n}\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getEq(E) {\n    var subsetE = isSubset(E);\n    return fromEquals(function (x, y) { return subsetE(x, y) && subsetE(y, x); });\n}\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) { return ({\n    concat: union(E)\n}); };\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getUnionMonoid = function (E) { return ({\n    concat: getUnionSemigroup(E).concat,\n    empty: empty\n}); };\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getIntersectionSemigroup = function (E) { return ({\n    concat: intersection(E)\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) { return ({\n    concat: difference(E)\n}); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`fromReadonlyArray`](#fromreadonlyarray) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var fromArray = fromReadonlyArray;\n", "import { identity, pipe } from './function';\nimport { flap as flap_ } from './Functor';\n// -------------------------------------------------------------------------------------\n// model\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.5.0\n */\nexport function fst(ea) {\n    return ea[0];\n}\n/**\n * @since 2.5.0\n */\nexport function snd(ea) {\n    return ea[1];\n}\n/**\n * @since 2.5.0\n */\nexport var swap = function (ea) { return [snd(ea), fst(ea)]; };\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getApply(S) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return [fst(fab)(fst(fa)), S.concat(snd(fab), snd(fa))]; }\n    };\n}\nvar of = function (M) {\n    return function (a) {\n        return [a, M.empty];\n    };\n};\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getApplicative(M) {\n    var A = getApply(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        of: of(M)\n    };\n}\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getChain(S) {\n    var A = getApply(S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        chain: function (ma, f) {\n            var _a = f(fst(ma)), b = _a[0], s = _a[1];\n            return [b, S.concat(snd(ma), s)];\n        }\n    };\n}\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getMonad(M) {\n    var C = getChain(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: C.ap,\n        chain: C.chain,\n        of: of(M)\n    };\n}\n/**\n * @category instances\n * @since 2.5.0\n */\nexport function getChainRec(M) {\n    var chainRec = function (a, f) {\n        var result = f(a);\n        var acc = M.empty;\n        var s = fst(result);\n        while (s._tag === 'Left') {\n            acc = M.concat(acc, snd(result));\n            result = f(s.left);\n            s = fst(result);\n        }\n        return [s.right, M.concat(acc, snd(result))];\n    };\n    var C = getChain(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: C.ap,\n        chain: C.chain,\n        chainRec: chainRec\n    };\n}\n/* istanbul ignore next */\nvar _compose = function (bc, ab) { return pipe(bc, compose(ab)); };\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, mapFst(f)); };\n/* istanbul ignore next */\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\n/* istanbul ignore next */\nvar _mapLeft = function (fa, f) { return pipe(fa, mapSnd(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.5.0\n */\nexport var bimap = function (f, g) { return function (fa) { return [g(fst(fa)), f(snd(fa))]; }; };\n/**\n * Map a function over the first component of a `ReadonlyTuple`.\n *\n * This is the `map` operation of the `Functor` instance.\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var mapFst = function (f) { return function (fa) {\n    return [f(fst(fa)), snd(fa)];\n}; };\n/**\n * Map a function over the second component of a `ReadonlyTuple`.\n *\n * This is the `mapLeft` operation of the `Bifunctor` instance.\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var mapSnd = function (f) { return function (fa) {\n    return [fst(fa), f(snd(fa))];\n}; };\n/**\n * @since 2.5.0\n */\nexport var compose = function (ab) { return function (bc) {\n    return [fst(bc), snd(ab)];\n}; };\n/**\n * @since 2.5.0\n */\nexport var extend = function (f) { return function (wa) {\n    return [f(wa), snd(wa)];\n}; };\n/**\n * @category Extract\n * @since 2.6.2\n */\nexport var extract = fst;\n/**\n * @since 2.5.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return f(b, fst(fa));\n}; };\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var foldMap = function () {\n    return function (f) { return function (fa) { return f(fst(fa)); }; };\n};\n/**\n * @category folding\n * @since 2.5.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return f(fst(fa), b);\n}; };\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    return function (f) { return function (ta) { return F.map(f(fst(ta)), function (b) { return [b, snd(ta)]; }); }; };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (fas) {\n        return F.map(fst(fas), function (a) { return [a, snd(fas)]; });\n    };\n};\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyTuple';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * Alias of [`mapFst`](#mapfst).\n *\n * @category mapping\n * @since 2.5.0\n */\nexport var map = mapFst;\n/**\n * Alias of [`mapSnd`](#mapsnd).\n *\n * @category error handling\n * @since 2.5.0\n */\nexport var mapLeft = mapSnd;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Semigroupoid = {\n    URI: URI,\n    compose: _compose\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RT.Functor` instead of `RT.readonlyTuple`\n * (where `RT` is from `import RT from 'fp-ts/ReadonlyTuple'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyTuple = {\n    URI: URI,\n    compose: _compose,\n    map: _map,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    extract: extract,\n    extend: _extend,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n", "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as A from './Array';\nimport { pipe } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as RR from './ReadonlyRecord';\nimport * as Se from './Semigroup';\nimport * as S from './string';\nimport { wiltDefault, witherDefault } from './Witherable';\n// -------------------------------------------------------------------------------------\n// model\n// -------------------------------------------------------------------------------------\n/**\n * Calculate the number of key/value pairs in a `Record`.\n *\n * @example\n * import { size } from \"fp-ts/Record\";\n *\n * assert.deepStrictEqual(size({ a: true, b: 2, c: \"three\" }), 3);\n *\n * @since 2.0.0\n */\nexport var size = RR.size;\n/**\n * Test whether a `Record` is empty.\n *\n * @example\n * import { isEmpty } from \"fp-ts/Record\";\n *\n * assert.deepStrictEqual(isEmpty({}), true);\n * assert.deepStrictEqual(isEmpty({ a: 3 }), false);\n *\n * @since 2.0.0\n */\nexport var isEmpty = RR.isEmpty;\nvar keys_ = function (O) {\n    return function (r) {\n        return Object.keys(r).sort(O.compare);\n    };\n};\n/**\n * The keys of a `Record`, sorted alphabetically.\n *\n * @example\n * import { keys } from \"fp-ts/Record\";\n *\n * assert.deepStrictEqual(keys({ c: 1, a: 2, b: 3 }), [\"a\", \"b\", \"c\"]);\n *\n * @since 2.0.0\n */\nexport var keys = /*#__PURE__*/ keys_(S.Ord);\nexport function collect(O) {\n    if (typeof O === 'function') {\n        return collect(S.Ord)(O);\n    }\n    var keysO = keys_(O);\n    return function (f) {\n        return function (r) {\n            var out = [];\n            for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {\n                var key = _a[_i];\n                out.push(f(key, r[key]));\n            }\n            return out;\n        };\n    };\n}\n/**\n * Get a sorted `Array` of the key/value pairs contained in a `Record`.\n * Sorted alphabetically by key.\n *\n * @example\n * import { toArray } from 'fp-ts/Record'\n *\n * const x = { c: 3, a: \"foo\", b: false };\n * assert.deepStrictEqual(toArray(x), [\n *   [\"a\", \"foo\"],\n *   [\"b\", false],\n *   [\"c\", 3],\n * ]);\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toArray = /*#__PURE__*/ collect(S.Ord)(function (k, a) { return [\n    k,\n    a\n]; });\nexport function toUnfoldable(U) {\n    return function (r) {\n        var sas = toArray(r);\n        var len = sas.length;\n        return U.unfold(0, function (b) { return (b < len ? _.some([sas[b], b + 1]) : _.none); });\n    };\n}\n/**\n * Insert or replace a key/value pair in a `Record`.\n *\n * @example\n * import { upsertAt } from 'fp-ts/Record'\n *\n * assert.deepStrictEqual(upsertAt(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(upsertAt(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n *\n * @since 2.10.0\n */\nexport var upsertAt = RR.upsertAt;\n/**\n * Test whether or not a key exists in a `Record`.\n *\n * Note. This function is not pipeable because is a `Refinement`.\n *\n * @example\n * import { has } from 'fp-ts/Record'\n *\n * assert.deepStrictEqual(has(\"a\", { a: 1, b: 2 }), true);\n * assert.deepStrictEqual(has(\"c\", { a: 1, b: 2 }), false);\n *\n * @since 2.10.0\n */\nexport var has = RR.has;\nexport function deleteAt(k) {\n    return function (r) {\n        if (!_.has.call(r, k)) {\n            return r;\n        }\n        var out = Object.assign({}, r);\n        delete out[k];\n        return out;\n    };\n}\n/**\n * Replace a key/value pair in a `Record`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { updateAt } from 'fp-ts/Record'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(updateAt(\"a\", 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(updateAt(\"c\", 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.0.0\n */\nexport var updateAt = function (k, a) {\n    return modifyAt(k, function () { return a; });\n};\n/**\n * Applies a mapping function to one spcific key/value pair in a `Record`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { modifyAt } from 'fp-ts/Record'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(modifyAt(\"a\", (x: number) => x * 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(modifyAt(\"c\", (x: number) => x * 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.0.0\n */\nexport var modifyAt = function (k, f) {\n    return function (r) {\n        if (!has(k, r)) {\n            return _.none;\n        }\n        var out = Object.assign({}, r);\n        out[k] = f(r[k]);\n        return _.some(out);\n    };\n};\nexport function pop(k) {\n    var deleteAtk = deleteAt(k);\n    return function (r) {\n        var oa = lookup(k, r);\n        return _.isNone(oa) ? _.none : _.some([oa.value, deleteAtk(r)]);\n    };\n}\n// TODO: remove non-curried overloading in v3\n/**\n * Test whether one `Record` contains all of the keys and values\n * contained in another `Record`.\n *\n * @example\n * import { isSubrecord } from 'fp-ts/Record'\n * import { string } from 'fp-ts'\n *\n * assert.deepStrictEqual(\n *   isSubrecord(string.Eq)({ a: \"foo\", b: \"bar\", c: \"baz\" })({ a: \"foo\", b: \"bar\", c: \"baz\" }),\n *   true\n * );\n * assert.deepStrictEqual(\n *   isSubrecord(string.Eq)({ a: \"foo\", b: \"bar\", c: \"baz\" })({ a: \"foo\", c: \"baz\" }),\n *   true\n * );\n * assert.deepStrictEqual(\n *   isSubrecord(string.Eq)({ a: \"foo\", b: \"bar\", c: \"baz\" })({ a: \"foo\", b: \"not-bar\", c: \"baz\" }),\n *   false\n * );\n * assert.deepStrictEqual(\n *   isSubrecord(string.Eq)({ a: \"foo\", b: \"bar\" })({ a: \"foo\", b: \"bar\", c: \"baz\" }),\n *   false\n * );\n *\n * @since 2.0.0\n */\nexport var isSubrecord = RR.isSubrecord;\n// TODO: remove non-curried overloading in v3\n/**\n * Lookup the value for a key in a `Record`.\n *\n * @returns If the specified key exists it returns an `Option` containing the value,\n * otherwise it returns `None`\n *\n * @example\n * import { lookup } from 'fp-ts/Record'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(lookup(\"b\")({ a: \"foo\", b: \"bar\" }), option.some(\"bar\"));\n * assert.deepStrictEqual(lookup(\"c\")({ a: \"foo\", b: \"bar\" }), option.none);\n *\n * @since 2.0.0\n */\nexport var lookup = RR.lookup;\n/**\n * Map a `Record` passing the key/value pairs to the iterating function.\n *\n * @example\n * import { mapWithIndex } from \"fp-ts/Record\";\n *\n * const f = (k: string, n: number) => `${k.toUpperCase()}-${n}`;\n * assert.deepStrictEqual(mapWithIndex(f)({ a: 3, b: 5 }), { a: \"A-3\", b: \"B-5\" });\n *\n * @since 2.0.0\n */\nexport var mapWithIndex = RR.mapWithIndex;\n/**\n * Map a `Record` passing the values to the iterating function.\n *\n * @example\n * import { map } from \"fp-ts/Record\";\n *\n * const f = (n: number) => `-${n}-`;\n * assert.deepStrictEqual(map(f)({ a: 3, b: 5 }), { a: \"-3-\", b: \"-5-\" });\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = RR.map;\nexport function reduceWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return args.length === 1 ? RR.reduceWithIndex(args[0]) : RR.reduceWithIndex(S.Ord).apply(void 0, args);\n}\nexport function foldMapWithIndex(O) {\n    return 'compare' in O ? RR.foldMapWithIndex(O) : RR.foldMapWithIndex(S.Ord)(O);\n}\nexport function reduceRightWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return args.length === 1 ? RR.reduceRightWithIndex(args[0]) : RR.reduceRightWithIndex(S.Ord).apply(void 0, args);\n}\n/**\n * Create a `Record` with one key/value pair.\n *\n * @example\n * import { singleton } from \"fp-ts/Record\";\n *\n * assert.deepStrictEqual(singleton(\"a\", 1), { a: 1 });\n *\n * @since 2.0.0\n */\nexport var singleton = RR.singleton;\nexport function traverseWithIndex(F) {\n    return RR.traverseWithIndex(F);\n}\nexport function traverse(F) {\n    return RR.traverse(F);\n}\nexport function sequence(F) {\n    return RR.sequence(F);\n}\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), compact); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), separate); }; };\n};\n/**\n * Maps a `Record` with a function returning an `Either` and\n * partitions the resulting `Record` into `Left`s and `Right`s.\n *\n * @example\n * import { partitionMapWithIndex } from \"fp-ts/Record\"\n * import { either } from \"fp-ts\"\n *\n * const f = (key: string, a: number) =>\n *   a >= 0 ? either.right(`${key} is >= 0 (${a})`) : either.left(`${key} is < 0 (${a})`);\n * assert.deepStrictEqual(partitionMapWithIndex(f)({ a: -1, b: 2, c: 123 }), {\n *   left: {\n *     a: \"a is < 0 (-1)\",\n *   },\n *   right: {\n *     b: \"b is >= 0 (2)\",\n *     c: \"c is >= 0 (123)\",\n *   },\n * });\n *\n * @since 2.0.0\n */\nexport var partitionMapWithIndex = RR.partitionMapWithIndex;\nexport function partitionWithIndex(predicateWithIndex) {\n    return RR.partitionWithIndex(predicateWithIndex);\n}\n/**\n * Maps a `Record` with an iterating function that takes key and value and\n * returns an `Option`, keeping only the `Some` values and discarding `None`s.\n *\n * @example\n * import { filterMapWithIndex } from \"fp-ts/Record\"\n * import { option } from \"fp-ts\"\n *\n * const f = (key: string, a: number) => (a >= 0 ? option.some(`${key}${a}`) : option.none);\n * assert.deepStrictEqual(filterMapWithIndex(f)({ a: -1, b: 2, c: 3 }), {\n *   b: \"b2\",\n *   c: \"c3\",\n * });\n *\n * @since 2.0.0\n */\nexport var filterMapWithIndex = RR.filterMapWithIndex;\nexport function filterWithIndex(predicateWithIndex) {\n    return RR.filterWithIndex(predicateWithIndex);\n}\nexport function fromFoldable(M, F) {\n    return RR.fromFoldable(M, F);\n}\n/**\n * Alias of [`toArray`](#toArray).\n *\n * @example\n * import { toEntries } from 'fp-ts/Record'\n *\n * assert.deepStrictEqual(toEntries({ b: 2, a: 1 }), [['a', 1], ['b', 2]])\n *\n * @since 2.12.0\n * @category conversions\n */\nexport var toEntries = toArray;\n/**\n * Converts an `Array` of `[key, value]` tuples into a `Record`.\n *\n * @example\n * import { fromEntries } from 'fp-ts/Record'\n *\n * assert.deepStrictEqual(fromEntries([['a', 1], ['b', 2], ['a', 3]]), { b: 2, a: 3 })\n *\n * @since 2.12.0\n * @category conversions\n */\nexport var fromEntries = function (fa) { return fromFoldable(Se.last(), A.Foldable)(fa); };\nexport function fromFoldableMap(M, F) {\n    return RR.fromFoldableMap(M, F);\n}\n/**\n * Test if every value in a `Record` satisfies the predicate.\n *\n * @example\n * import { every } from \"fp-ts/Record\"\n *\n * assert.deepStrictEqual(every((n: number) => n >= 0)({ a: 1, b: 2 }), true);\n * assert.deepStrictEqual(every((n: number) => n >= 0)({ a: 1, b: -1 }), false);\n *\n * @since 2.0.0\n */\nexport var every = RR.every;\n/**\n * Test if at least one value in a `Record` satisfies the predicate.\n *\n * @example\n * import { some } from \"fp-ts/Record\"\n *\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: 1, b: -2 }), true);\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: -1, b: -2 }), false);\n *\n * @since 2.0.0\n */\nexport var some = RR.some;\n// TODO: remove non-curried overloading in v3\n/**\n * Given an `Eq` checks if a `Record` contains an entry with\n * value equal to a provided value.\n *\n * @example\n * import { elem } from \"fp-ts/Record\"\n * import { number } from \"fp-ts\"\n *\n * assert.deepStrictEqual(elem(number.Eq)(123, { foo: 123, bar: 234 }), true);\n * assert.deepStrictEqual(elem(number.Eq)(-7, { foo: 123, bar: 234 }), false);\n *\n * @since 2.0.0\n */\nexport var elem = RR.elem;\n/**\n * Union of two `Record`s.\n * Takes two `Record`s and produces a `Record` combining all the\n * entries of the two inputs.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements with the same key.\n *\n * @example\n * import { union } from \"fp-ts/Record\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(union(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4, b: 2, c: 3 });\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(union(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1, b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var union = function (M) {\n    var unionM = RR.union(M);\n    return function (second) { return function (first) {\n        if (isEmpty(first)) {\n            return __assign({}, second);\n        }\n        if (isEmpty(second)) {\n            return __assign({}, first);\n        }\n        return unionM(second)(first);\n    }; };\n};\n/**\n * Intersection of two `Record`s.\n * Takes two `Record`s and produces a `Record` combining only the\n * entries of the two inputswith the same key.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements.\n *\n * @example\n * import { intersection } from \"fp-ts/Record\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(intersection(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4});\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(intersection(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1});\n *\n * @since 2.11.0\n */\nexport var intersection = function (M) {\n    return function (second) {\n        return function (first) {\n            if (isEmpty(first) || isEmpty(second)) {\n                return {};\n            }\n            return RR.intersection(M)(second)(first);\n        };\n    };\n};\n/**\n * Difference between two `Record`s.\n * Takes two `Record`s and produces a `Record` composed by the\n * entries of the two inputs, removing the entries with the same\n * key in both inputs.\n *\n * @example\n * import { difference } from \"fp-ts/Record\";\n *\n * assert.deepStrictEqual(difference({ a: 1 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3, c: 3 })({ a: 1, b: 2 }), { b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var difference = function (second) {\n    return function (first) {\n        if (isEmpty(first)) {\n            return __assign({}, second);\n        }\n        if (isEmpty(second)) {\n            return __assign({}, first);\n        }\n        return RR.difference(second)(first);\n    };\n};\nvar _map = RR._map;\nvar _mapWithIndex = RR._mapWithIndex;\nvar _reduce = RR._reduce;\nvar _foldMap = RR._foldMap;\nvar _reduceRight = RR._reduceRight;\nvar _filter = RR._filter;\nvar _filterMap = RR._filterMap;\nvar _partition = RR._partition;\nvar _partitionMap = RR._partitionMap;\nvar _reduceWithIndex = RR._reduceWithIndex;\nvar _foldMapWithIndex = RR._foldMapWithIndex;\nvar _reduceRightWithIndex = RR._reduceRightWithIndex;\nvar _partitionMapWithIndex = RR._partitionMapWithIndex;\nvar _partitionWithIndex = RR._partitionWithIndex;\nvar _filterMapWithIndex = RR._filterMapWithIndex;\nvar _filterWithIndex = RR._filterWithIndex;\nvar _traverse = RR._traverse;\nvar _sequence = RR._sequence;\nvar _traverseWithIndex = function (O) {\n    return function (F) {\n        var keysO = keys_(O);\n        return function (ta, f) {\n            var ks = keysO(ta);\n            if (ks.length === 0) {\n                return F.of({});\n            }\n            var fr = F.of({});\n            var _loop_1 = function (key) {\n                fr = F.ap(F.map(fr, function (r) { return function (b) {\n                    r[key] = b;\n                    return r;\n                }; }), f(key, ta[key]));\n            };\n            for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n                var key = ks_1[_i];\n                _loop_1(key);\n            }\n            return fr;\n        };\n    };\n};\n/**\n * Given a `Predicate`, it produces a new `Record` keeping only the entries with a\n * value that satisfies the provided predicate.\n *\n * @example\n * import { filter } from \"fp-ts/Record\"\n *\n * assert.deepStrictEqual(filter((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo\",\n *   b: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = RR.filter;\n/**\n * Maps a `Record` with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from \"fp-ts/Record\"\n * import { option } from \"fp-ts\"\n *\n * const f = (s: string) => s.length < 4 ? option.some(`${s} is short`): option.none\n * assert.deepStrictEqual(filterMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo is short\",\n *   b: \"bar is short\",\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = RR.filterMap;\n/**\n * Partition a `Record` into two parts according to a `Predicate`.\n *\n * @example\n * import { partition } from \"fp-ts/Record\"\n *\n * assert.deepStrictEqual(partition((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left:{\n *     c: \"verylong\"\n *   },\n *   right: {\n *     a: \"foo\",\n *     b: \"bar\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = RR.partition;\n/**\n * Maps a `Record` with a function returning an `Either` and\n * partitions the resulting `Record` into `Left`s and `Right`s.\n *\n * @example\n * import { partitionMap } from \"fp-ts/Record\"\n * import { either } from \"fp-ts\"\n *\n * const f = (s: string) => (s.length < 4 ? either.right(`${s} is short`) : either.left(`${s} is not short`));\n * assert.deepStrictEqual(partitionMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left: {\n *     c: \"verylong is not short\",\n *   },\n *   right: {\n *     a: \"foo is short\",\n *     b: \"bar is short\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = RR.partitionMap;\nexport function reduce() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return args.length === 1 ? RR.reduce(args[0]) : RR.reduce(S.Ord).apply(void 0, args);\n}\nexport function foldMap(O) {\n    return 'compare' in O ? RR.foldMap(O) : RR.foldMap(S.Ord)(O);\n}\nexport function reduceRight() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return args.length === 1 ? RR.reduceRight(args[0]) : RR.reduceRight(S.Ord).apply(void 0, args);\n}\n/**\n * Compact a `Record` of `Option`s discarding the `None` values and\n * keeping the `Some` values.\n *\n * @example\n * import { compact } from 'fp-ts/Record'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(compact({ a: option.some(\"foo\"), b: option.none, c: option.some(\"bar\") }), {\n *   a: \"foo\",\n *   c: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = RR.compact;\n/**\n * Separate a `Record` of `Either`s into `Left`s and `Right`s.\n *\n * @example\n * import { separate } from 'fp-ts/Record'\n * import { either } from 'fp-ts'\n *\n * assert.deepStrictEqual(\n *   separate({ a: either.right(\"foo\"), b: either.left(\"bar\"), c: either.right(\"baz\") }),\n *   {\n *     right: {\n *       a: \"foo\",\n *       c: \"baz\",\n *     },\n *     left: {\n *       b: \"bar\",\n *     },\n *   }\n * );\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = RR.separate;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Record';\nexport function getShow(O) {\n    return 'compare' in O ? RR.getShow(O) : RR.getShow(S.Ord)(O);\n}\n/**\n * Given an `Eq` for the base type, it produces an `Eq`\n * for a `Record` of that base type.\n *\n * @example\n * import { getEq } from \"fp-ts/Record\";\n * import { string } from \"fp-ts\";\n * import { Eq } from \"fp-ts/Eq\";\n *\n * const eq: Eq<Record<string, string>> = getEq(string.Eq);\n * assert.deepStrictEqual(eq.equals({ a: \"foo\" }, { b: \"bar\" }), false);\n * assert.deepStrictEqual(eq.equals({ a: \"foo\" }, { a: \"foo\" }), true);\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RR.getEq;\n/**\n * Returns a `Monoid` instance for `Record`s, given a `Semigroup`\n * instance for the base type.\n * The `Monoid` makes the union of two `Record`s comining the\n * overlapping entries with the provided `Semigroup`.\n *\n * @example\n * import { SemigroupSum } from 'fp-ts/number'\n * import { getMonoid } from 'fp-ts/Record'\n *\n * const M = getMonoid(SemigroupSum);\n * assert.deepStrictEqual(M.concat({ foo: 123, bar: 234 }, { foo: 456, baz: 567 }), { foo: 579 , bar: 234, baz: 567 });\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = RR.getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Takes a value and a `Record` of functions and returns a\n * `Record` by applying each function to the input value.\n *\n * @example\n * import { flap } from \"fp-ts/Record\"\n *\n * const fab = { x: (n: number) => `${n} times 2`, y: (n: number) => `${n * 2}` };\n * assert.deepStrictEqual(flap(3)(fab), {\n *   x: \"3 times 2\",\n *   y: \"6\",\n * });\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * Produces a `Foldable` instance for a `Record`, using the\n * provided `Ord` to sort the `Record`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldable = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O)\n}); };\n/**\n * Produces a `FoldableWithIndex1` instance for a `Record`, using the\n * provided `Ord` to sort the `Record`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldableWithIndex = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O)\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex\n};\n/**\n * Produces a `Traversable` instance for a `Record`, using the\n * provided `Ord` to sort the `Record`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversable = function (O) { return ({\n    URI: URI,\n    map: _map,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O)\n}); };\n/**\n * Produces a `TraversableWithIndex` instance for a `Record`, using the\n * provided `Ord` to sort the `Record`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversableWithIndex = function (O) { return ({\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O),\n    traverseWithIndex: _traverseWithIndex(O)\n}); };\n/**\n * @category filtering\n * @since 2.11.0\n */\nexport var getWitherable = function (O) {\n    var T = getTraversable(O);\n    return {\n        URI: URI,\n        map: _map,\n        reduce: _reduce(O),\n        foldMap: _foldMap(O),\n        reduceRight: _reduceRight(O),\n        traverse: T.traverse,\n        sequence: T.sequence,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        wither: witherDefault(T, Compactable),\n        wilt: wiltDefault(T, Compactable)\n    };\n};\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `Record` of the base type.\n * The resulting `Semigroup` concatenates two `Record`s by\n * `union`.\n *\n * @example\n * import { getUnionSemigroup } from \"fp-ts/Record\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sRecord: Semigroup<Record<string, number>> = getUnionSemigroup(sNumber);\n * assert.deepStrictEqual(sRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { a: 1, b: -1, c: 4 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (S) {\n    var unionS = union(S);\n    return {\n        concat: function (first, second) { return unionS(second)(first); }\n    };\n};\n/**\n * Same as `getMonoid`.\n * Returns a `Monoid` instance for `Record`s given a `Semigroup`\n * instance for the base type.\n * The `Monoid` makes the union of two `Record`s combining the\n * entries that have the same key with the provided `Semigroup`.\n *\n * @example\n * import { SemigroupSum } from 'fp-ts/number'\n * import { getUnionMonoid } from 'fp-ts/Record'\n *\n * const M = getUnionMonoid(SemigroupSum);\n * assert.deepStrictEqual(M.concat({ foo: 123, bar: 234 }, { foo: 456, baz: 567 }), { foo: 579 , bar: 234, baz: 567 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (S) { return ({\n    concat: getUnionSemigroup(S).concat,\n    empty: {}\n}); };\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `Record` of the base type.\n * The resulting `Semigroup` concatenates two `Record`s by\n * `intersection`.\n *\n * @example\n * import { getIntersectionSemigroup } from \"fp-ts/Record\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sRecord: Semigroup<Record<string, number>> = getIntersectionSemigroup(sNumber);\n * assert.deepStrictEqual(sRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { b: -1 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (S) {\n    var intersectionS = intersection(S);\n    return {\n        concat: function (first, second) { return intersectionS(second)(first); }\n    };\n};\n/**\n * Produces a `Magma` with a `concat` function that combines\n * two `Record`s by making the `difference`.\n *\n * @example\n * import { getDifferenceMagma, difference } from \"fp-ts/Record\"\n * import { Magma } from \"fp-ts/Magma\"\n *\n * const r1 = { a: 3, c: 3 };\n * const r2 = { a: 1, b: 2 };\n * const m: Magma<Record<string, number>> = getDifferenceMagma<number>();\n * assert.deepStrictEqual(m.concat(r1, r2), difference(r2)(r1));\n * assert.deepStrictEqual(m.concat(r1, r2), { c: 3, b: 2 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function () { return ({\n    concat: function (first, second) { return difference(second)(first); }\n}); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `getFoldable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord)\n};\n/**\n * Use `getFoldableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord)\n};\n/**\n * Use `getTraversable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence\n};\n/**\n * Use the `getTraversableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord)\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * Use `getWitherable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * Use a new `{}` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var empty = {};\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\n/**\n * Use [`has`](#has) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var hasOwnProperty = RR.hasOwnProperty;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `R.Functor` instead of `R.record`\n * (where `R` is from `import R from 'fp-ts/Record'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var record = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord),\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord),\n    wither: _wither,\n    wilt: _wilt\n};\n", "import * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Returns a `Refinement` from a `Option` returning function.\n * This function ensures that a `Refinement` definition is type-safe.\n *\n * @category lifting\n * @since 2.11.0\n */\nexport var fromOptionK = function (getOption) {\n    return function (a) { return _.isSome(getOption(a)); };\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = function (getEither) {\n    return function (a) { return _.isRight(getEither(a)); };\n};\n/**\n * @category constructors\n * @since 2.11.0\n */\nexport var id = function () {\n    return function (_) { return true; };\n};\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var not = function (refinement) {\n    return function (a) {\n        return !refinement(a);\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var or = function (second) {\n    return function (first) {\n        return function (a) {\n            return first(a) || second(a);\n        };\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var and = function (second) {\n    return function (first) {\n        return function (a) {\n            return first(a) && second(a);\n        };\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var zero = function () {\n    return function (_) { return false; };\n};\n/**\n * @since 2.11.0\n */\nexport var compose = function (bc) {\n    return function (ab) {\n        return function (i) { return ab(i) && bc(i); };\n    };\n};\n", "/**\n * The `Ring` class is for types that support addition, multiplication, and subtraction operations.\n *\n * Instances must satisfy the following law in addition to the `Semiring` laws:\n *\n * - Additive inverse: `a - a <-> (zero - a) + a <-> zero`\n *\n * Adapted from https://github.com/purescript/purescript-prelude/blob/master/src/Data/Ring.purs\n *\n * @since 2.0.0\n */\nimport { getRing } from './function';\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Given a tuple of `Ring`s returns a `Ring` for the tuple\n *\n * @example\n * import { tuple } from 'fp-ts/Ring'\n * import * as N from 'fp-ts/number'\n *\n * const R = tuple(N.Field, N.Field, N.Field)\n * assert.deepStrictEqual(R.add([1, 2, 3], [4, 5, 6]), [5, 7, 9])\n * assert.deepStrictEqual(R.mul([1, 2, 3], [4, 5, 6]), [4, 10, 18])\n * assert.deepStrictEqual(R.one, [1, 1, 1])\n * assert.deepStrictEqual(R.sub([1, 2, 3], [4, 5, 6]), [-3, -3, -3])\n * assert.deepStrictEqual(R.zero, [0, 0, 0])\n *\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var rings = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        rings[_i] = arguments[_i];\n    }\n    return ({\n        add: function (x, y) { return rings.map(function (R, i) { return R.add(x[i], y[i]); }); },\n        zero: rings.map(function (R) { return R.zero; }),\n        mul: function (x, y) { return rings.map(function (R, i) { return R.mul(x[i], y[i]); }); },\n        one: rings.map(function (R) { return R.one; }),\n        sub: function (x, y) { return rings.map(function (R, i) { return R.sub(x[i], y[i]); }); }\n    });\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * `negate x` can be used as a shorthand for `zero - x`\n *\n * @since 2.0.0\n */\nexport var negate = function (R) {\n    return function (a) {\n        return R.sub(R.zero, a);\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleRing = tuple;\n/**\n * Use [`getRing`](./function.ts.html#getring) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFunctionRing = getRing;\n", "export {};\n", "/**\n * The `Semiring` class is for types that support an addition and multiplication operation.\n *\n * Instances must satisfy the following laws:\n *\n * - Commutative monoid under addition:\n *   - Associativity: `(a + b) + c <-> a + (b + c)`\n *   - Identity: `zero + a = a + zero <-> a`\n *   - Commutative: `a + b <-> b + a`\n * - Monoid under multiplication:\n *   - Associativity: `(a * b) * c <-> a * (b * c)`\n *   - Identity: `one * a <-> a * one <-> a`\n * - Multiplication distributes over addition:\n *   - Left distributivity: `a * (b + c) <-> (a * b) + (a * c)`\n *   - Right distributivity: `(a + b) * c <-> (a * c) + (b * c)`\n * - Annihilation: `zero * a <-> a * zero <-> zero`\n *\n * **Note:** The `number` type is not fully law abiding members of this class hierarchy due to the potential\n * for arithmetic overflows, and the presence of `NaN` and `Infinity` values. The behaviour is\n * unspecified in these cases.\n *\n * @since 2.0.0\n */\nimport { getSemiring } from './function';\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`getSemiring`](./function.ts.html#getsemiring) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFunctionSemiring = getSemiring;\n", "import { identity } from './function';\nimport * as RS from './ReadonlySet';\nimport { separated } from './Separated';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RS.getShow;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RS.getEq;\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @since 2.0.0\n */\nexport function map(E) {\n    var elemE = elem(E);\n    return function (f) { return function (set) {\n        var r = new Set();\n        set.forEach(function (e) {\n            var v = f(e);\n            if (!elemE(v, r)) {\n                r.add(v);\n            }\n        });\n        return r;\n    }; };\n}\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @since 2.0.0\n */\nexport function chain(E) {\n    var elemE = elem(E);\n    return function (f) { return function (set) {\n        var r = new Set();\n        set.forEach(function (e) {\n            f(e).forEach(function (e) {\n                if (!elemE(e, r)) {\n                    r.add(e);\n                }\n            });\n        });\n        return r;\n    }; };\n}\nexport function filter(predicate) {\n    return function (set) {\n        var values = set.values();\n        var e;\n        var r = new Set();\n        while (!(e = values.next()).done) {\n            var a = e.value;\n            if (predicate(a)) {\n                r.add(a);\n            }\n        }\n        return r;\n    };\n}\nexport function partition(predicate) {\n    return function (set) {\n        var values = set.values();\n        var e;\n        var right = new Set();\n        var left = new Set();\n        while (!(e = values.next()).done) {\n            var a = e.value;\n            if (predicate(a)) {\n                right.add(a);\n            }\n            else {\n                left.add(a);\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function union(E) {\n    var elemE = elem(E);\n    return function (me, that) {\n        if (that === undefined) {\n            var unionE_1 = union(E);\n            return function (that) { return unionE_1(me, that); };\n        }\n        if (isEmpty(me)) {\n            return that;\n        }\n        if (isEmpty(that)) {\n            return me;\n        }\n        var r = new Set(me);\n        that.forEach(function (e) {\n            if (!elemE(e, r)) {\n                r.add(e);\n            }\n        });\n        return r;\n    };\n}\nexport function intersection(E) {\n    var elemE = elem(E);\n    return function (me, that) {\n        if (that === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (that) { return intersectionE_1(that, me); };\n        }\n        if (isEmpty(me) || isEmpty(that)) {\n            return new Set();\n        }\n        var r = new Set();\n        me.forEach(function (e) {\n            if (elemE(e, that)) {\n                r.add(e);\n            }\n        });\n        return r;\n    };\n}\n/**\n * @since 2.0.0\n */\nexport function partitionMap(EB, EC) {\n    return function (f) {\n        return function (set) {\n            var values = set.values();\n            var e;\n            var left = new Set();\n            var right = new Set();\n            var hasB = elem(EB);\n            var hasC = elem(EC);\n            while (!(e = values.next()).done) {\n                var v = f(e.value);\n                switch (v._tag) {\n                    case 'Left':\n                        if (!hasB(v.left, left)) {\n                            left.add(v.left);\n                        }\n                        break;\n                    case 'Right':\n                        if (!hasC(v.right, right)) {\n                            right.add(v.right);\n                        }\n                        break;\n                }\n            }\n            return separated(left, right);\n        };\n    };\n}\nexport function difference(E) {\n    var elemE = elem(E);\n    return function (me, that) {\n        if (that === undefined) {\n            var differenceE_1 = difference(E);\n            return function (that) { return differenceE_1(that, me); };\n        }\n        return filter(function (a) { return !elemE(a, that); })(me);\n    };\n}\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) { return ({\n    concat: union(E)\n}); };\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getUnionMonoid = function (E) { return ({\n    concat: getUnionSemigroup(E).concat,\n    empty: new Set()\n}); };\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getIntersectionSemigroup = function (E) { return ({\n    concat: intersection(E)\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) { return ({\n    concat: difference(E)\n}); };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = RS.reduce;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = RS.foldMap;\n/**\n * @category folding\n * @since 2.11.0\n */\nexport var reduceRight = RS.reduceRight;\n/**\n * Create a set with one element\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var singleton = function (a) { return new Set([a]); };\n/**\n * Insert a value into a set\n *\n * @since 2.0.0\n */\nexport function insert(E) {\n    var elemE = elem(E);\n    return function (a) { return function (set) {\n        if (!elemE(a)(set)) {\n            var r = new Set(set);\n            r.add(a);\n            return r;\n        }\n        else {\n            return set;\n        }\n    }; };\n}\n/**\n * Delete a value from a set\n *\n * @since 2.0.0\n */\nexport var remove = function (E) {\n    return function (a) {\n        return function (set) {\n            return filter(function (ax) { return !E.equals(a, ax); })(set);\n        };\n    };\n};\n/**\n * Checks an element is a member of a set;\n * If yes, removes the value from the set\n * If no, inserts the value to the set\n *\n * @since 2.5.0\n */\nexport var toggle = function (E) {\n    var elemE = elem(E);\n    var removeE = remove(E);\n    var insertE = insert(E);\n    return function (a) { return function (set) { return (elemE(a, set) ? removeE : insertE)(a)(set); }; };\n};\n/**\n * Create a set from an array\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromArray = function (E) {\n    return function (as) {\n        var len = as.length;\n        var out = new Set();\n        var has = elem(E);\n        for (var i = 0; i < len; i++) {\n            var a = as[i];\n            if (!has(a, out)) {\n                out.add(a);\n            }\n        }\n        return out;\n    };\n};\n/**\n * @since 2.0.0\n */\nexport var compact = function (E) { return filterMap(E)(identity); };\n/**\n * @since 2.0.0\n */\nexport function separate(EE, EA) {\n    return function (fa) {\n        var elemEE = elem(EE);\n        var elemEA = elem(EA);\n        var left = new Set();\n        var right = new Set();\n        fa.forEach(function (e) {\n            switch (e._tag) {\n                case 'Left':\n                    if (!elemEE(e.left, left)) {\n                        left.add(e.left);\n                    }\n                    break;\n                case 'Right':\n                    if (!elemEA(e.right, right)) {\n                        right.add(e.right);\n                    }\n                    break;\n            }\n        });\n        return separated(left, right);\n    };\n}\n/**\n * @since 2.0.0\n */\nexport function filterMap(E) {\n    var elemE = elem(E);\n    return function (f) { return function (fa) {\n        var r = new Set();\n        fa.forEach(function (a) {\n            var ob = f(a);\n            if (ob._tag === 'Some' && !elemE(ob.value, r)) {\n                r.add(ob.value);\n            }\n        });\n        return r;\n    }; };\n}\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.0.0\n */\nexport var empty = new Set();\n/**\n * Test whether a `Set` is empty.\n *\n * @since 2.10.0\n */\nexport var isEmpty = function (set) { return set.size === 0; };\n/**\n * Calculate the number of elements in a `Set`.\n *\n * @since 2.10.0\n */\nexport var size = function (set) { return set.size; };\n/**\n * @since 2.0.0\n */\nexport var some = RS.some;\n/**\n * @since 2.0.0\n */\nexport var every = RS.every;\n/**\n * @since 2.10.0\n */\nexport var isSubset = RS.isSubset;\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of a set\n *\n * @since 2.0.0\n */\nexport var elem = RS.elem;\n/**\n * Get a sorted `Array` of the values contained in a `Set`.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toArray = function (O) {\n    return function (set) {\n        var out = [];\n        set.forEach(function (e) { return out.push(e); });\n        return out.sort(O.compare);\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`isSubset`](#issubset) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var subset = RS.isSubset;\n", "/**\n * The `Show` type class represents those types which can be converted into\n * a human-readable `string` representation.\n *\n * While not required, it is recommended that for any expression `x`, the\n * string `show(x)` be executable TypeScript code which evaluates to the same\n * value as the expression `x`.\n *\n * @since 2.0.0\n */\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nexport var struct = function (shows) { return ({\n    show: function (a) {\n        var s = '{';\n        for (var k in shows) {\n            if (_.has.call(shows, k)) {\n                s += \" \".concat(k, \": \").concat(shows[k].show(a[k]), \",\");\n            }\n        }\n        if (s.length > 1) {\n            s = s.slice(0, -1) + ' ';\n        }\n        s += '}';\n        return s;\n    }\n}); };\n/**\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var shows = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        shows[_i] = arguments[_i];\n    }\n    return ({\n        show: function (t) { return \"[\".concat(t.map(function (a, i) { return shows[i].show(a); }).join(', '), \"]\"); }\n    });\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleShow = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getStructShow = struct;\n/**\n * Use [`Show`](./boolean.ts.html#show) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var showBoolean = {\n    show: function (a) { return JSON.stringify(a); }\n};\n/**\n * Use [`Show`](./string.ts.html#show) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var showString = {\n    show: function (a) { return JSON.stringify(a); }\n};\n/**\n * Use [`Show`](./number.ts.html#show) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var showNumber = {\n    show: function (a) { return JSON.stringify(a); }\n};\n", "import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport * as chainable from './Chain';\nimport * as E from './Either';\nimport { chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromEitherK as fromEitherK_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_, tapEither as tapEither_ } from './FromEither';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { ask as ask_, asks as asks_, fromReaderK as fromReaderK_, tapReader as tapReader_ } from './FromReader';\nimport { chainStateK as chainStateK_, fromStateK as fromStateK_, get as get_, gets as gets_, modify as modify_, put as put_ } from './FromState';\nimport { fromTaskK as fromTaskK_, tapTask as tapTask_ } from './FromTask';\nimport { dual, flow, identity, pipe } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as R from './Reader';\nimport * as RTE from './ReaderTaskEither';\nimport * as ST from './StateT';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var left = function (e) { return function () { return RTE.left(e); }; };\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var right = /*#__PURE__*/ ST.of(RTE.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function rightTask(ma) {\n    return fromReaderTaskEither(RTE.rightTask(ma));\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function leftTask(me) {\n    return fromReaderTaskEither(RTE.leftTask(me));\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function rightReader(ma) {\n    return fromReaderTaskEither(RTE.rightReader(ma));\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function leftReader(me) {\n    return fromReaderTaskEither(RTE.leftReader(me));\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function rightIO(ma) {\n    return fromReaderTaskEither(RTE.rightIO(ma));\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function leftIO(me) {\n    return fromReaderTaskEither(RTE.leftIO(me));\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightState = function (sa) {\n    return flow(sa, RTE.right);\n};\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftState = function (me) { return function (s) {\n    return RTE.left(me(s)[0]);\n}; };\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = \n/*#__PURE__*/ E.match(function (e) { return left(e); }, right);\n/**\n * @category conversions\n * @since 2.11.0\n */\nexport var fromReader = rightReader;\n/**\n * @category conversions\n * @since 2.7.0\n */\nexport var fromIO = rightIO;\n/**\n * @category conversions\n * @since 2.7.0\n */\nexport var fromTask = rightTask;\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromState = \n/*#__PURE__*/ ST.fromState(RTE.Pointed);\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromTaskEither = function (ma) {\n    return fromReaderTaskEither(RTE.fromTaskEither(ma));\n};\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromIOEither = function (ma) {\n    return fromReaderTaskEither(RTE.fromIOEither(ma));\n};\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromReaderEither = function (ma) {\n    return fromReaderTaskEither(RTE.fromReaderEither(ma));\n};\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var fromReaderTaskEither = \n/*#__PURE__*/ ST.fromF(RTE.Functor);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Changes the value of the local context during the execution of the action `ma` (similar to `Contravariant`'s\n * `contramap`).\n *\n * @since 2.11.0\n */\nexport var local = function (f) {\n    return function (ma) {\n        return flow(ma, R.local(f));\n    };\n};\n/**\n * Less strict version of [`asksStateReaderTaskEither`](#asksstatereadertaskeither).\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksStateReaderTaskEitherW = function (f) {\n    return function (s) {\n        return function (r) {\n            return f(r)(s)(r);\n        };\n    };\n};\n/**\n * Effectfully accesses the environment.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asksStateReaderTaskEither = asksStateReaderTaskEitherW;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromIOEitherK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromIOEither(f.apply(void 0, a));\n    };\n};\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromTaskEitherK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromTaskEither(f.apply(void 0, a));\n    };\n};\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromReaderTaskEitherK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromReaderTaskEither(f.apply(void 0, a));\n    };\n};\n/**\n * Alias of `flatMapReaderTaskEither`.\n *\n * Less strict version of [`chainReaderTaskEitherK`](#chainreadertaskeitherk).\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainReaderTaskEitherKW = function (f) {\n    return function (ma) {\n        return flatMap(ma, fromReaderTaskEitherK(f));\n    };\n};\n/**\n * Alias of `flatMapReaderTaskEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainReaderTaskEitherK = chainReaderTaskEitherKW;\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return function (s) {\n    return pipe(fa(s), RTE.alt(function () { return that()(s); }));\n}; };\nvar _bimap = function (fea, f, g) { return function (s) {\n    return pipe(fea(s), RTE.bimap(f, function (_a) {\n        var a = _a[0], s = _a[1];\n        return [g(a), s];\n    }));\n}; };\nvar _mapLeft = function (fea, f) { return function (s) { return pipe(fea(s), RTE.mapLeft(f)); }; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = /*#__PURE__*/ ST.map(RTE.Functor);\n/**\n * Map a pair of functions over the two last type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.6.2\n */\nexport var bimap = function (f, g) { return function (fa) {\n    return _bimap(fa, f, g);\n}; };\n/**\n * Map a function over the third type argument of a bifunctor.\n *\n * @category error handling\n * @since 2.6.2\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return _mapLeft(fa, f);\n}; };\n/**\n * @since 2.0.0\n */\nexport var ap = /*#__PURE__*/ ST.ap(RTE.Chain);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.8.0\n */\nexport var apW = ap;\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = right;\n/** @internal */\nvar _FromIO = {\n    fromIO: fromIO\n};\n/** @internal */\nvar _FromTask = {\n    fromTask: fromTask\n};\n/** @internal */\nvar _FromReader = {\n    fromReader: fromReader\n};\n/** @internal */\nvar _FromEither = {\n    fromEither: fromEither\n};\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, ST.flatMap(RTE.Monad));\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTaskEither = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, function (a) { return fromTaskEitherK(f)(a); }); });\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = /*#__PURE__*/ _.flatMapIO(_FromIO, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTask = /*#__PURE__*/ _.flatMapTask(_FromTask, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReader = /*#__PURE__*/ _.flatMapReader(_FromReader, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIOEither = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, function (a) { return fromIOEitherK(f)(a); }); });\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapEither = /*#__PURE__*/ dual(2, _.flatMapEither(_FromEither, _FlatMap));\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapOption = /*#__PURE__*/ _.flatMapOption(_FromEither, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapReaderTaskEither = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, function (a) { return fromReaderTaskEitherK(f)(a); }); });\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapState = /*#__PURE__*/ dual(2, function (self, f) { return flatMap(self, fromStateK(f)); });\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category sequencing\n * @since 2.11.0\n */\nexport var flattenW = /*#__PURE__*/ flatMap(identity);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the environment, the error and the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) {\n    return function (fa) {\n        return function (r) {\n            return pipe(fa(r), RTE.altW(function () { return that()(r); }));\n        };\n    };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category error handling\n * @since 2.6.2\n */\nexport var alt = altW;\n/**\n * @since 2.7.0\n */\nexport var throwError = left;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'StateReaderTaskEither';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Right` value of this `StateReaderTaskEither` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Right` value of this `StateReaderTaskEither` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Less strict version of [`apFirst`](#apfirst).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apFirstW = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * Less strict version of [`apSecond`](#apsecond).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.12.0\n */\nexport var apSecondW = apSecond;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromState = {\n    URI: URI,\n    fromState: fromState\n};\n/**\n * Get the current state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var get = /*#__PURE__*/ get_(FromState);\n/**\n * Set the state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var put = /*#__PURE__*/ put_(FromState);\n/**\n * Modify the state by applying a function to the current state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var modify = \n/*#__PURE__*/ modify_(FromState);\n/**\n * Get a value which depends on the current state\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var gets = \n/*#__PURE__*/ gets_(FromState);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromStateK = /*#__PURE__*/ fromStateK_(FromState);\n/**\n * Alias of `flatMapState`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainStateK = /*#__PURE__*/ chainStateK_(FromState, Chain);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromReader = {\n    URI: URI,\n    fromReader: fromReader\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapTask = /*#__PURE__*/ dual(2, tapTask_(FromTask, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapReader = /*#__PURE__*/ dual(2, tapReader_(FromReader, Chain));\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * Reads the current context.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var ask = /*#__PURE__*/ ask_(FromReader);\n/**\n * Projects a value from the global context in a `ReaderEither`.\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var asks = \n/*#__PURE__*/ asks_(FromReader);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromReaderK = /*#__PURE__*/ fromReaderK_(FromReader);\n/**\n * Alias of `flatMapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderK = flatMapReader;\n/**\n * Alias of `flatMapReader`.\n *\n * Less strict version of [`chainReaderK`](#chainReaderK).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainReaderKW = flatMapReader;\n/**\n * Alias of `tapReader`.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderK = tapReader;\n/**\n * Alias of `tapReader`.\n *\n * Less strict version of [`chainFirstReaderK`](#chainFirstReaderK).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.11.0\n */\nexport var chainFirstReaderKW = tapReader;\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport var fromOption = /*#__PURE__*/ fromOption_(FromEither);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromOptionK = /*#__PURE__*/ fromOptionK_(FromEither);\n/**\n * Use `flatMapOption`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainOptionK = /*#__PURE__*/ chainOptionK_(FromEither, Chain);\n/**\n * Use `flatMapOption`.\n *\n * Less strict version of [`chainOptionK`](#chainoptionk).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category legacy\n * @since 2.13.2\n */\nexport var chainOptionKW = chainOptionK;\n/**\n * Alias of `flatMapEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainEitherK = flatMapEither;\n/**\n * Alias of `flatMapEither`.\n *\n * Less strict version of [`chainEitherK`](#chaineitherk).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainEitherKW = flatMapEither;\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * Alias of `tapEither`.\n *\n * Less strict version of [`chainFirstEitherK`](#chainfirsteitherk).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherKW = tapEither;\n/**\n * @category lifting\n * @since 2.4.4\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n/**\n * @category filtering\n * @since 2.4.4\n */\nexport var filterOrElse = /*#__PURE__*/ filterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * The `W` suffix (short for **W**idening) means that the error types will be merged.\n *\n * @category filtering\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * @category lifting\n * @since 2.4.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromIOK = /*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * Alias of `flatMapTaskEither`.\n *\n * Less strict version of [`chainTaskEitherK`](#chaintaskeitherk).\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainTaskEitherKW = flatMapTaskEither;\n/**\n * Alias of `flatMapTaskEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainTaskEitherK = flatMapTaskEither;\n/**\n * Alias of `flatMapIOEither`.\n *\n * Less strict version of [`chainIOEitherK`](#chainioeitherk).\n *\n * @category legacy\n * @since 2.6.1\n */\nexport var chainIOEitherKW = flatMapIOEither;\n/**\n * Alias of `flatMapIOEither`.\n *\n * @category legacy\n * @since 2.4.0\n */\nexport var chainIOEitherK = flatMapIOEither;\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromTaskK = /*#__PURE__*/ fromTaskK_(FromTask);\n/**\n * Alias of `flatMapTask`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainTaskK = flatMapTask;\n/**\n * Alias of `tapTask`.\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstTaskK = tapTask;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Run a computation in the `StateReaderTaskEither` monad, discarding the final state\n *\n * @since 2.8.0\n */\nexport var evaluate = \n/*#__PURE__*/ ST.evaluate(RTE.Functor);\n/**\n * Run a computation in the `StateReaderTaskEither` monad discarding the result\n *\n * @since 2.8.0\n */\nexport var execute = \n/*#__PURE__*/ ST.execute(RTE.Functor);\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @since 2.8.0\n */\nexport var bindW = bind;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * Less strict version of [`apS`](#aps).\n *\n * The `W` suffix (short for **W**idening) means that the environment types and the error types will be merged.\n *\n * @category do notation\n * @since 2.8.0\n */\nexport var apSW = apS;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        return function (s) {\n            return function (r) {\n                return function () {\n                    return _.tail(as).reduce(function (acc, a, i) {\n                        return acc.then(function (ebs) {\n                            return _.isLeft(ebs)\n                                ? acc\n                                : f(i + 1, a)(ebs.right[1])(r)().then(function (eb) {\n                                    if (_.isLeft(eb)) {\n                                        return eb;\n                                    }\n                                    var _a = eb.right, b = _a[0], s = _a[1];\n                                    ebs.right[0].push(b);\n                                    ebs.right[1] = s;\n                                    return ebs;\n                                });\n                        });\n                    }, f(0, _.head(as))(s)(r)().then(E.map(function (_a) {\n                        var b = _a[0], s = _a[1];\n                        return [[b], s];\n                    })));\n                };\n            };\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : of(_.emptyReadonlyArray)); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = /*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.6.0\n */\nexport var chainW = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chainFirst = tap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.8.0\n */\nexport var chainFirstW = tap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `SRTE.Functor` instead of `SRTE.stateReaderTaskEither`\n * (where `SRTE` is from `import SRTE from 'fp-ts/StateReaderTaskEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var stateReaderTaskEither = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    alt: _alt,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `SRTE.Functor` instead of `SRTE.stateReaderTaskEitherSeq`\n * (where `SRTE` is from `import SRTE from 'fp-ts/StateReaderTaskEither'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var stateReaderTaskEitherSeq = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    alt: _alt,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * Use [`evaluate`](#evaluate) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\n/* istanbul ignore next */\nexport var evalState = function (fsa, s) {\n    return pipe(fsa(s), RTE.map(function (_a) {\n        var a = _a[0];\n        return a;\n    }));\n};\n/**\n * Use [`execute`](#execute) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\n/* istanbul ignore next */\nexport var execState = function (fsa, s) {\n    return pipe(fsa(s), RTE.map(function (_a) {\n        var _ = _a[0], s = _a[1];\n        return s;\n    }));\n};\n/**\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\n/* istanbul ignore next */\nexport function run(ma, s, r) {\n    return ma(s)(r)();\n}\n", "import { pipe } from './function';\nimport { snd } from './ReadonlyTuple';\nexport function of(F) {\n    return function (a) { return function (s) { return F.of([a, s]); }; };\n}\nexport function map(F) {\n    return function (f) { return function (fa) { return function (s) { return F.map(fa(s), function (_a) {\n        var a = _a[0], s1 = _a[1];\n        return [f(a), s1];\n    }); }; }; };\n}\nexport function ap(M) {\n    return function (fa) { return function (fab) { return function (s) { return M.chain(fab(s), function (_a) {\n        var f = _a[0], s = _a[1];\n        return M.map(fa(s), function (_a) {\n            var a = _a[0], s = _a[1];\n            return [f(a), s];\n        });\n    }); }; }; };\n}\nexport function chain(M) {\n    var flatMapM = flatMap(M);\n    return function (f) { return function (ma) { return flatMapM(ma, f); }; };\n}\n/** @internal */\nexport function flatMap(M) {\n    return function (ma, f) { return function (s) { return M.chain(ma(s), function (_a) {\n        var a = _a[0], s1 = _a[1];\n        return f(a)(s1);\n    }); }; };\n}\nexport function fromState(F) {\n    return function (sa) { return function (s) { return F.of(sa(s)); }; };\n}\nexport function fromF(F) {\n    return function (ma) { return function (s) { return F.map(ma, function (a) { return [a, s]; }); }; };\n}\nexport function evaluate(F) {\n    return function (s) { return function (ma) { return F.map(ma(s), function (_a) {\n        var a = _a[0];\n        return a;\n    }); }; };\n}\nexport function execute(F) {\n    return function (s) { return function (ma) { return F.map(ma(s), snd); }; };\n}\n/** @deprecated */\n/* istanbul ignore next */\nexport function getStateM(M) {\n    var _ap = ap(M);\n    var _map = map(M);\n    var _chain = chain(M);\n    var _evaluate = evaluate(M);\n    var _execute = execute(M);\n    return {\n        map: function (fa, f) { return pipe(fa, _map(f)); },\n        ap: function (fab, fa) { return pipe(fab, _ap(fa)); },\n        of: of(M),\n        chain: function (ma, f) { return pipe(ma, _chain(f)); },\n        get: function () { return function (s) { return M.of([s, s]); }; },\n        put: function (s) { return function () { return M.of([undefined, s]); }; },\n        modify: function (f) { return function (s) { return M.of([undefined, f(s)]); }; },\n        gets: function (f) { return function (s) { return M.of([f(s), s]); }; },\n        fromState: fromState(M),\n        fromM: fromF(M),\n        evalState: function (fa, s) { return pipe(fa, _evaluate(s)); },\n        execState: function (fa, s) { return pipe(fa, _execute(s)); }\n    };\n}\n", "import { identity, pipe } from './function';\nimport { flap as flap_ } from './Functor';\n/**\n * Reposition the focus at the specified position\n *\n * @since 2.0.0\n */\nexport function seek(s) {\n    return function (wa) { return ({ peek: wa.peek, pos: s }); };\n}\n/**\n * Reposition the focus at the specified position, which depends on the current position\n *\n * @since 2.0.0\n */\nexport function seeks(f) {\n    return function (wa) { return ({ peek: wa.peek, pos: f(wa.pos) }); };\n}\n/**\n * Extract a value from a position which depends on the current position\n *\n * @since 2.0.0\n */\nexport function peeks(f) {\n    return function (wa) { return wa.peek(f(wa.pos)); };\n}\nexport function experiment(F) {\n    return function (f) { return function (wa) { return F.map(f(wa.pos), function (s) { return wa.peek(s); }); }; };\n}\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) { return ({\n    peek: function (s) { return f({ peek: wa.peek, pos: s }); },\n    pos: wa.pos\n}); }; };\n/**\n * @category Extract\n * @since 2.6.2\n */\nexport var extract = function (wa) { return wa.peek(wa.pos); };\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return ({\n    peek: function (s) { return f(fa.peek(s)); },\n    pos: fa.pos\n}); }; };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Store';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Comonad` instance, pass `S.Comonad` instead of `S.store`\n * (where `S` is from `import S from 'fp-ts/Store'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var store = Comonad;\n", "import { identity } from './function';\nexport function split(S, C) {\n    return function (pab, pcd) {\n        return C.compose(S.second(pcd), S.first(pab));\n    };\n}\nexport function fanOut(S, C) {\n    var splitSC = split(S, C);\n    return function (pab, pac) {\n        return C.compose(splitSC(pab, pac), S.promap(C.id(), identity, function (a) { return [a, a]; }));\n    };\n}\nexport function splitStrong(F) {\n    return split(F, F);\n}\nexport function fanout(F) {\n    return fanOut(F, F);\n}\n", "/**\n * @since 2.10.0\n */\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * Return a semigroup which works like `Object.assign`.\n *\n * @example\n * import { getAssignSemigroup } from 'fp-ts/struct'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n *\n * const S = getAssignSemigroup<Person>()\n * assert.deepStrictEqual(S.concat({ name: 'name', age: 23 }, { name: 'name', age: 24 }), { name: 'name', age: 24 })\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getAssignSemigroup = function () { return ({\n    concat: function (first, second) { return Object.assign({}, first, second); }\n}); };\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Creates a new object by recursively evolving a shallow copy of `a`, according to the `transformation` functions.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import { evolve } from 'fp-ts/struct'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     { a: 'a', b: 1 },\n *     evolve({\n *       a: (a) => a.length,\n *       b: (b) => b * 2\n *     })\n *   ),\n *   { a: 1, b: 2 }\n * )\n *\n * @since 2.11.0\n */\nexport var evolve = function (transformations) {\n    return function (a) {\n        var out = {};\n        for (var k in a) {\n            if (_.has.call(a, k)) {\n                out[k] = transformations[k](a[k]);\n            }\n        }\n        return out;\n    };\n};\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport * as chainable from './Chain';\nimport { compact as compact_, separate as separate_ } from './Compactable';\nimport { filter as filter_, filterMap as filterMap_, partition as partition_, partitionMap as partitionMap_ } from './Filterable';\nimport { chainEitherK as chainEitherK_, fromEitherK as fromEitherK_, tapEither as tapEither_ } from './FromEither';\nimport { fromIOK as fromIOK_, tapIO as tapIO_ } from './FromIO';\nimport { fromTaskK as fromTaskK_, tapTask as tapTask_ } from './FromTask';\nimport { dual, flow, identity, pipe, SK } from './function';\nimport { as as as_, asUnit as asUnit_, bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\nimport * as O from './Option';\nimport * as OT from './OptionT';\nimport * as T from './Task';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var some = /*#__PURE__*/ OT.some(T.Pointed);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromPredicate = /*#__PURE__*/ OT.fromPredicate(T.Pointed);\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromOption = T.of;\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromEither = /*#__PURE__*/ OT.fromEither(T.Pointed);\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromIO = function (ma) { return fromTask(T.fromIO(ma)); };\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromTask = /*#__PURE__*/ OT.fromF(T.Functor);\n/**\n * @category conversions\n * @since 2.11.0\n */\nexport var fromTaskEither = /*#__PURE__*/ T.map(O.fromEither);\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = \n/*#__PURE__*/ OT.match(T.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = match;\n/**\n * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`Task`).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchE = \n/*#__PURE__*/ OT.matchE(T.Chain);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchEW = matchE;\n/**\n * Alias of [`matchEW`](#matchew).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchEW;\n/**\n * @category error handling\n * @since 2.10.0\n */\nexport var getOrElse = /*#__PURE__*/ OT.getOrElse(T.Monad);\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var getOrElseW = getOrElse;\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromNullable = /*#__PURE__*/ OT.fromNullable(T.Pointed);\n/**\n * Transforms a `Promise` that may reject to a `Promise` that never rejects and returns an `Option` instead.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatch = function (f) {\n    return function () { return __awaiter(void 0, void 0, void 0, function () {\n        var reason_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    return [4 /*yield*/, f().then(_.some)];\n                case 1: return [2 /*return*/, _a.sent()];\n                case 2:\n                    reason_1 = _a.sent();\n                    return [2 /*return*/, _.none];\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); };\n};\n/**\n * Converts a function returning a `Promise` to one returning a `TaskOption`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return tryCatch(function () { return f.apply(void 0, a); });\n    };\n};\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromNullableK = /*#__PURE__*/ OT.fromNullableK(T.Pointed);\n/**\n * @category sequencing\n * @since 2.10.0\n */\nexport var chainNullableK = /*#__PURE__*/ OT.chainNullableK(T.Monad);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromOptionK = /*#__PURE__*/ OT.fromOptionK(T.Pointed);\n/**\n * @category sequencing\n * @since 2.10.0\n */\nexport var chainOptionK = \n/*#__PURE__*/ OT.chainOptionK(T.Monad);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var map = /*#__PURE__*/ OT.map(T.Functor);\n/**\n * @since 2.10.0\n */\nexport var ap = /*#__PURE__*/ OT.ap(T.ApplyPar);\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var of = some;\n/** @internal */\nvar _FromIO = {\n    fromIO: fromIO\n};\n/** @internal */\nvar _FromTask = {\n    fromTask: fromTask\n};\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, OT.flatMap(T.Monad));\n/** @internal */\nvar _FlatMap = {\n    flatMap: flatMap\n};\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapIO = /*#__PURE__*/ _.flatMapIO(_FromIO, _FlatMap);\n/**\n * @category sequencing\n * @since 2.16.0\n */\nexport var flatMapTask = /*#__PURE__*/ _.flatMapTask(_FromTask, _FlatMap);\n/**\n * @category sequencing\n * @since 2.10.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * @category error handling\n * @since 2.10.0\n */\nexport var alt = /*#__PURE__*/ OT.alt(T.Monad);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.10.0\n */\nexport var altW = alt;\n/**\n * @since 2.10.0\n */\nexport var zero = /*#__PURE__*/ OT.zero(T.Pointed);\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var none = /*#__PURE__*/ zero();\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var compact = /*#__PURE__*/ compact_(T.Functor, O.Compactable);\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var separate = /*#__PURE__*/ separate_(T.Functor, O.Compactable, O.Functor);\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var filter = /*#__PURE__*/ filter_(T.Functor, O.Filterable);\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var filterMap = \n/*#__PURE__*/ filterMap_(T.Functor, O.Filterable);\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var partition = /*#__PURE__*/ partition_(T.Functor, O.Filterable);\n/**\n * @category filtering\n * @since 2.10.0\n */\nexport var partitionMap = /*#__PURE__*/ partitionMap_(T.Functor, O.Filterable);\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _filter = function (fa, predicate) {\n    return pipe(fa, filter(predicate));\n};\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/**\n * @category type lambdas\n * @since 2.10.0\n */\nexport var URI = 'TaskOption';\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Maps the `Some` value of this `TaskOption` to the specified constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var as = dual(2, as_(Functor));\n/**\n * Maps the `Some` value of this `TaskOption` to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n */\nexport var asUnit = asUnit_(Functor);\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.10.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(ApplyPar);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.10.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(ApplyPar);\n/**\n * Runs computations in parallel.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\nvar _apSeq = function (fab, fa) { return flatMap(fab, function (f) { return pipe(fa, map(f)); }); };\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplySeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq\n};\n/**\n * Runs computations sequentially.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category combinators\n * @since 2.15.0\n */\nexport var tap = /*#__PURE__*/ dual(2, chainable.tap(Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as TO from 'fp-ts/TaskOption'\n * import * as O from 'fp-ts/Option'\n * import * as E from 'fp-ts/Either'\n *\n * const compute = (value: number) => pipe(\n *   TO.of(value),\n *   TO.tapEither((value) => value > 0 ? E.right('ok') : E.left('error')),\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await compute(1)(), O.of(1))\n *   assert.deepStrictEqual(await compute(-1)(), O.none)\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapEither = /*#__PURE__*/ dual(2, tapEither_(FromEither, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as TO from 'fp-ts/TaskOption'\n * import * as O from 'fp-ts/Option'\n * import * as Console from 'fp-ts/Console'\n *\n *\n * // Will produce `Hello, fp-ts` to the stdout\n * const effectA = TO.tapIO(\n *   TO.of(1),\n *   (value) => Console.log(`Hello, ${value}`)\n * )\n *\n * // No output to the stdout\n * const effectB = pipe(\n *   TO.none as TO.TaskOption<string>,\n *   TO.tapIO((value) => Console.log(`Hello, ${value}`))\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effectA(), O.of(1))\n *   assert.deepStrictEqual(await effectB(), O.none)\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapIO = /*#__PURE__*/ dual(2, tapIO_(FromIO, Chain));\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as TO from 'fp-ts/TaskOption'\n * import * as O from 'fp-ts/Option'\n * import * as T from 'fp-ts/Task'\n *\n * const effect = TO.tapIO(\n *   TO.of(1),\n *   (value) => T.of(value + 1)\n * )\n *\n * async function test() {\n *   assert.deepStrictEqual(await effect(), O.of(1))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.16.0\n */\nexport var tapTask = /*#__PURE__*/ dual(2, tapTask_(FromTask, Chain));\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/ guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromIOK = \n/*#__PURE__*/ fromIOK_(FromIO);\n/**\n * Alias of `flatMapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainIOK = flatMapIO;\n/**\n * Alias of `tapIO`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstIOK = tapIO;\n/**\n * @category lifting\n * @since 2.12.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n/**\n * @category sequencing\n * @since 2.12.0\n */\nexport var chainEitherK = \n/*#__PURE__*/ chainEitherK_(FromEither, Chain);\n/**\n * Alias of `tapEither`.\n *\n * @category legacy\n * @since 2.12.0\n */\nexport var chainFirstEitherK = tapEither;\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromTaskK = \n/*#__PURE__*/ fromTaskK_(FromTask);\n/**\n * Alias of `flatMapTask`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainTaskK = flatMapTask;\n/**\n * Alias of `tapTask`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirstTaskK = tapTask;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.10.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.10.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.10.0\n */\nexport var bind = /*#__PURE__*/ chainable.bind(Chain);\n/**\n * @category do notation\n * @since 2.10.0\n */\nexport var apS = /*#__PURE__*/ apS_(ApplyPar);\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(T.traverseReadonlyNonEmptyArrayWithIndex(f), T.map(O.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {\n    return function (as) {\n        return function () {\n            return _.tail(as).reduce(function (acc, a, i) {\n                return acc.then(function (obs) {\n                    return _.isNone(obs)\n                        ? acc\n                        : f(i + 1, a)().then(function (ob) {\n                            if (_.isNone(ob)) {\n                                return ob;\n                            }\n                            obs.value.push(ob.value);\n                            return obs;\n                        });\n                });\n            }, f(0, _.head(as))().then(O.map(_.singleton)));\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var traverseSeqArray = function (f) { return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.\n *\n * @category traversing\n * @since 2.10.0\n */\nexport var sequenceSeqArray = \n/*#__PURE__*/ traverseSeqArray(identity);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chain = flatMap;\n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.10.0\n */\nexport var chainFirst = tap;\n", "import { getApplySemigroup } from './Apply';\nimport { fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_ } from './FromEither';\nimport { fromIOK as fromIOK_ } from './FromIO';\nimport { fromTaskK as fromTaskK_ } from './FromTask';\nimport { fromTheseK as fromTheseK_ } from './FromThese';\nimport { flow, pipe, SK } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as T from './Task';\nimport * as TH from './These';\nimport * as TT from './TheseT';\n/**\n * @category constructors\n * @since 2.4.0\n */\nexport var left = /*#__PURE__*/ TT.left(T.Pointed);\n/**\n * @category constructors\n * @since 2.4.0\n */\nexport var right = /*#__PURE__*/ TT.right(T.Pointed);\n/**\n * @category constructors\n * @since 2.4.0\n */\nexport var both = /*#__PURE__*/ TT.both(T.Pointed);\n/**\n * @category constructors\n * @since 2.4.0\n */\nexport var rightTask = /*#__PURE__*/ TT.rightF(T.Functor);\n/**\n * @category constructors\n * @since 2.4.0\n */\nexport var leftTask = /*#__PURE__*/ TT.leftF(T.Functor);\n/**\n * @category constructors\n * @since 2.4.0\n */\nexport var rightIO = /*#__PURE__*/ flow(T.fromIO, rightTask);\n/**\n * @category constructors\n * @since 2.4.0\n */\nexport var leftIO = /*#__PURE__*/ flow(T.fromIO, leftTask);\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromEither = T.of;\n/**\n * @category conversions\n * @since 2.11.0\n */\nexport var fromThese = T.of;\n/**\n * @category conversions\n * @since 2.7.0\n */\nexport var fromIO = rightIO;\n/**\n * @category conversions\n * @since 2.4.0\n */\nexport var fromIOEither = T.fromIO;\n/**\n * @category conversions\n * @since 2.7.0\n */\nexport var fromTask = rightTask;\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = /*#__PURE__*/ TT.match(T.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = match;\n/**\n * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`Task`).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchE = /*#__PURE__*/ TT.matchE(T.Monad);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category pattern matching\n * @since 2.4.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchEW = fold;\n/**\n * Alias of [`matchEW`](#matchew).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchEW;\n/**\n * @since 2.4.0\n */\nexport var swap = /*#__PURE__*/ TT.swap(T.Functor);\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\n/* istanbul ignore next */\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.4.0\n */\nexport var map = /*#__PURE__*/ TT.map(T.Functor);\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.4.0\n */\nexport var bimap = \n/*#__PURE__*/ TT.bimap(T.Functor);\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category error handling\n * @since 2.4.0\n */\nexport var mapLeft = /*#__PURE__*/ TT.mapLeft(T.Functor);\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * @category type lambdas\n * @since 2.4.0\n */\nexport var URI = 'TaskThese';\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getApply = function (A, S) {\n    var ap = TT.ap(A, S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return pipe(fab, ap(fa)); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getApplicative(A, S) {\n    var ap = getApply(A, S).ap;\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: ap,\n        of: of\n    };\n}\n/**\n * @category instances\n * @since 2.10.0\n */\nexport function getChain(S) {\n    var A = getApply(T.ApplicativePar, S);\n    var chain = TT.chain(T.Monad, S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        chain: function (ma, f) { return pipe(ma, chain(f)); }\n    };\n}\n/**\n * @category instances\n * @since 2.4.0\n */\nexport function getMonad(S) {\n    var A = getApplicative(T.ApplicativePar, S);\n    var C = getChain(S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        of: of,\n        chain: C.chain,\n        fromIO: fromIO,\n        fromTask: fromTask\n    };\n}\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromOption = \n/*#__PURE__*/ fromOption_(FromEither);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromOptionK = \n/*#__PURE__*/ fromOptionK_(FromEither);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromThese = {\n    URI: URI,\n    fromThese: fromThese\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromTheseK = /*#__PURE__*/ fromTheseK_(FromThese);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromIOK = /*#__PURE__*/ fromIOK_(FromIO);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromTaskK = /*#__PURE__*/ fromTaskK_(FromTask);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nexport var toTuple2 = \n/*#__PURE__*/ TT.toTuple2(T.Functor);\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(getApplicative(T.ApplicativePar, S))`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (S) {\n    var g = TH.traverseReadonlyNonEmptyArrayWithIndex(S);\n    return function (f) { return flow(T.traverseReadonlyNonEmptyArrayWithIndex(f), T.map(g(SK))); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(getApplicative(T.ApplicativePar, S))`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (S) {\n    return function (f) {\n        var g = traverseReadonlyNonEmptyArrayWithIndex(S)(f);\n        return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n    };\n};\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(getApplicative(T.ApplicativeSeq, S))`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (S) {\n    return function (f) {\n        return function (as) {\n            return function () {\n                return _.tail(as).reduce(function (acc, a, i) {\n                    return acc.then(function (ebs) {\n                        return TH.isLeft(ebs)\n                            ? acc\n                            : f(i + 1, a)().then(function (eb) {\n                                if (TH.isLeft(eb)) {\n                                    return eb;\n                                }\n                                if (TH.isBoth(eb)) {\n                                    var right_1 = ebs.right;\n                                    right_1.push(eb.right);\n                                    return TH.isBoth(ebs) ? TH.both(S.concat(ebs.left, eb.left), right_1) : TH.both(eb.left, right_1);\n                                }\n                                ebs.right.push(eb.right);\n                                return ebs;\n                            });\n                    });\n                }, f(0, _.head(as))().then(TH.map(_.singleton)));\n            };\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(getApplicative(T.ApplicativeSeq, S))`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (S) {\n    return function (f) {\n        var g = traverseReadonlyNonEmptyArrayWithIndexSeq(S)(f);\n        return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`Functor`](#functor) instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var functorTaskThese = {\n    URI: URI,\n    map: _map\n};\n/**\n * Use [`Bifunctor`](#bifunctor) instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var bifunctorTaskThese = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * Use [`toTuple2`](#totuple2) instead.\n *\n * @category zone of death\n * @since 2.4.0\n * @deprecated\n */\nexport var toTuple = function (e, a) {\n    return toTuple2(function () { return e; }, function () { return a; });\n};\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `TT.Functor` instead of `TT.taskThese`\n * (where `TT` is from `import TT from 'fp-ts/TaskThese'`)\n *\n * @category zone of death\n * @since 2.4.0\n * @deprecated\n */\nexport var taskThese = {\n    URI: URI,\n    map: _map,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.4.0\n * @deprecated\n */\nexport var getSemigroup = function (SE, SA) {\n    return getApplySemigroup(T.ApplySeq)(TH.getSemigroup(SE, SA));\n};\n", "import { fromEquals } from './Eq';\nimport { fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_ } from './FromEither';\nimport { identity, pipe } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the these is an instance of `Left`, `false` otherwise\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isLeft = function (fa) { return fa._tag === 'Left'; };\n/**\n * Returns `true` if the these is an instance of `Right`, `false` otherwise\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isRight = function (fa) { return fa._tag === 'Right'; };\n/**\n * Returns `true` if the these is an instance of `Both`, `false` otherwise\n *\n * @category refinements\n * @since 2.0.0\n */\nexport function isBoth(fa) {\n    return fa._tag === 'Both';\n}\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function left(left) {\n    return { _tag: 'Left', left: left };\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function right(right) {\n    return { _tag: 'Right', right: right };\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function both(left, right) {\n    return { _tag: 'Both', left: left, right: right };\n}\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = function (onLeft, onRight, onBoth) {\n    return function (fa) {\n        switch (fa._tag) {\n            case 'Left':\n                return onLeft(fa.left);\n            case 'Right':\n                return onRight(fa.right);\n            case 'Both':\n                return onBoth(fa.left, fa.right);\n        }\n    };\n};\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * @since 2.4.0\n */\nexport var swap = match(right, left, function (e, a) { return both(a, e); });\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(SE, SA) {\n    return {\n        show: match(function (l) { return \"left(\".concat(SE.show(l), \")\"); }, function (a) { return \"right(\".concat(SA.show(a), \")\"); }, function (l, a) { return \"both(\".concat(SE.show(l), \", \").concat(SA.show(a), \")\"); })\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getEq(EE, EA) {\n    return fromEquals(function (x, y) {\n        return isLeft(x)\n            ? isLeft(y) && EE.equals(x.left, y.left)\n            : isRight(x)\n                ? isRight(y) && EA.equals(x.right, y.right)\n                : isBoth(y) && EE.equals(x.left, y.left) && EA.equals(x.right, y.right);\n    });\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getSemigroup(SE, SA) {\n    return {\n        concat: function (x, y) {\n            return isLeft(x)\n                ? isLeft(y)\n                    ? left(SE.concat(x.left, y.left))\n                    : isRight(y)\n                        ? both(x.left, y.right)\n                        : both(SE.concat(x.left, y.left), y.right)\n                : isRight(x)\n                    ? isLeft(y)\n                        ? both(y.left, x.right)\n                        : isRight(y)\n                            ? right(SA.concat(x.right, y.right))\n                            : both(y.left, SA.concat(x.right, y.right))\n                    : isLeft(y)\n                        ? both(SE.concat(x.left, y.left), x.right)\n                        : isRight(y)\n                            ? both(x.left, SA.concat(x.right, y.right))\n                            : both(SE.concat(x.left, y.left), SA.concat(x.right, y.right));\n        }\n    };\n}\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getApply = function (S) { return ({\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    ap: function (fab, fa) {\n        return isLeft(fab)\n            ? isLeft(fa)\n                ? left(S.concat(fab.left, fa.left))\n                : isRight(fa)\n                    ? left(fab.left)\n                    : left(S.concat(fab.left, fa.left))\n            : isRight(fab)\n                ? isLeft(fa)\n                    ? left(fa.left)\n                    : isRight(fa)\n                        ? right(fab.right(fa.right))\n                        : both(fa.left, fab.right(fa.right))\n                : isLeft(fa)\n                    ? left(S.concat(fab.left, fa.left))\n                    : isRight(fa)\n                        ? both(fab.left, fab.right(fa.right))\n                        : both(S.concat(fab.left, fa.left), fab.right(fa.right));\n    }\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getApplicative(S) {\n    var A = getApply(S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        of: of\n    };\n}\n/**\n * @category instances\n * @since 2.10.0\n */\nexport function getChain(S) {\n    var A = getApply(S);\n    var chain = function (ma, f) {\n        if (isLeft(ma)) {\n            return ma;\n        }\n        if (isRight(ma)) {\n            return f(ma.right);\n        }\n        var fb = f(ma.right);\n        return isLeft(fb)\n            ? left(S.concat(ma.left, fb.left))\n            : isRight(fb)\n                ? both(ma.left, fb.right)\n                : both(S.concat(ma.left, fb.left), fb.right);\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        chain: chain\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getMonad(S) {\n    var C = getChain(S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        of: of,\n        ap: C.ap,\n        chain: C.chain,\n        throwError: left\n    };\n}\n/**\n * Returns an `E` value if possible\n *\n * @example\n * import { getLeft, left, right, both } from 'fp-ts/These'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(getLeft(left('a')), some('a'))\n * assert.deepStrictEqual(getLeft(right(1)), none)\n * assert.deepStrictEqual(getLeft(both('a', 1)), some('a'))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport function getLeft(fa) {\n    return isLeft(fa) ? _.some(fa.left) : isRight(fa) ? _.none : _.some(fa.left);\n}\n/**\n * Returns an `A` value if possible\n *\n * @example\n * import { getRight, left, right, both } from 'fp-ts/These'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(getRight(left('a')), none)\n * assert.deepStrictEqual(getRight(right(1)), some(1))\n * assert.deepStrictEqual(getRight(both('a', 1)), some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport function getRight(fa) {\n    return isLeft(fa) ? _.none : isRight(fa) ? _.some(fa.right) : _.some(fa.right);\n}\n// TODO: make lazy in v3\n/**\n * @example\n * import { leftOrBoth, left, both } from 'fp-ts/These'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(leftOrBoth('a')(none), left('a'))\n * assert.deepStrictEqual(leftOrBoth('a')(some(1)), both('a', 1))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function leftOrBoth(e) {\n    return function (ma) { return (_.isNone(ma) ? left(e) : both(e, ma.value)); };\n}\n// TODO: make lazy in v3\n/**\n * @example\n * import { rightOrBoth, right, both } from 'fp-ts/These'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(rightOrBoth(1)(none), right(1))\n * assert.deepStrictEqual(rightOrBoth(1)(some('a')), both('a', 1))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function rightOrBoth(a) {\n    return function (me) { return (_.isNone(me) ? right(a) : both(me.value, a)); };\n}\n/**\n * Returns the `E` value if and only if the value is constructed with `Left`\n *\n * @example\n * import { getLeftOnly, left, right, both } from 'fp-ts/These'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(getLeftOnly(left('a')), some('a'))\n * assert.deepStrictEqual(getLeftOnly(right(1)), none)\n * assert.deepStrictEqual(getLeftOnly(both('a', 1)), none)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport function getLeftOnly(fa) {\n    return isLeft(fa) ? _.some(fa.left) : _.none;\n}\n/**\n * Returns the `A` value if and only if the value is constructed with `Right`\n *\n * @example\n * import { getRightOnly, left, right, both } from 'fp-ts/These'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(getRightOnly(left('a')), none)\n * assert.deepStrictEqual(getRightOnly(right(1)), some(1))\n * assert.deepStrictEqual(getRightOnly(both('a', 1)), none)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport function getRightOnly(fa) {\n    return isRight(fa) ? _.some(fa.right) : _.none;\n}\n/**\n * Takes a pair of `Option`s and attempts to create a `These` from them\n *\n * @example\n * import { fromOptions, left, right, both } from 'fp-ts/These'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(fromOptions(none, none), none)\n * assert.deepStrictEqual(fromOptions(some('a'), none), some(left('a')))\n * assert.deepStrictEqual(fromOptions(none, some(1)), some(right(1)))\n * assert.deepStrictEqual(fromOptions(some('a'), some(1)), some(both('a', 1)))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromOptions = function (fe, fa) {\n    return _.isNone(fe)\n        ? _.isNone(fa)\n            ? _.none\n            : _.some(right(fa.value))\n        : _.isNone(fa)\n            ? _.some(left(fe.value))\n            : _.some(both(fe.value, fa.value));\n};\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\n/* istanbul ignore next */\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var bimap = function (f, g) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : isRight(fa) ? right(g(fa.right)) : both(f(fa.left), g(fa.right));\n}; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : isBoth(fa) ? both(f(fa.left), fa.right) : fa;\n}; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isLeft(fa) ? fa : isRight(fa) ? right(f(fa.right)) : both(fa.left, f(fa.right));\n}; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n}; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n}; };\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    return function (f) {\n        return function (ta) {\n            return isLeft(ta) ? F.of(ta) : isRight(ta) ? F.map(f(ta.right), right) : F.map(f(ta.right), function (b) { return both(ta.left, b); });\n        };\n    };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ta) {\n        return isLeft(ta) ? F.of(ta) : isRight(ta) ? F.map(ta.right, right) : F.map(ta.right, function (b) { return both(ta.left, b); });\n    };\n};\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var of = right;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'These';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromThese = {\n    URI: URI,\n    fromThese: identity\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: identity\n};\n/**\n * @category lifting\n * @since 2.13.0\n */\nexport var fromPredicate = /*#__PURE__*/ fromPredicate_(FromEither);\n/**\n * @category conversions\n * @since 2.10.0\n */\nexport var fromOption = \n/*#__PURE__*/ fromOption_(FromEither);\n/**\n * @category lifting\n * @since 2.10.0\n */\nexport var fromOptionK = \n/*#__PURE__*/ fromOptionK_(FromEither);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var elem = function (E) {\n    return function (a) {\n        return function (ma) {\n            return isLeft(ma) ? false : E.equals(a, ma.right);\n        };\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var exists = function (predicate) {\n    return function (ma) {\n        return isLeft(ma) ? false : predicate(ma.right);\n    };\n};\n/**\n * @example\n * import { toTuple2, left, right, both } from 'fp-ts/These'\n *\n * assert.deepStrictEqual(toTuple2(() => 'a', () => 1)(left('b')), ['b', 1])\n * assert.deepStrictEqual(toTuple2(() => 'a', () => 1)(right(2)), ['a', 2])\n * assert.deepStrictEqual(toTuple2(() => 'a', () => 1)(both('b', 2)), ['b', 2])\n *\n * @category conversions\n * @since 2.10.0\n */\nexport var toTuple2 = function (e, a) {\n    return function (fa) {\n        return isLeft(fa) ? [fa.left, a()] : isRight(fa) ? [e(), fa.right] : [fa.left, fa.right];\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`toTuple2`](#totuple2) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var toTuple = function (e, a) {\n    return toTuple2(function () { return e; }, function () { return a; });\n};\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(getApplicative(S))`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (S) {\n    return function (f) {\n        return function (as) {\n            var e = _.none;\n            var t = f(0, _.head(as));\n            if (isLeft(t)) {\n                return t;\n            }\n            if (isBoth(t)) {\n                e = _.some(t.left);\n            }\n            var out = [t.right];\n            for (var i = 1; i < as.length; i++) {\n                var t_1 = f(i, as[i]);\n                if (isLeft(t_1)) {\n                    return t_1;\n                }\n                if (isBoth(t_1)) {\n                    e = _.isNone(e) ? _.some(t_1.left) : _.some(S.concat(e.value, t_1.left));\n                }\n                out.push(t_1.right);\n            }\n            return _.isNone(e) ? right(out) : both(e.value, out);\n        };\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(getApplicative(S))`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (S) {\n    return function (f) {\n        var g = traverseReadonlyNonEmptyArrayWithIndex(S)(f);\n        return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n    };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.these`\n * (where `T` is from `import T from 'fp-ts/These'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var these = {\n    URI: URI,\n    map: _map,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n", "/**\n * @since 2.4.0\n */\nimport { ap as ap_ } from './Apply';\nimport { flow, pipe } from './function';\nimport { map as map_ } from './Functor';\nimport * as T from './These';\nexport function right(F) {\n    return flow(T.right, F.of);\n}\nexport function left(F) {\n    return flow(T.left, F.of);\n}\nexport function both(F) {\n    return flow(T.both, F.of);\n}\nexport function rightF(F) {\n    return function (fa) { return F.map(fa, T.right); };\n}\nexport function leftF(F) {\n    return function (fe) { return F.map(fe, T.left); };\n}\nexport function map(F) {\n    return map_(F, T.Functor);\n}\nexport function ap(F, S) {\n    return ap_(F, T.getApply(S));\n}\nexport function chain(M, S) {\n    var _left = left(M);\n    return function (f) { return function (ma) {\n        return M.chain(ma, T.match(_left, f, function (e1, a) {\n            return M.map(f(a), T.match(function (e2) { return T.left(S.concat(e1, e2)); }, function (b) { return T.both(e1, b); }, function (e2, b) { return T.both(S.concat(e1, e2), b); }));\n        }));\n    }; };\n}\nexport function bimap(F) {\n    return function (f, g) { return function (fea) { return F.map(fea, T.bimap(f, g)); }; };\n}\nexport function mapLeft(F) {\n    return function (f) { return function (fea) { return F.map(fea, T.mapLeft(f)); }; };\n}\nexport function match(F) {\n    return function (onLeft, onRight, onBoth) { return function (ma) { return F.map(ma, T.match(onLeft, onRight, onBoth)); }; };\n}\nexport function matchE(M) {\n    return function (onLeft, onRight, onBoth) { return function (ma) { return M.chain(ma, T.match(onLeft, onRight, onBoth)); }; };\n}\nexport function swap(F) {\n    return function (ma) { return F.map(ma, T.swap); };\n}\nexport function toTuple2(F) {\n    return function (e, a) { return function (fa) { return F.map(fa, T.toTuple2(e, a)); }; };\n}\n/** @deprecated */\n/* istanbul ignore next */\nexport function getTheseM(M) {\n    var _map = map(M);\n    var _bimap = bimap(M);\n    var _mapLeft = mapLeft(M);\n    var _fold = matchE(M);\n    var _toTuple2 = toTuple2(M);\n    var of = right(M);\n    var mapT = function (fa, f) { return pipe(fa, _map(f)); };\n    return {\n        map: mapT,\n        bimap: function (fea, f, g) { return pipe(fea, _bimap(f, g)); },\n        mapLeft: function (fea, f) { return pipe(fea, _mapLeft(f)); },\n        fold: function (fa, onLeft, onRight, onBoth) { return pipe(fa, _fold(onLeft, onRight, onBoth)); },\n        swap: swap(M),\n        rightM: rightF(M),\n        leftM: leftF(M),\n        left: left(M),\n        right: right(M),\n        both: both(M),\n        toTuple: function (fa, e, a) {\n            return pipe(fa, _toTuple2(function () { return e; }, function () { return a; }));\n        },\n        getMonad: function (S) {\n            var _ap = ap(M, S);\n            var _chain = chain(M, S);\n            return {\n                _E: undefined,\n                map: mapT,\n                of: of,\n                ap: function (fab, fa) { return pipe(fab, _ap(fa)); },\n                chain: function (ma, f) { return pipe(ma, _chain(f)); }\n            };\n        }\n    };\n}\n", "import { pipe } from './function';\nimport { flap as flap_ } from './Functor';\n// TODO: curry in v3\n/**\n * Extracts a value at a relative position which depends on the current value.\n *\n * @since 2.0.0\n */\nexport function tracks(M, f) {\n    return function (wa) { return wa(f(wa(M.empty))); };\n}\n/**\n * Get the current position\n *\n * @since 2.0.0\n */\nexport function listen(wa) {\n    return function (e) { return [wa(e), e]; };\n}\n/**\n * Get a value which depends on the current position\n *\n * @since 2.0.0\n */\nexport function listens(f) {\n    return function (wa) { return function (e) { return [wa(e), f(e)]; }; };\n}\n/**\n * Apply a function to the current position\n *\n * @since 2.0.0\n */\nexport function censor(f) {\n    return function (wa) { return function (e) { return wa(f(e)); }; };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getComonad(monoid) {\n    function extend(wa, f) {\n        return function (p1) { return f(function (p2) { return wa(monoid.concat(p1, p2)); }); };\n    }\n    function extract(wa) {\n        return wa(monoid.empty);\n    }\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        extend: extend,\n        extract: extract\n    };\n}\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return function (p) { return f(fa(p)); }; }; };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Traced';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`Functor`](#functor) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var traced = Functor;\n", "import { getFoldableComposition } from './Foldable';\nimport { pipe } from './function';\nimport { getFunctorComposition } from './Functor';\nexport function traverse(T, G) {\n    return function (F) {\n        var traverseT = T.traverse(F);\n        var traverseG = G.traverse(F);\n        return function (f) { return function (fga) { return traverseT(fga, function (ga) { return traverseG(ga, f); }); }; };\n    };\n}\nexport function sequence(T, G) {\n    return function (F) {\n        var sequenceT = T.sequence(F);\n        var sequenceG = G.sequence(F);\n        return function (fgha) { return sequenceT(T.map(fgha, sequenceG)); };\n    };\n}\n/** @deprecated */\nexport function getTraversableComposition(F, G) {\n    var map = getFunctorComposition(F, G).map;\n    var FC = getFoldableComposition(F, G);\n    var _traverse = traverse(F, G);\n    var _sequence = sequence(F, G);\n    return {\n        map: map,\n        reduce: FC.reduce,\n        foldMap: FC.foldMap,\n        reduceRight: FC.reduceRight,\n        traverse: function (H) {\n            var traverseH = _traverse(H);\n            return function (fga, f) { return pipe(fga, traverseH(f)); };\n        },\n        sequence: function (H) {\n            var sequenceH = _sequence(H);\n            return function (fgha) { return pipe(fgha, sequenceH); };\n        }\n    };\n}\n", "export {};\n", "import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport * as A from './Array';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEquals } from './Eq';\nimport { dual, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_, let as let__ } from './Functor';\nimport * as _ from './internal';\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport function make(value, forest) {\n    if (forest === void 0) { forest = []; }\n    return {\n        value: value,\n        forest: forest\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(S) {\n    var show = function (t) {\n        return A.isEmpty(t.forest)\n            ? \"make(\".concat(S.show(t.value), \")\")\n            : \"make(\".concat(S.show(t.value), \", [\").concat(t.forest.map(show).join(', '), \"])\");\n    };\n    return {\n        show: show\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getEq(E) {\n    // eslint-disable-next-line prefer-const\n    var SA;\n    var R = fromEquals(function (x, y) { return E.equals(x.value, y.value) && SA.equals(x.forest, y.forest); });\n    SA = A.getEq(R);\n    return R;\n}\nvar draw = function (indentation, forest) {\n    var r = '';\n    var len = forest.length;\n    var tree;\n    for (var i = 0; i < len; i++) {\n        tree = forest[i];\n        var isLast = i === len - 1;\n        r += indentation + (isLast ? '└' : '├') + '─ ' + tree.value;\n        r += draw(indentation + (len > 1 && !isLast ? '│  ' : '   '), tree.forest);\n    }\n    return r;\n};\n/**\n * Neat 2-dimensional drawing of a forest\n *\n * @since 2.0.0\n */\nexport function drawForest(forest) {\n    return draw('\\n', forest);\n}\n/**\n * Neat 2-dimensional drawing of a tree\n *\n * @example\n * import { make, drawTree } from 'fp-ts/Tree'\n *\n * const fa = make('a', [\n *   make('b'),\n *   make('c'),\n *   make('d', [make('e'), make('f')])\n * ])\n *\n * assert.strictEqual(drawTree(fa), `a\n * ├─ b\n * ├─ c\n * └─ d\n *    ├─ e\n *    └─ f`)\n *\n *\n * @since 2.0.0\n */\nexport function drawTree(tree) {\n    return tree.value + drawForest(tree.forest);\n}\n/**\n * Build a (possibly infinite) tree from a seed value in breadth-first order.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function unfoldTree(b, f) {\n    var _a = f(b), a = _a[0], bs = _a[1];\n    return { value: a, forest: unfoldForest(bs, f) };\n}\n/**\n * Build a (possibly infinite) forest from a list of seed values in breadth-first order.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function unfoldForest(bs, f) {\n    return bs.map(function (b) { return unfoldTree(b, f); });\n}\nexport function unfoldTreeM(M) {\n    var unfoldForestMM = unfoldForestM(M);\n    return function (b, f) { return M.chain(f(b), function (_a) {\n        var a = _a[0], bs = _a[1];\n        return M.map(unfoldForestMM(bs, f), function (ts) { return ({ value: a, forest: ts }); });\n    }); };\n}\nexport function unfoldForestM(M) {\n    var traverseM = A.traverse(M);\n    return function (bs, f) {\n        return pipe(bs, traverseM(function (b) { return unfoldTreeM(M)(b, f); }));\n    };\n}\n/**\n * Fold a tree into a \"summary\" value in depth-first order.\n *\n * For each node in the tree, apply `f` to the `value` and the result of applying `f` to each `forest`.\n *\n * This is also known as the catamorphism on trees.\n *\n * @example\n * import { fold, make } from 'fp-ts/Tree'\n * import { concatAll } from 'fp-ts/Monoid'\n * import { MonoidSum } from 'fp-ts/number'\n *\n * const t = make(1, [make(2), make(3)])\n *\n * const sum = concatAll(MonoidSum)\n *\n * // Sum the values in a tree:\n * assert.deepStrictEqual(fold((a: number, bs: Array<number>) => a + sum(bs))(t), 6)\n *\n * // Find the maximum value in the tree:\n * assert.deepStrictEqual(fold((a: number, bs: Array<number>) => bs.reduce((b, acc) => Math.max(b, acc), a))(t), 3)\n *\n * // Count the number of leaves in the tree:\n * assert.deepStrictEqual(fold((_: number, bs: Array<number>) => (bs.length === 0 ? 1 : sum(bs)))(t), 2)\n *\n * @category folding\n * @since 2.6.0\n */\nexport function fold(f) {\n    var go = function (tree) { return f(tree.value, tree.forest.map(go)); };\n    return go;\n}\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return flatMap(fab, function (f) { return pipe(fa, map(f)); }); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/**\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) { return _ap(fab, fa); }; };\n/**\n * @category sequencing\n * @since 2.14.0\n */\nexport var flatMap = /*#__PURE__*/ dual(2, function (ma, f) {\n    var _a = f(ma.value), value = _a.value, forest = _a.forest;\n    var concat = A.getMonoid().concat;\n    return {\n        value: value,\n        forest: concat(forest, ma.forest.map(flatMap(f)))\n    };\n});\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) { return ({\n    value: f(wa),\n    forest: wa.forest.map(extend(f))\n}); }; };\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = /*#__PURE__*/ flatMap(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return ({\n    value: f(fa.value),\n    forest: fa.forest.map(map(f))\n}); }; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = function (b, f) {\n    return function (fa) {\n        var r = f(b, fa.value);\n        var len = fa.forest.length;\n        for (var i = 0; i < len; i++) {\n            r = pipe(fa.forest[i], reduce(r, f));\n        }\n        return r;\n    };\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) {\n    return reduce(M.empty, function (acc, a) { return M.concat(acc, f(a)); });\n}; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) {\n    return function (fa) {\n        var r = b;\n        var len = fa.forest.length;\n        for (var i = len - 1; i >= 0; i--) {\n            r = pipe(fa.forest[i], reduceRight(r, f));\n        }\n        return f(fa.value, r);\n    };\n};\n/**\n * @category Extract\n * @since 2.6.2\n */\nexport var extract = function (wa) { return wa.value; };\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseF = A.traverse(F);\n    var out = function (f) {\n        return function (ta) {\n            return F.ap(F.map(f(ta.value), function (value) { return function (forest) { return ({\n                value: value,\n                forest: forest\n            }); }; }), pipe(ta.forest, traverseF(out(f))));\n        };\n    };\n    return out;\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) { return traverse(F)(identity); };\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = function (a) { return make(a); };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Tree';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var chainFirst = /*#__PURE__*/ chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.0.0\n */\nexport function elem(E) {\n    var go = function (a, fa) { return E.equals(a, fa.value) || fa.forest.some(function (tree) { return go(a, tree); }); };\n    return go;\n}\n/**\n * @since 2.11.0\n */\nexport var exists = function (predicate) {\n    return function (ma) {\n        return predicate(ma.value) || ma.forest.some(exists(predicate));\n    };\n};\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport var chain = flatMap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.tree`\n * (where `T` is from `import T from 'fp-ts/Tree'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var tree = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: flatMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    extract: extract,\n    extend: _extend\n};\n", "import { identity, pipe } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as RT from './ReadonlyTuple';\n// -------------------------------------------------------------------------------------\n// model\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.0.0\n */\nexport var fst = RT.fst;\n/**\n * @since 2.0.0\n */\nexport var snd = RT.snd;\n/**\n * @since 2.0.0\n */\nexport var swap = function (ea) { return [snd(ea), fst(ea)]; };\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApply(S) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return [fst(fab)(fst(fa)), S.concat(snd(fab), snd(fa))]; }\n    };\n}\nvar of = function (M) {\n    return function (a) {\n        return [a, M.empty];\n    };\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApplicative(M) {\n    var A = getApply(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: A.map,\n        ap: A.ap,\n        of: of(M)\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getChain(S) {\n    var A = getApply(S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: A.map,\n        ap: A.ap,\n        chain: function (ma, f) {\n            var _a = f(fst(ma)), b = _a[0], s = _a[1];\n            return [b, S.concat(snd(ma), s)];\n        }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getMonad(M) {\n    var C = getChain(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: C.map,\n        ap: C.ap,\n        chain: C.chain,\n        of: of(M)\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getChainRec(M) {\n    var chainRec = function (a, f) {\n        var result = f(a);\n        var acc = M.empty;\n        var s = fst(result);\n        while (s._tag === 'Left') {\n            acc = M.concat(acc, snd(result));\n            result = f(s.left);\n            s = fst(result);\n        }\n        return [s.right, M.concat(acc, snd(result))];\n    };\n    var C = getChain(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: C.map,\n        ap: C.ap,\n        chain: C.chain,\n        chainRec: chainRec\n    };\n}\n/* istanbul ignore next */\nvar _compose = function (bc, ab) { return pipe(bc, compose(ab)); };\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, mapFst(f)); };\n/* istanbul ignore next */\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\n/* istanbul ignore next */\nvar _mapLeft = function (fa, f) { return pipe(fa, mapSnd(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nfunction _traverse(F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n}\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var bimap = function (f, g) { return function (fa) {\n    return [g(fst(fa)), f(snd(fa))];\n}; };\n/**\n * Map a function over the first component of a `Tuple`.\n *\n * This is the `map` operation of the `Functor` instance.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var mapFst = function (f) { return function (fa) { return [f(fst(fa)), snd(fa)]; }; };\n/**\n * Map a function over the second component of a `Tuple`.\n *\n * This is the `mapLeft` operation of the `Bifunctor` instance.\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var mapSnd = function (f) { return function (fa) { return [fst(fa), f(snd(fa))]; }; };\n/**\n * @since 2.0.0\n */\nexport var compose = function (ab) { return function (bc) { return [fst(bc), snd(ab)]; }; };\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) { return [f(wa), snd(wa)]; }; };\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * @category Extract\n * @since 2.6.2\n */\nexport var extract = RT.extract;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = RT.foldMap;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = RT.reduce;\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = RT.reduceRight;\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    return function (f) { return function (ta) { return F.map(f(fst(ta)), function (b) { return [b, snd(ta)]; }); }; };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (fas) {\n        return F.map(fst(fas), function (a) { return [a, snd(fas)]; });\n    };\n};\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Tuple';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Semigroupoid = {\n    URI: URI,\n    compose: _compose\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`mapFst`](#mapfst) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var map = mapFst;\n/**\n * Use [`mapSnd`](#mapsnd) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var mapLeft = mapSnd;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.tuple`\n * (where `T` is from `import T from 'fp-ts/Tuple'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var tuple = {\n    URI: URI,\n    compose: _compose,\n    map: _map,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    extract: extract,\n    extend: _extend,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n", "export {};\n", "/**\n * @since 2.0.0\n */\nimport { getApplicativeComposition } from './Applicative';\nimport * as E from './Either';\nimport * as _ from './internal';\n/** @deprecated */\nexport function getValidationM(S, M) {\n    var A = getApplicativeComposition(M, E.getApplicativeValidation(S));\n    return {\n        map: A.map,\n        ap: A.ap,\n        of: A.of,\n        chain: function (ma, f) { return M.chain(ma, function (e) { return (_.isLeft(e) ? M.of(_.left(e.left)) : f(e.right)); }); },\n        alt: function (me, that) {\n            return M.chain(me, function (e1) {\n                return _.isRight(e1) ? M.of(e1) : M.map(that(), function (e2) { return (_.isLeft(e2) ? _.left(S.concat(e1.left, e2.left)) : e2); });\n            });\n        }\n    };\n}\n", "import * as Se from './Semigroup';\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Semigroup = Se.constant(undefined);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Monoid = {\n    concat: Semigroup.concat,\n    empty: undefined\n};\n", "import { pipe } from './function';\nimport { flap as flap_ } from './Functor';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Appends a value to the accumulator\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var tell = function (w) { return function () { return [undefined, w]; }; };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Modifies the result to include the changes to the accumulator\n *\n * @since 2.0.0\n */\nexport var listen = function (fa) { return function () {\n    var _a = fa(), a = _a[0], w = _a[1];\n    return [[a, w], w];\n}; };\n/**\n * Applies the returned function to the accumulator\n *\n * @since 2.0.0\n */\nexport var pass = function (fa) { return function () {\n    var _a = fa(), _b = _a[0], a = _b[0], f = _b[1], w = _a[1];\n    return [a, f(w)];\n}; };\n/**\n * Projects a value from modifications made to the accumulator during an action\n *\n * @since 2.0.0\n */\nexport var listens = function (f) { return function (fa) { return function () {\n    var _a = fa(), a = _a[0], w = _a[1];\n    return [[a, f(w)], w];\n}; }; };\n/**\n * Modify the final accumulator value by applying a function\n *\n * @since 2.0.0\n */\nexport var censor = function (f) { return function (fa) { return function () {\n    var _a = fa(), a = _a[0], w = _a[1];\n    return [a, f(w)];\n}; }; };\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return function () {\n    var _a = fa(), a = _a[0], w = _a[1];\n    return [f(a), w];\n}; }; };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Writer';\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getPointed = function (M) { return ({\n    URI: URI,\n    _E: undefined,\n    of: function (a) { return function () { return [a, M.empty]; }; }\n}); };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getApply = function (S) { return ({\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    ap: function (fab, fa) { return function () {\n        var _a = fab(), f = _a[0], w1 = _a[1];\n        var _b = fa(), a = _b[0], w2 = _b[1];\n        return [f(a), S.concat(w1, w2)];\n    }; }\n}); };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getApplicative = function (M) {\n    var A = getApply(M);\n    var P = getPointed(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        of: P.of\n    };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport function getChain(S) {\n    var A = getApply(S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        chain: function (fa, f) { return function () {\n            var _a = fa(), a = _a[0], w1 = _a[1];\n            var _b = f(a)(), b = _b[0], w2 = _b[1];\n            return [b, S.concat(w1, w2)];\n        }; }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getMonad(M) {\n    var A = getApplicative(M);\n    var C = getChain(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: A.ap,\n        of: A.of,\n        chain: C.chain\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var evaluate = function (fa) { return fa()[0]; };\n/**\n * @since 2.8.0\n */\nexport var execute = function (fa) { return fa()[1]; };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`evaluate`](#evaluate) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var evalWriter = function (fa) { return fa()[0]; };\n/**\n * Use [`execute`](#execute) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var execWriter = function (fa) { return fa()[1]; };\n/**\n * Use [`Functor`](#functor) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var writer = Functor;\n", "export function getWriterM(M) {\n    var map = function (fa, f) {\n        return function () {\n            return M.map(fa(), function (_a) {\n                var a = _a[0], w = _a[1];\n                return [f(a), w];\n            });\n        };\n    };\n    return {\n        map: map,\n        evalWriter: function (fa) { return M.map(fa(), function (_a) {\n            var a = _a[0];\n            return a;\n        }); },\n        execWriter: function (fa) { return M.map(fa(), function (_a) {\n            var _ = _a[0], w = _a[1];\n            return w;\n        }); },\n        tell: function (w) { return function () { return M.of([undefined, w]); }; },\n        listen: function (fa) { return function () { return M.map(fa(), function (_a) {\n            var a = _a[0], w = _a[1];\n            return [[a, w], w];\n        }); }; },\n        pass: function (fa) { return function () { return M.map(fa(), function (_a) {\n            var _b = _a[0], a = _b[0], f = _b[1], w = _a[1];\n            return [a, f(w)];\n        }); }; },\n        listens: function (fa, f) { return function () { return M.map(fa(), function (_a) {\n            var a = _a[0], w = _a[1];\n            return [[a, f(w)], w];\n        }); }; },\n        censor: function (fa, f) { return function () { return M.map(fa(), function (_a) {\n            var a = _a[0], w = _a[1];\n            return [a, f(w)];\n        }); }; },\n        getMonad: function (W) {\n            return {\n                _E: undefined,\n                map: map,\n                of: function (a) { return function () { return M.of([a, W.empty]); }; },\n                ap: function (mab, ma) { return function () { return M.chain(mab(), function (_a) {\n                    var f = _a[0], w1 = _a[1];\n                    return M.map(ma(), function (_a) {\n                        var a = _a[0], w2 = _a[1];\n                        return [f(a), W.concat(w1, w2)];\n                    });\n                }); }; },\n                chain: function (ma, f) { return function () { return M.chain(ma(), function (_a) {\n                    var a = _a[0], w1 = _a[1];\n                    return M.map(f(a)(), function (_a) {\n                        var b = _a[0], w2 = _a[1];\n                        return [b, W.concat(w1, w2)];\n                    });\n                }); }; }\n            };\n        }\n    };\n}\n"],
  "mappings": "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",
  "names": ["as", "altAll", "first", "second", "__spreadArray", "as", "second", "first", "keys", "altAll", "first", "second", "_map", "map", "_ap", "Alt", "Alternative", "Applicative", "Apply", "Chain", "ChainRecBreadthFirst", "ChainRecDepthFirst", "Compactable", "Do", "Extend", "Filterable", "FilterableWithIndex", "Foldable", "FoldableWithIndex", "FromEither", "Functor", "FunctorWithIndex", "Monad", "Pointed", "Traversable", "TraversableWithIndex", "URI", "Unfoldable", "Witherable", "Zero", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "append", "appendW", "bind", "bindTo", "chain", "chainFirst", "chainRecBreadthFirst", "chainRecDepthFirst", "chainWithIndex", "chop", "chunksOf", "compact", "comprehension", "concat", "concatW", "cons", "copy", "deleteAt", "difference", "dropLeft", "dropLeftWhile", "dropRight", "duplicate", "elem", "empty", "every", "exists", "extend", "filter", "filterE", "filterMap", "filterMapWithIndex", "filterWithIndex", "findFirst", "findFirstMap", "findIndex", "findLast", "findLastIndex", "findLastMap", "flap", "flatMap", "flatten", "foldLeft", "foldMap", "foldMapWithIndex", "foldRight", "fromEither", "fromEitherK", "fromOption", "fromOptionK", "fromPredicate", "getDifferenceMagma", "getEq", "getIntersectionSemigroup", "getMonoid", "getOrd", "getSemigroup", "getShow", "getUnionMonoid", "getUnionSemigroup", "guard", "head", "init", "insertAt", "intercalate", "intersection", "intersperse", "isEmpty", "isNonEmpty", "isOutOfBound", "last", "lefts", "let_", "lookup", "makeBy", "map", "mapWithIndex", "match", "matchLeft", "matchLeftW", "matchRight", "matchRightW", "matchW", "modifyAt", "of", "partition", "partitionMap", "partitionMapWithIndex", "partitionWithIndex", "prepend", "prependAll", "prependToAll", "prependW", "range", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "replicate", "reverse", "rights", "rotate", "scanLeft", "scanRight", "separate", "sequence", "size", "snoc", "some", "sort", "sortBy", "spanLeft", "splitAt", "tail", "takeLeft", "takeLeftWhile", "takeRight", "traverse", "traverseWithIndex", "unfold", "union", "uniq", "unsafeDeleteAt", "unsafeInsertAt", "unsafeUpdateAt", "unzip", "updateAt", "wilt", "wither", "zero", "zip", "zipWith", "first", "fromEither", "Alt", "Applicative", "Apply", "Chain", "Comonad", "Do", "Foldable", "FoldableWithIndex", "Functor", "FunctorWithIndex", "Monad", "Pointed", "Traversable", "TraversableWithIndex", "URI", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "append", "appendW", "bind", "bindTo", "chain", "chainFirst", "chainWithIndex", "chop", "chunksOf", "concat", "concatAll", "concatW", "cons", "duplicate", "extend", "extract", "filter", "filterWithIndex", "flap", "flatMap", "flatten", "fold", "foldMap", "foldMapWithIndex", "fromArray", "fromReadonlyNonEmptyArray", "getEq", "getSemigroup", "getShow", "getUnionSemigroup", "group", "groupBy", "groupSort", "head", "init", "insertAt", "intercalate", "intersperse", "isNonEmpty", "isOutOfBound", "last", "let_", "makeBy", "map", "mapWithIndex", "matchLeft", "matchRight", "max", "min", "modifyAt", "modifyHead", "modifyLast", "of", "prepend", "prependAll", "prependToAll", "prependW", "range", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "replicate", "reverse", "rotate", "sequence", "snoc", "sort", "sortBy", "splitAt", "tail", "traverse", "traverseWithIndex", "unappend", "uncons", "union", "uniq", "unprepend", "unsafeInsertAt", "unsafeUpdateAt", "unsnoc", "unzip", "updateAt", "updateHead", "updateLast", "zip", "zipWith", "Contravariant", "URI", "contramap", "getMonoid", "getSemigroup", "tuple", "getMonoid", "getSemigroup", "tuple", "equals", "first", "second", "tuple", "getSemigroup", "getMonoid", "compare", "first", "second", "tuple", "contramap_", "contramap", "URI", "getSemigroup", "getMonoid", "Contravariant", "URI", "ap", "apFirst", "apS", "apSecond", "bind", "bindTo", "chainFirst", "concatAll", "empty", "flap", "fold", "getSemigroup", "head", "intercalate", "isNonEmpty", "last", "let_", "map", "max", "min", "reverse", "tail", "concatAll", "constant", "max", "min", "reverse", "struct", "tuple", "reverse", "first", "second", "as", "min", "max", "constant", "reverse", "struct", "first", "second", "tuple", "concatAll", "as", "__spreadArray", "empty", "isNonEmpty", "as", "head", "tail", "init", "a", "getMonoid", "second", "first", "last", "y", "reverse", "bs", "map", "ap", "b", "URI", "getSemigroup", "flap", "apFirst", "apSecond", "chainFirst", "bindTo", "let_", "bind", "apS", "head", "tail", "last", "as", "min", "max", "concatAll", "__spreadArray", "intercalate", "isNonEmpty", "empty", "init", "fold", "URI", "__spreadArray", "isNonEmpty", "as", "isOutOfBound", "prependW", "head", "tail", "prepend", "appendW", "init", "append", "unsafeInsertAt", "fromReadonlyNonEmptyArray", "unsafeUpdateAt", "uniq", "a", "sortBy", "getMonoid", "sort", "union", "second", "first", "concat", "rotate", "splitAt", "fromArray", "makeBy", "replicate", "range", "unprepend", "unappend", "last", "concatW", "y", "reverse", "group", "groupBy", "insertAt", "updateAt", "modifyAt", "of", "zipWith", "zip", "bs", "unzip", "prependAll", "intersperse", "foldMapWithIndex", "foldMap", "chainWithIndex", "chop", "chunksOf", "_map", "map", "_mapWithIndex", "mapWithIndex", "_ap", "ap", "_extend", "extend", "_reduce", "reduce", "_foldMap", "_reduceRight", "reduceRight", "_traverse", "traverse", "_alt", "alt", "_reduceWithIndex", "reduceWithIndex", "_foldMapWithIndex", "_reduceRightWithIndex", "reduceRightWithIndex", "_traverseWithIndex", "traverseWithIndex", "altW", "flatMap", "duplicate", "flatten", "sequence", "extract", "URI", "getShow", "getSemigroup", "getEq", "getUnionSemigroup", "Functor", "flap", "Pointed", "FunctorWithIndex", "Apply", "apFirst", "apSecond", "Applicative", "Chain", "chainFirst", "Monad", "Foldable", "FoldableWithIndex", "Traversable", "TraversableWithIndex", "Alt", "Comonad", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "head", "tail", "as", "last", "init", "min", "max", "concatAll", "matchLeft", "matchRight", "modifyHead", "__spreadArray", "updateHead", "modifyLast", "append", "updateLast", "intercalate", "chain", "flatMap", "groupSort", "sort", "group", "isNonEmpty", "filter", "filterWithIndex", "fromArray", "uncons", "unprepend", "unsnoc", "unappend", "cons", "prepend", "snoc", "prependToAll", "prependAll", "fold", "URI", "of", "_map", "_mapWithIndex", "_ap", "_extend", "extract", "_reduce", "_foldMap", "_reduceRight", "_traverse", "sequence", "_reduceWithIndex", "_foldMapWithIndex", "_reduceRightWithIndex", "_traverseWithIndex", "_alt", "Alt", "Applicative", "Apply", "Chain", "Do", "Foldable", "FoldableWithIndex", "Functor", "FunctorWithIndex", "Monad", "Pointed", "Traversable", "TraversableWithIndex", "URI", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "append", "appendW", "bind", "bindTo", "chain", "chainFirst", "chainWithIndex", "chop", "chunksOf", "concat", "concatW", "cons", "duplicate", "empty", "extend", "filter", "filterE", "filterWithIndex", "flap", "flatMap", "flatten", "foldMap", "foldMapWithIndex", "fromArray", "fromEitherK", "fromOption", "fromOptionK", "fromPredicate", "getEq", "getMonoid", "getSemigroup", "getShow", "getUnionSemigroup", "guard", "head", "init", "insertAt", "intercalate", "intersperse", "isNonEmpty", "isOutOfBound", "last", "let_", "makeBy", "map", "mapWithIndex", "matchLeft", "matchRight", "modifyAt", "of", "prepend", "prependAll", "prependToAll", "prependW", "range", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "replicate", "reverse", "rotate", "sequence", "snoc", "some", "sort", "sortBy", "splitAt", "tail", "traverse", "traverseWithIndex", "union", "uniq", "unsafeInsertAt", "unsafeUpdateAt", "unzip", "updateAt", "zip", "zipWith", "first", "second", "Functor", "URI", "flap", "left", "map", "right", "left", "right", "_map", "map", "URI", "Functor", "flap", "__spreadArray", "as", "isNonEmpty", "prepend", "prependW", "append", "appendW", "makeBy", "empty", "replicate", "fromPredicate", "fromOption", "head", "tail", "matchLeft", "last", "matchRight", "chainWithIndex", "isOutOfBound", "init", "splitAt", "insertAt", "updateAt", "modifyAt", "unsafeUpdateAt", "reverse", "sort", "zipWith", "zip", "bs", "unzip", "prependAll", "intersperse", "rotate", "uniq", "sortBy", "chop", "chunksOf", "fromOptionK", "input", "flatMap", "concatW", "second", "first", "concat", "union", "ys", "_map", "map", "_mapWithIndex", "mapWithIndex", "_ap", "ap", "filter", "_alt", "alt", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_reduceWithIndex", "reduceWithIndex", "_foldMapWithIndex", "foldMapWithIndex", "_reduceRightWithIndex", "reduceRightWithIndex", "filterWithIndex", "_extend", "extend", "_traverse", "traverse", "_traverseWithIndex", "traverseWithIndex", "of", "altW", "flatten", "left", "right", "duplicate", "b", "sequence", "URI", "getShow", "getSemigroup", "getMonoid", "getEq", "getUnionSemigroup", "Functor", "flap", "Pointed", "FunctorWithIndex", "Apply", "apFirst", "apSecond", "Applicative", "Chain", "Monad", "chainFirst", "Alt", "guard", "Foldable", "FoldableWithIndex", "Traversable", "TraversableWithIndex", "e", "filterE", "fromEitherK", "unsafeInsertAt", "fromArray", "some", "intercalate", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "chain", "flatMap", "range", "cons", "snoc", "prependToAll", "prependAll", "URI", "_map", "_ap", "of", "_mapWithIndex", "_alt", "_reduce", "_foldMap", "_reduceRight", "_traverse", "sequence", "_reduceWithIndex", "_foldMapWithIndex", "_reduceRightWithIndex", "_traverseWithIndex", "_extend", "isEmpty", "as", "isNonEmpty", "prepend", "prependW", "append", "appendW", "makeBy", "replicate", "fromPredicate", "fromOption", "fromEither", "matchW", "match", "matchLeftW", "head", "tail", "matchLeft", "foldLeft", "matchRightW", "init", "last", "matchRight", "foldRight", "chainWithIndex", "scanLeft", "scanRight", "size", "isOutOfBound", "lookup", "takeLeft", "copy", "takeRight", "takeLeftWhile", "spanLeftIndex", "spanLeft", "splitAt", "dropLeft", "dropRight", "dropLeftWhile", "findIndex", "findFirst", "findFirstMap", "findLast", "findLastMap", "findLastIndex", "insertAt", "unsafeInsertAt", "updateAt", "modifyAt", "deleteAt", "unsafeDeleteAt", "unsafeUpdateAt", "reverse", "rights", "lefts", "sort", "zipWith", "zip", "bs", "unzip", "prependAll", "intersperse", "rotate", "elem", "uniq", "sortBy", "chop", "chunksOf", "fromOptionK", "comprehension", "input", "flatMap", "concatW", "second", "first", "concat", "union", "intersection", "ys", "difference", "_map", "map", "_mapWithIndex", "mapWithIndex", "_ap", "ap", "_filter", "filter", "_filterMap", "filterMap", "_partition", "partition", "_partitionMap", "partitionMap", "_partitionWithIndex", "partitionWithIndex", "_partitionMapWithIndex", "partitionMapWithIndex", "_alt", "alt", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_reduceWithIndex", "reduceWithIndex", "_foldMapWithIndex", "foldMapWithIndex", "_reduceRightWithIndex", "reduceRightWithIndex", "_filterMapWithIndex", "filterMapWithIndex", "_filterWithIndex", "filterWithIndex", "_extend", "extend", "_traverse", "traverse", "_traverseWithIndex", "traverseWithIndex", "_chainRecDepthFirst", "_chainRecBreadthFirst", "of", "zero", "flatten", "compact", "separate", "left", "right", "altW", "duplicate", "sequence", "wither", "_wither", "wilt", "_wilt", "unfold", "URI", "getShow", "getSemigroup", "getMonoid", "getEq", "getOrd", "getUnionSemigroup", "getUnionMonoid", "getIntersectionSemigroup", "getDifferenceMagma", "Functor", "flap", "Pointed", "FunctorWithIndex", "Apply", "apFirst", "apSecond", "Applicative", "Chain", "chainFirst", "Monad", "Unfoldable", "Alt", "Zero", "guard", "Alternative", "Extend", "Compactable", "Filterable", "FilterableWithIndex", "Foldable", "FoldableWithIndex", "Traversable", "TraversableWithIndex", "Witherable", "chainRecDepthFirst", "ChainRecDepthFirst", "chainRecBreadthFirst", "ChainRecBreadthFirst", "filterE", "FromEither", "fromEitherK", "every", "some", "exists", "intercalate", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "chain", "flatMap", "range", "empty", "cons", "snoc", "prependToAll", "prependAll", "URI", "compact", "separate", "_map", "_ap", "of", "_filter", "_filterMap", "_partition", "_partitionMap", "_mapWithIndex", "_partitionMapWithIndex", "_partitionWithIndex", "_filterMapWithIndex", "_filterWithIndex", "_alt", "zero", "unfold", "_reduce", "_foldMap", "_reduceRight", "_traverse", "sequence", "_reduceWithIndex", "_foldMapWithIndex", "_reduceRightWithIndex", "_traverseWithIndex", "_extend", "_wither", "_wilt", "Eq", "Ord", "Show", "fold", "match", "matchW", "first", "second", "reverse", "reverse", "clamp", "reverse", "clamp", "reverse", "min", "max", "compact", "separate", "Alt", "Alternative", "Applicative", "Apply", "Chain", "Compactable", "Do", "Extend", "Filterable", "Foldable", "FromEither", "Functor", "Monad", "Pointed", "Traversable", "URI", "Witherable", "Zero", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "as", "asUnit", "bind", "bindTo", "chain", "chainEitherK", "chainFirst", "chainFirstEitherK", "compact", "duplicate", "elem", "exists", "extend", "filter", "filterMap", "flap", "flatMap", "flatten", "fold", "foldMap", "foldW", "fromEither", "fromEitherK", "fromPredicate", "getApplySemigroup", "getEq", "getMonoid", "getOrd", "getShow", "guard", "isNone", "isSome", "let_", "map", "match", "matchW", "none", "of", "partition", "partitionMap", "reduce", "reduceRight", "separate", "sequence", "some", "tap", "tapEither", "traverse", "wilt", "wither", "zero", "Contravariant", "URI", "contramap", "not", "contramap_", "contramap", "URI", "first", "second", "Contravariant", "not", "none", "some", "fromPredicate", "_map", "map", "_ap", "ap", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_traverse", "traverse", "_alt", "alt", "_filter", "filter", "_filterMap", "filterMap", "_extend", "extend", "_partition", "partition", "_partitionMap", "partitionMap", "URI", "getShow", "isNone", "getEq", "getOrd", "isSome", "getMonoid", "Functor", "as", "asUnit", "of", "Pointed", "Apply", "Applicative", "flatMap", "Chain", "Monad", "Foldable", "altW", "Alt", "zero", "Zero", "guard", "Alternative", "Extend", "compact", "separate", "Compactable", "not", "Filterable", "sequence", "Traversable", "_wither", "_wilt", "wither", "wilt", "Witherable", "fromEither", "FromEither", "matchW", "foldW", "match", "fold", "flap", "apFirst", "apSecond", "flatten", "tap", "tapEither", "duplicate", "fromEitherK", "chainEitherK", "chainFirstEitherK", "elem", "ma", "exists", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "of", "as", "isNone", "none", "some", "chain", "flatMap", "chainFirst", "tap", "isSome", "URI", "_map", "_ap", "_reduce", "_foldMap", "_reduceRight", "_traverse", "sequence", "zero", "_alt", "_extend", "compact", "separate", "_filter", "_filterMap", "_partition", "_partitionMap", "_wither", "_wilt", "getApplySemigroup", "Applicative", "getMonoid", "compact", "separate", "_map", "map", "Bifunctor", "Contravariant", "Functor", "URI", "bimap", "contramap", "flap", "getBooleanAlgebra", "getEq", "getMonoid", "getOrd", "getRing", "getSemigroup", "getSemiring", "getShow", "map", "mapLeft", "getShow", "getEq", "getOrd", "getSemigroup", "getMonoid", "getSemiring", "getRing", "getBooleanAlgebra", "URI", "_map", "contramap", "map", "_bimap", "bimap", "_mapLeft", "mapLeft", "Functor", "flap", "Contravariant", "Bifunctor", "Eq", "Ord", "eqDate", "Eq", "first", "second", "eqDate", "Ord", "contramap", "Alt", "ApT", "Applicative", "Apply", "Bifunctor", "Chain", "Do", "Extend", "Foldable", "FromEither", "Functor", "Monad", "MonadThrow", "Pointed", "Traversable", "URI", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "as", "asUnit", "bimap", "bind", "bindTo", "chain", "chainFirst", "chainNullableK", "chainOptionK", "duplicate", "elem", "exists", "extend", "filterOrElse", "flap", "flatMap", "flatMapNullable", "flatMapOption", "flatten", "fold", "foldMap", "foldW", "fromNullable", "fromNullableK", "fromOption", "fromOptionK", "fromPredicate", "getApplyMonoid", "getApplySemigroup", "getEq", "getOrElse", "getOrElseW", "getSemigroup", "getShow", "isLeft", "isRight", "left", "let_", "liftNullable", "liftOption", "map", "mapLeft", "match", "matchW", "of", "orElse", "reduce", "reduceRight", "right", "sequence", "sequenceArray", "tap", "throwError", "traverse", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "tryCatch", "tryCatchK", "left", "right", "flatMap", "isLeft", "_map", "map", "_ap", "ap", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_traverse", "traverse", "_bimap", "bimap", "_mapLeft", "mapLeft", "_alt", "alt", "_extend", "extend", "URI", "getShow", "getEq", "isRight", "getSemigroup", "empty", "compact", "separate", "filter", "partition", "sequence", "Traversable", "of", "Functor", "as", "asUnit", "Pointed", "Apply", "Applicative", "Chain", "Monad", "Foldable", "Bifunctor", "altW", "Alt", "Extend", "throwError", "MonadThrow", "FromEither", "fromPredicate", "fromOption", "matchW", "foldW", "match", "fold", "getOrElseW", "getOrElse", "flap", "apFirst", "apSecond", "tap", "flatten", "duplicate", "fromOptionK", "chainOptionK", "liftNullable", "liftOption", "flatMapNullable", "flatMapOption", "filterOrElse", "orElse", "fromNullable", "tryCatch", "tryCatchK", "fromNullableK", "chainNullableK", "error", "elem", "ma", "exists", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "as", "isLeft", "right", "traverseReadonlyArrayWithIndex", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "flatMap", "chain", "chainFirst", "tap", "tryCatch", "URI", "_map", "_ap", "_reduce", "_foldMap", "_reduceRight", "_traverse", "sequence", "_bimap", "_mapLeft", "_alt", "_extend", "throwError", "getApplySemigroup", "getApplyMonoid", "Applicative", "ap", "alt", "alt", "ap", "bimap", "chain", "chainNullableK", "flatMap", "fromNullable", "fromNullableK", "getOrElse", "left", "map", "mapLeft", "match", "orElse", "right", "swap", "toUnion", "right", "left", "fromNullable", "fromNullableK", "chainNullableK", "chain", "map", "Functor", "ap", "Apply", "flatMap", "isLeft", "alt", "second", "first", "bimap", "mapLeft", "match", "getOrElse", "orElse", "swap", "toUnion", "_ap", "_map", "_alt", "_bimap", "_mapLeft", "URI", "getMonoid", "getSemigroup", "URI", "getSemigroup", "first", "second", "getMonoid", "zero", "filter", "filterMap", "partition", "partitionMap", "filter", "filterMap", "partition", "_filter", "left", "not", "right", "partitionMap", "_filterMap", "map", "compact", "separate", "_partition", "_partitionMap", "foldMap", "intercalate", "reduce", "reduceRight", "toArray", "reduce", "b", "foldMap", "reduceRight", "intercalate", "init", "mu", "toArray", "_reduce", "_foldMap", "_reduceRight", "foldMapWithIndex", "reduceRightWithIndex", "reduceWithIndex", "reduceWithIndex", "b", "foldMapWithIndex", "reduceRightWithIndex", "_reduceWithIndex", "_foldMapWithIndex", "_reduceRightWithIndex", "first", "ask", "asks", "ApT", "Applicative", "Apply", "Chain", "Do", "Functor", "Monad", "Pointed", "URI", "ap", "apFirst", "apFirstW", "apS", "apSW", "apSecond", "apSecondW", "apW", "bind", "bindTo", "bindW", "chain", "chainFirst", "chainFirstW", "chainW", "first", "flap", "flatMap", "flatten", "flattenW", "getMonoid", "getSemigroup", "left", "let_", "map", "of", "right", "sequenceArray", "tap", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "_map", "map", "_ap", "ap", "apW", "of", "flatMap", "flattenW", "flatten", "first", "left", "fold", "right", "URI", "Functor", "flap", "Pointed", "Apply", "apFirst", "apFirstW", "apSecond", "apSecondW", "Applicative", "Chain", "Monad", "tap", "bindTo", "let_", "bind", "Chain", "bindW", "Do", "of", "apS", "Apply", "apSW", "ApT", "traverseReadonlyNonEmptyArrayWithIndex", "as", "traverseReadonlyArrayWithIndex", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "chainW", "flatMap", "chain", "chainFirst", "tap", "chainFirstW", "URI", "_map", "_ap", "first", "left", "right", "getSemigroup", "getMonoid", "Applicative", "ask", "asks", "get", "gets", "modify", "put", "Applicative", "Apply", "Chain", "Functor", "Monad", "Pointed", "URI", "ap", "apFirst", "apS", "apSecond", "bind", "bindTo", "chain", "chainFirst", "flap", "flatMap", "flatten", "let_", "map", "of", "sequenceArray", "tap", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "_map", "map", "_ap", "ap", "of", "flatMap", "flatten", "URI", "Functor", "flap", "Pointed", "Apply", "apFirst", "apSecond", "Applicative", "Chain", "Monad", "tap", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "traverseReadonlyNonEmptyArrayWithIndex", "as", "traverseReadonlyArrayWithIndex", "of", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "chain", "flatMap", "chainFirst", "tap", "Monad", "get", "put", "modify", "gets", "first", "mapWithIndex", "mapWithIndex", "map", "_mapWithIndex", "Alt", "Applicative", "Apply", "Chain", "ChainRec", "Comonad", "Do", "Foldable", "Functor", "Monad", "Pointed", "Traversable", "URI", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "bind", "bindTo", "chain", "chainFirst", "duplicate", "extend", "extract", "flap", "flatMap", "flatten", "foldMap", "getEq", "getShow", "identity", "let_", "map", "of", "reduce", "reduceRight", "sequence", "tap", "traverse", "_map", "map", "_ap", "ap", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_alt", "alt", "_extend", "extend", "_traverse", "traverse", "_chainRec", "of", "flatMap", "extract", "duplicate", "flatten", "sequence", "altW", "URI", "getShow", "getEq", "Functor", "flap", "Pointed", "Apply", "apFirst", "apSecond", "Applicative", "Chain", "Monad", "tap", "chainFirst", "Foldable", "Traversable", "Alt", "Comonad", "ChainRec", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "chain", "flatMap", "identity", "URI", "_map", "_ap", "of", "_reduce", "_foldMap", "_reduceRight", "_traverse", "sequence", "_alt", "extract", "_extend", "_chainRec", "ApT", "Applicative", "Apply", "Chain", "ChainRec", "Do", "Functor", "Monad", "Pointed", "URI", "ap", "apFirst", "apS", "apSecond", "as", "asUnit", "bind", "bindTo", "chain", "chainFirst", "flap", "flatMap", "flatten", "getMonoid", "getSemigroup", "let_", "map", "of", "sequenceArray", "tap", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "_map", "_ap", "_chainRec", "map", "ap", "of", "flatMap", "flatten", "URI", "Functor", "as", "asUnit", "flap", "Pointed", "Apply", "apFirst", "apSecond", "Applicative", "Chain", "Monad", "tap", "ChainRec", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "as", "traverseReadonlyArrayWithIndex", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "chain", "flatMap", "chainFirst", "tap", "URI", "_map", "_ap", "_chainRec", "getSemigroup", "getMonoid", "Applicative", "Alt", "ApT", "Applicative", "Bifunctor", "Chain", "Do", "FromEither", "FromIO", "Functor", "Monad", "MonadIO", "MonadThrow", "Pointed", "URI", "alt", "altW", "ap", "apFirst", "apFirstW", "apS", "apSW", "apSecond", "apSecondW", "apW", "as", "asUnit", "bimap", "bind", "bindTo", "bindW", "chain", "chainEitherK", "chainFirst", "chainFirstEitherK", "chainFirstIOK", "chainFirstW", "chainIOK", "chainOptionK", "chainOptionKW", "chainW", "filterOrElse", "filterOrElseW", "flap", "flatMap", "flatMapEither", "flatMapIO", "flatMapNullable", "flatMapOption", "flatten", "flattenW", "fold", "foldW", "fromEither", "fromEitherK", "fromIO", "fromIOK", "fromOption", "fromOptionK", "fromPredicate", "getApplyMonoid", "getApplySemigroup", "getCompactable", "getFilterable", "getOrElse", "getOrElseW", "getSemigroup", "left", "let_", "liftNullable", "liftOption", "map", "mapBoth", "mapError", "mapLeft", "match", "matchE", "matchW", "of", "orElse", "orElseFirst", "orElseW", "orLeft", "right", "sequenceArray", "swap", "tap", "tapEither", "tapError", "tapIO", "throwError", "toUnion", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "tryCatch", "tryCatchK", "left", "Pointed", "right", "Functor", "fromEither", "of", "fromIO", "match", "matchW", "matchE", "Monad", "fold", "foldW", "getOrElse", "getOrElseW", "tryCatch", "tryCatchK", "toUnion", "orElse", "orElseW", "tapError", "fromIOK", "orLeft", "swap", "_map", "map", "_ap", "ap", "flatMap", "_alt", "alt", "mapBoth", "bimap", "mapError", "mapLeft", "Apply", "apW", "flattenW", "flatten", "altW", "throwError", "URI", "getCompactable", "compact", "separate", "getFilterable", "filter", "filterMap", "partition", "partitionMap", "as", "asUnit", "flap", "Bifunctor", "apFirst", "apFirstW", "apSecond", "apSecondW", "Chain", "FromEither", "FromIO", "tap", "tapEither", "tapIO", "Alt", "MonadIO", "MonadThrow", "chainFirstIOK", "fromOption", "fromOptionK", "chainOptionK", "chainOptionKW", "_FromEither", "liftNullable", "liftOption", "_FlatMap", "flatMapNullable", "flatMapOption", "flatMapEither", "flatMapIO", "chainIOK", "chainEitherK", "chainFirstEitherK", "fromPredicate", "filterOrElse", "filterOrElseW", "fromEitherK", "Do", "bindTo", "let_", "bind", "Chain", "bindW", "apS", "apSW", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "map", "traverseReadonlyArrayWithIndex", "as", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "Applicative", "chain", "flatMap", "chainW", "chainFirst", "tap", "chainFirstW", "orElseFirst", "tapError", "URI", "mapBoth", "mapError", "_map", "_ap", "_alt", "fromIO", "throwError", "getApplySemigroup", "getApplyMonoid", "getSemigroup", "Apply", "Alt", "Alternative", "ApT", "Applicative", "Apply", "Chain", "Compactable", "Do", "Filterable", "FromEither", "FromIO", "Functor", "Monad", "MonadIO", "Pointed", "URI", "Zero", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "as", "asUnit", "bind", "bindTo", "chain", "chainEitherK", "chainFirst", "chainFirstEitherK", "chainFirstIOK", "chainIOK", "chainNullableK", "chainOptionK", "compact", "filter", "filterMap", "flap", "flatMap", "flatMapEither", "flatMapIO", "flatMapNullable", "flatMapOption", "flatten", "fold", "fromEither", "fromEitherK", "fromIO", "fromIOK", "fromNullable", "fromNullableK", "fromOption", "fromOptionK", "fromPredicate", "getOrElse", "getOrElseW", "guard", "let_", "map", "match", "matchE", "matchEW", "matchW", "none", "of", "partition", "partitionMap", "separate", "some", "tap", "tapEither", "tapIO", "toNullable", "toUndefined", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "zero", "alt", "ap", "chain", "chainNullableK", "chainOptionK", "flatMap", "fromEither", "fromNullable", "fromNullableK", "fromOptionK", "fromPredicate", "getOrElse", "map", "match", "matchE", "some", "zero", "some", "zero", "none", "fromNullable", "fromNullableK", "chainNullableK", "chain", "fromOptionK", "chainOptionK", "fromPredicate", "fromEither", "match", "matchE", "getOrElse", "map", "Functor", "ap", "Apply", "flatMap", "alt", "second", "first", "foldM", "some", "Pointed", "fromPredicate", "fromOption", "of", "fromEither", "fromIO", "Functor", "map", "match", "matchW", "matchE", "Chain", "fold", "matchEW", "getOrElse", "Monad", "getOrElseW", "toUndefined", "toNullable", "fromNullable", "fromNullableK", "chainNullableK", "fromOptionK", "ap", "Apply", "flatMap", "flatten", "alt", "altW", "zero", "none", "compact", "Compactable", "separate", "filter", "Filterable", "filterMap", "partition", "partitionMap", "_map", "_ap", "_alt", "_filter", "_filterMap", "_partition", "_partitionMap", "URI", "as", "asUnit", "flap", "apFirst", "apSecond", "Applicative", "FromEither", "FromIO", "tap", "tapEither", "tapIO", "Alt", "Zero", "guard", "Alternative", "MonadIO", "_FlatMap", "_FromIO", "_FromEither", "flatMapIO", "flatMapOption", "flatMapEither", "flatMapNullable", "fromIOK", "chainIOK", "chainFirstIOK", "fromEitherK", "chainEitherK", "chainFirstEitherK", "chainOptionK", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "map", "traverseReadonlyArrayWithIndex", "as", "chain", "flatMap", "chainFirst", "tap", "IORef", "tryCatch", "Compactable", "Filterable", "Functor", "URI", "collect", "compact", "deleteAt", "difference", "elem", "empty", "filter", "filterMap", "filterMapWithIndex", "filterWithIndex", "flap", "foldMap", "foldMapWithIndex", "fromFoldable", "getDifferenceMagma", "getEq", "getFilterableWithIndex", "getFoldable", "getFoldableWithIndex", "getIntersectionSemigroup", "getMonoid", "getShow", "getTraversableWithIndex", "getUnionMonoid", "getUnionSemigroup", "getWitherable", "insertAt", "intersection", "isEmpty", "isSubmap", "keys", "lookup", "lookupWithKey", "map", "mapWithIndex", "member", "modifyAt", "partition", "partitionMap", "partitionMapWithIndex", "partitionWithIndex", "pop", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "separate", "singleton", "size", "toArray", "toUnfoldable", "union", "updateAt", "upsertAt", "values", "Compactable", "Filterable", "Functor", "URI", "compact", "deleteAt", "difference", "elem", "empty", "filter", "filterMap", "filterMapWithIndex", "filterWithIndex", "flap", "foldMap", "foldMapWithIndex", "getDifferenceMagma", "getEq", "getIntersectionSemigroup", "getMonoid", "getShow", "getUnionMonoid", "getUnionSemigroup", "getWitherable", "insertAt", "intersection", "isEmpty", "lookup", "map", "mapWithIndex", "modifyAt", "partition", "partitionMap", "partitionMapWithIndex", "partitionWithIndex", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "separate", "singleton", "size", "toReadonlyArray", "union", "updateAt", "getShow", "SK", "size", "isEmpty", "lookup", "m", "elem", "values", "toReadonlyArray", "ord", "deleteAt", "updateAt", "modifyAt", "map", "that", "empty", "getEq", "getMonoid", "singleton", "_mapWithIndex", "partitionMapWithIndex", "left", "right", "partitionWithIndex", "filterMapWithIndex", "filterWithIndex", "_map", "_filter", "_filterWithIndex", "_filterMap", "_filterMapWithIndex", "_partition", "_partitionWithIndex", "_partitionMap", "_partitionMapWithIndex", "compact", "filter", "filterMap", "mapWithIndex", "partition", "partitionMap", "separate", "URI", "getUnionSemigroup", "union", "first", "second", "getUnionMonoid", "getIntersectionSemigroup", "intersection", "getDifferenceMagma", "difference", "Functor", "flap", "Compactable", "Filterable", "reduce", "reduceWithIndex", "b", "foldMap", "foldMapWithIndex", "reduceRight", "reduceRightWithIndex", "traverseWithIndex", "i", "traverse", "sequence", "getWitherable", "insertAt", "getShow", "size", "isEmpty", "member", "elem", "keys", "values", "collect", "toArray", "toUnfoldable", "ord", "upsertAt", "lookupWithKey", "deleteAt", "updateAt", "modifyAt", "pop", "lookup", "map", "m", "isSubmap", "getEq", "getMonoid", "SK", "singleton", "fromFoldable", "_mapWithIndex", "partitionMapWithIndex", "left", "right", "partitionWithIndex", "filterMapWithIndex", "filterWithIndex", "_map", "_filter", "_filterWithIndex", "_filterMap", "_filterMapWithIndex", "_partition", "_partitionWithIndex", "_partitionMap", "_partitionMapWithIndex", "compact", "filter", "filterMap", "mapWithIndex", "partition", "partitionMap", "separate", "URI", "getUnionSemigroup", "union", "first", "second", "getUnionMonoid", "getIntersectionSemigroup", "intersection", "getDifferenceMagma", "difference", "getFilterableWithIndex", "getWitherable", "getTraversableWithIndex", "Compactable", "reduce", "foldMap", "reduceRight", "getFoldable", "reduceWithIndex", "foldMapWithIndex", "reduceRightWithIndex", "getFoldableWithIndex", "traverseWithIndex", "i", "traverse", "sequence", "Functor", "flap", "Filterable", "copy", "empty", "insertAt", "concatAll", "fold", "getEndomorphismMonoid", "max", "min", "reverse", "struct", "tuple", "min", "max", "reverse", "struct", "empty", "tuple", "concatAll", "fold", "getEndomorphismMonoid", "getMonoid", "Eq", "match", "matchW", "reverse", "alt", "ap", "bimap", "chain", "compose", "contramap", "extend", "filter", "filterMap", "filterMapWithIndex", "filterWithIndex", "foldMap", "foldMapWithIndex", "map", "mapLeft", "mapWithIndex", "partition", "partitionMap", "partitionMapWithIndex", "partitionWithIndex", "pipe", "promap", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "map", "contramap", "mapWithIndex", "ap", "chain", "bimap", "mapLeft", "extend", "reduce", "foldMap", "reduceRight", "reduceWithIndex", "foldMapWithIndex", "reduceRightWithIndex", "alt", "filter", "filterMap", "partition", "partitionMap", "filterWithIndex", "filterMapWithIndex", "partitionWithIndex", "partitionMapWithIndex", "promap", "compose", "fromOption", "fromEither", "fromPredicate", "filterOrElse", "pipe", "map", "min", "max", "as", "Alt", "ApT", "Applicative", "Apply", "Bifunctor", "Chain", "Do", "FromEither", "Functor", "Monad", "MonadThrow", "Pointed", "URI", "alt", "altW", "ap", "apFirst", "apFirstW", "apS", "apSW", "apSecond", "apSecondW", "apW", "as", "asUnit", "ask", "asks", "bimap", "bind", "bindTo", "bindW", "chain", "chainEitherK", "chainEitherKW", "chainFirst", "chainFirstEitherK", "chainFirstEitherKW", "chainFirstReaderK", "chainFirstW", "chainOptionK", "chainOptionKW", "chainReaderK", "chainW", "filterOrElse", "filterOrElseW", "flap", "flatMap", "flatMapEither", "flatMapNullable", "flatMapOption", "flatMapReader", "flatten", "flattenW", "fold", "foldW", "fromEither", "fromEitherK", "fromOption", "fromOptionK", "fromPredicate", "fromReaderK", "getApplyMonoid", "getApplySemigroup", "getCompactable", "getFilterable", "getOrElse", "getOrElseW", "getSemigroup", "left", "let_", "liftNullable", "liftOption", "local", "map", "mapBoth", "mapError", "mapLeft", "match", "matchE", "matchEW", "matchW", "of", "orElse", "orElseFirst", "orElseFirstW", "orElseW", "orLeft", "right", "sequenceArray", "swap", "tap", "tapEither", "tapError", "tapReader", "throwError", "toUnion", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "left", "Pointed", "right", "Functor", "fromEither", "of", "match", "matchW", "matchE", "Monad", "fold", "matchEW", "foldW", "getOrElse", "getOrElseW", "toUnion", "local", "orElse", "orElseW", "tapError", "orLeft", "swap", "_map", "map", "_ap", "ap", "_alt", "alt", "mapBoth", "bimap", "mapError", "mapLeft", "Apply", "apW", "flatMap", "flattenW", "flatten", "altW", "throwError", "URI", "getCompactable", "compact", "separate", "getFilterable", "filter", "filterMap", "partition", "partitionMap", "as", "asUnit", "flap", "apFirst", "apFirstW", "apSecond", "apSecondW", "Applicative", "Chain", "FromEither", "tap", "tapEither", "tapReader", "Bifunctor", "Alt", "ask", "asks", "fromReaderK", "chainFirstReaderK", "MonadThrow", "fromOption", "fromOptionK", "chainOptionK", "chainOptionKW", "_FromEither", "liftNullable", "liftOption", "_FlatMap", "flatMapNullable", "flatMapOption", "flatMapEither", "flatMapReader", "chainEitherK", "chainEitherKW", "chainFirstEitherK", "chainFirstEitherKW", "chainReaderK", "fromPredicate", "filterOrElse", "filterOrElseW", "fromEitherK", "Do", "bindTo", "let_", "bind", "Chain", "bindW", "apS", "Apply", "apSW", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "map", "traverseReadonlyArrayWithIndex", "as", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "chain", "flatMap", "chainW", "chainFirst", "tap", "chainFirstW", "orElseFirst", "tapError", "orElseFirstW", "URI", "mapBoth", "mapError", "_map", "_ap", "_alt", "left", "getApplySemigroup", "getApplyMonoid", "Applicative", "getSemigroup", "throwError", "ApT", "Applicative", "Apply", "Chain", "Do", "FromIO", "FromReader", "Functor", "Monad", "MonadIO", "Pointed", "URI", "ap", "apFirst", "apS", "apSW", "apSecond", "apW", "as", "asUnit", "ask", "asks", "bind", "bindTo", "bindW", "chain", "chainFirst", "chainFirstIOK", "chainFirstReaderK", "chainFirstReaderKW", "chainFirstW", "chainIOK", "chainReaderK", "chainReaderKW", "chainW", "flap", "flatMap", "flatMapIO", "flatMapReader", "flatten", "flattenW", "fromIO", "fromIOK", "fromReader", "fromReaderK", "local", "map", "of", "sequenceArray", "tap", "tapIO", "tapReader", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "ap", "chain", "flatMap", "fromReader", "map", "of", "of", "map", "ap", "chain", "flatMap", "fromReader", "_ap", "_map", "fromReader", "Pointed", "fromIO", "of", "local", "_map", "map", "_ap", "ap", "Functor", "Apply", "apW", "flatMap", "Monad", "flattenW", "flatten", "URI", "as", "asUnit", "flap", "apFirst", "apSecond", "Applicative", "Chain", "MonadIO", "FromIO", "FromReader", "_FlatMap", "_FromIO", "_FromReader", "flatMapIO", "flatMapReader", "tap", "tapIO", "tapReader", "fromIOK", "chainIOK", "chainFirstIOK", "ask", "asks", "fromReaderK", "chainReaderK", "chainReaderKW", "chainFirstReaderK", "chainFirstReaderKW", "Do", "bindTo", "bind", "bindW", "apS", "apSW", "ApT", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "chain", "chainW", "chainFirst", "chainFirstW", "ApT", "ApplicativePar", "ApplicativeSeq", "ApplyPar", "ApplySeq", "Chain", "Do", "FromIO", "FromReader", "FromTask", "Functor", "Monad", "MonadIO", "MonadTask", "Pointed", "URI", "ap", "apFirst", "apS", "apSW", "apSecond", "apW", "as", "asUnit", "ask", "asks", "bind", "bindTo", "bindW", "chain", "chainFirst", "chainFirstIOK", "chainFirstReaderK", "chainFirstReaderKW", "chainFirstTaskK", "chainFirstW", "chainIOK", "chainReaderK", "chainReaderKW", "chainTaskK", "chainW", "flap", "flatMap", "flatMapIO", "flatMapReader", "flatMapTask", "flatten", "flattenW", "fromIO", "fromIOK", "fromReader", "fromReaderK", "fromTask", "fromTaskK", "getMonoid", "getSemigroup", "let_", "local", "map", "of", "sequenceArray", "sequenceSeqArray", "tap", "tapIO", "tapReader", "tapTask", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyArrayWithIndexSeq", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseSeqArray", "traverseSeqArrayWithIndex", "ApT", "ApplicativePar", "ApplicativeSeq", "ApplyPar", "Chain", "Do", "FromIO", "Functor", "Monad", "MonadIO", "Pointed", "URI", "ap", "apFirst", "apS", "apSecond", "as", "asUnit", "bind", "bindTo", "chain", "chainFirst", "chainFirstIOK", "chainIOK", "flap", "flatMap", "flatMapIO", "flatten", "fromIO", "fromIOK", "getMonoid", "getSemigroup", "let_", "map", "of", "sequenceArray", "sequenceSeqArray", "tap", "tapIO", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyArrayWithIndexSeq", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseSeqArray", "traverseSeqArrayWithIndex", "fromIO", "_map", "map", "ap", "_apSeq", "flatMap", "of", "flatten", "URI", "Functor", "as", "asUnit", "flap", "Pointed", "ApplyPar", "apFirst", "apSecond", "ApplicativePar", "ApplicativeSeq", "Chain", "Monad", "MonadIO", "FromIO", "_FlatMap", "_FromIO", "flatMapIO", "tap", "tapIO", "fromIOK", "chainIOK", "chainFirstIOK", "Do", "bindTo", "let_", "bind", "Chain", "apS", "ApplyPar", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "as", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseReadonlyArrayWithIndexSeq", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "traverseSeqArrayWithIndex", "traverseSeqArray", "sequenceSeqArray", "chain", "flatMap", "chainFirst", "tap", "URI", "_map", "fromIO", "_apSeq", "getSemigroup", "getMonoid", "ApplicativeSeq", "fromReader", "Pointed", "fromTask", "of", "fromIO", "map", "local", "_map", "_apPar", "ap", "_apSeq", "flatMap", "Functor", "ApplyPar", "apW", "Monad", "flattenW", "flatten", "URI", "as", "asUnit", "flap", "apFirst", "apSecond", "ApplicativePar", "ApplySeq", "ApplicativeSeq", "Chain", "MonadIO", "MonadTask", "FromIO", "FromTask", "FromReader", "_FlatMap", "_FromIO", "_FromReader", "flatMapIO", "flatMapTask", "flatMapReader", "tap", "tapIO", "tapReader", "tapTask", "fromIOK", "chainIOK", "chainFirstIOK", "ask", "asks", "fromReaderK", "chainReaderK", "chainReaderKW", "chainFirstReaderK", "chainFirstReaderKW", "fromTaskK", "chainTaskK", "chainFirstTaskK", "Do", "bindTo", "let_", "bind", "Chain", "bindW", "apS", "ApplyPar", "apSW", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "map", "traverseReadonlyArrayWithIndex", "as", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseReadonlyArrayWithIndexSeq", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "traverseSeqArrayWithIndex", "traverseSeqArray", "chain", "flatMap", "chainW", "chainFirst", "tap", "chainFirstW", "sequenceSeqArray", "URI", "_map", "_apPar", "fromIO", "fromTask", "_apSeq", "getSemigroup", "ApplySeq", "getMonoid", "ApplicativeSeq", "Alt", "ApT", "ApplicativePar", "ApplicativeSeq", "ApplyPar", "ApplySeq", "Bifunctor", "Chain", "Do", "FromEither", "FromIO", "FromReader", "FromTask", "Functor", "Monad", "MonadIO", "MonadTask", "MonadThrow", "Pointed", "URI", "alt", "altW", "ap", "apFirst", "apFirstW", "apS", "apSW", "apSecond", "apSecondW", "apW", "as", "asUnit", "ask", "asks", "bimap", "bind", "bindTo", "bindW", "bracket", "bracketW", "chain", "chainEitherK", "chainEitherKW", "chainFirst", "chainFirstEitherK", "chainFirstEitherKW", "chainFirstIOK", "chainFirstReaderIOK", "chainFirstReaderIOKW", "chainFirstReaderK", "chainFirstReaderKW", "chainFirstTaskK", "chainFirstW", "chainIOEitherK", "chainIOEitherKW", "chainIOK", "chainNullableK", "chainOptionK", "chainOptionKW", "chainReaderIOK", "chainReaderIOKW", "chainReaderK", "chainReaderKW", "chainTaskK", "chainW", "filterOrElse", "filterOrElseW", "flap", "flatMap", "flatMapEither", "flatMapIO", "flatMapIOEither", "flatMapNullable", "flatMapOption", "flatMapReader", "flatMapReaderIO", "flatMapTask", "flatten", "flattenW", "fold", "foldW", "fromEither", "fromEitherK", "fromIO", "fromIOEither", "fromIOEitherK", "fromIOK", "fromNullable", "fromNullableK", "fromOption", "fromOptionK", "fromPredicate", "fromReader", "fromReaderIOK", "fromReaderK", "fromTask", "fromTaskK", "getApplyMonoid", "getApplySemigroup", "getCompactable", "getFilterable", "getOrElse", "getOrElseW", "getSemigroup", "left", "leftIO", "leftReader", "leftTask", "let_", "liftNullable", "liftOption", "local", "map", "mapBoth", "mapError", "mapLeft", "match", "matchE", "matchEW", "matchW", "of", "orElse", "orElseFirst", "orElseFirstW", "orElseW", "orLeft", "orLeftW", "right", "rightIO", "rightReader", "rightTask", "run", "sequenceArray", "sequenceSeqArray", "swap", "tap", "tapEither", "tapError", "tapIO", "tapReader", "tapReaderIO", "tapTask", "throwError", "toUnion", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyArrayWithIndexSeq", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseSeqArray", "traverseSeqArrayWithIndex", "Alt", "ApT", "ApplicativePar", "ApplicativeSeq", "ApplyPar", "ApplySeq", "Bifunctor", "Chain", "Do", "FromEither", "FromIO", "FromTask", "Functor", "Monad", "MonadIO", "MonadTask", "MonadThrow", "Pointed", "URI", "alt", "altW", "ap", "apFirst", "apFirstW", "apS", "apSW", "apSecond", "apSecondW", "apW", "as", "asUnit", "bimap", "bind", "bindTo", "bindW", "bracket", "bracketW", "chain", "chainEitherK", "chainEitherKW", "chainFirst", "chainFirstEitherK", "chainFirstEitherKW", "chainFirstIOK", "chainFirstTaskK", "chainFirstW", "chainIOK", "chainNullableK", "chainOptionK", "chainOptionKW", "chainTaskK", "chainW", "filterOrElse", "filterOrElseW", "flap", "flatMap", "flatMapEither", "flatMapIO", "flatMapNullable", "flatMapOption", "flatMapTask", "flatten", "flattenW", "fold", "foldW", "fromEither", "fromEitherK", "fromIO", "fromIOEither", "fromIOK", "fromNullable", "fromNullableK", "fromOption", "fromOptionK", "fromPredicate", "fromTask", "fromTaskK", "getApplyMonoid", "getApplySemigroup", "getCompactable", "getFilterable", "getOrElse", "getOrElseW", "getSemigroup", "left", "leftIO", "let_", "liftNullable", "liftOption", "map", "mapBoth", "mapError", "mapLeft", "match", "matchE", "matchEW", "matchW", "of", "orElse", "orElseFirst", "orElseFirstIOK", "orElseFirstW", "orElseW", "orLeft", "right", "rightIO", "sequenceArray", "sequenceSeqArray", "swap", "tap", "tapEither", "tapError", "tapIO", "tapTask", "throwError", "toUnion", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyArrayWithIndexSeq", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseSeqArray", "traverseSeqArrayWithIndex", "tryCatch", "tryCatchK", "left", "Pointed", "right", "Functor", "rightIO", "fromIO", "leftIO", "fromTask", "fromEither", "of", "fromIOEither", "map", "fromOption", "match", "matchW", "matchE", "Monad", "fold", "matchEW", "foldW", "getOrElse", "getOrElseW", "tryCatch", "tryCatchK", "toUnion", "fromNullable", "fromNullableK", "chainNullableK", "orElse", "orElseW", "tapError", "orElseFirstIOK", "fromIOK", "fromTaskK", "orLeft", "swap", "flatMap", "_map", "_apPar", "ap", "_apSeq", "_alt", "alt", "mapBoth", "bimap", "mapError", "mapLeft", "ApplyPar", "apW", "flattenW", "flatten", "altW", "throwError", "URI", "getCompactable", "compact", "separate", "getFilterable", "filter", "filterMap", "partition", "partitionMap", "as", "asUnit", "flap", "apFirst", "apFirstW", "apSecond", "apSecondW", "ApplicativePar", "ApplySeq", "ApplicativeSeq", "Chain", "MonadIO", "MonadTask", "MonadThrow", "FromEither", "FromIO", "FromTask", "tap", "tapEither", "tapIO", "tapTask", "Bifunctor", "Alt", "fromOptionK", "chainOptionK", "chainOptionKW", "_FromEither", "liftNullable", "liftOption", "_FlatMap", "_FromIO", "_FromTask", "flatMapNullable", "flatMapOption", "flatMapEither", "flatMapIO", "flatMapTask", "chainEitherK", "chainEitherKW", "chainFirstEitherK", "chainFirstEitherKW", "fromPredicate", "filterOrElse", "filterOrElseW", "fromEitherK", "chainIOK", "chainFirstIOK", "chainTaskK", "chainFirstTaskK", "bracket", "bracketW", "Do", "bindTo", "let_", "bind", "Chain", "bindW", "apS", "ApplyPar", "apSW", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "map", "traverseReadonlyArrayWithIndex", "as", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseReadonlyArrayWithIndexSeq", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "traverseSeqArrayWithIndex", "traverseSeqArray", "sequenceSeqArray", "chain", "flatMap", "chainW", "chainFirst", "tap", "chainFirstW", "orElseFirst", "tapError", "orElseFirstW", "URI", "mapBoth", "mapError", "_map", "_apPar", "_alt", "fromIO", "fromTask", "throwError", "_apSeq", "getApplySemigroup", "ApplySeq", "getApplyMonoid", "ApplicativeSeq", "getSemigroup", "ApplicativePar", "of", "left", "Pointed", "right", "rightTask", "leftTask", "rightReader", "leftReader", "Functor", "rightIO", "leftIO", "fromEither", "fromReader", "fromIO", "fromTask", "fromIOEither", "match", "matchW", "matchE", "Chain", "fold", "matchEW", "foldW", "getOrElse", "Monad", "getOrElseW", "toUnion", "fromNullable", "fromNullableK", "chainNullableK", "local", "orElse", "orElseW", "tapError", "orLeft", "orLeftW", "swap", "fromIOEitherK", "_map", "map", "_apPar", "ap", "_apSeq", "flatMap", "_alt", "alt", "mapBoth", "bimap", "mapError", "mapLeft", "ApplyPar", "apW", "flattenW", "flatten", "altW", "throwError", "URI", "getCompactable", "compact", "separate", "getFilterable", "filter", "filterMap", "partition", "partitionMap", "Apply", "as", "asUnit", "flap", "apFirst", "apFirstW", "apSecond", "apSecondW", "ApplicativePar", "ApplySeq", "ApplicativeSeq", "MonadIO", "MonadTask", "MonadThrow", "FromEither", "FromIO", "FromTask", "FromReader", "tap", "tapEither", "tapIO", "tapTask", "tapReader", "tapReaderIO", "fromReaderIOK", "Bifunctor", "Alt", "ask", "asks", "fromReaderK", "chainFirstReaderK", "chainFirstReaderKW", "chainFirstReaderIOKW", "chainFirstReaderIOK", "fromOption", "fromOptionK", "chainOptionK", "chainOptionKW", "_FromEither", "liftNullable", "liftOption", "_FlatMap", "_FromIO", "_FromTask", "_FromReader", "flatMapNullable", "flatMapOption", "flatMapEither", "flatMapIO", "flatMapTask", "flatMapReader", "flatMapReaderIO", "flatMapIOEither", "chainEitherK", "chainEitherKW", "chainFirstEitherK", "chainFirstEitherKW", "fromPredicate", "filterOrElse", "filterOrElseW", "fromEitherK", "fromIOK", "chainIOK", "chainFirstIOK", "fromTaskK", "chainTaskK", "chainFirstTaskK", "chainReaderK", "chainReaderKW", "chainReaderIOKW", "chainReaderIOK", "chainIOEitherKW", "chainIOEitherK", "bracket", "bracketW", "Do", "bindTo", "let_", "bind", "Chain", "bindW", "apS", "ApplyPar", "apSW", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "map", "traverseReadonlyArrayWithIndex", "as", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseReadonlyArrayWithIndexSeq", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "traverseSeqArrayWithIndex", "traverseSeqArray", "sequenceSeqArray", "chain", "flatMap", "chainW", "chainFirst", "tap", "chainFirstW", "orElseFirst", "tapError", "orElseFirstW", "URI", "_map", "_apPar", "_alt", "mapBoth", "mapError", "fromIO", "fromTask", "throwError", "_apSeq", "getApplySemigroup", "ApplySeq", "getApplyMonoid", "ApplicativeSeq", "getSemigroup", "ApplicativePar", "run", "Compactable", "Filterable", "FilterableWithIndex", "Foldable", "FoldableWithIndex", "Functor", "FunctorWithIndex", "Traversable", "TraversableWithIndex", "URI", "Witherable", "_filter", "_filterMap", "_filterMapWithIndex", "_filterWithIndex", "_foldMap", "_foldMapWithIndex", "_map", "_mapWithIndex", "_partition", "_partitionMap", "_partitionMapWithIndex", "_partitionWithIndex", "_reduce", "_reduceRight", "_reduceRightWithIndex", "_reduceWithIndex", "_traverse", "collect", "compact", "deleteAt", "difference", "elem", "empty", "every", "filter", "filterMap", "filterMapWithIndex", "filterWithIndex", "flap", "foldMap", "foldMapWithIndex", "fromFoldable", "getDifferenceMagma", "getEq", "getFoldable", "getFoldableWithIndex", "getIntersectionSemigroup", "getMonoid", "getShow", "getTraversable", "getTraversableWithIndex", "getUnionMonoid", "getUnionSemigroup", "getWitherable", "has", "insertAt", "intersection", "isEmpty", "keys", "lookup", "map", "mapWithIndex", "modifyAt", "partition", "partitionMap", "partitionMapWithIndex", "partitionWithIndex", "pop", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "separate", "sequence", "singleton", "size", "some", "toReadonlyArray", "toUnfoldable", "traverse", "traverseWithIndex", "union", "updateAt", "upsertAt", "wilt", "wither", "Eq", "Monoid", "Ord", "Semigroup", "Show", "empty", "isEmpty", "size", "split", "Eq", "first", "second", "Semigroup", "empty", "Monoid", "Ord", "Show", "isEmpty", "size", "split", "isNonEmpty", "size", "isEmpty", "keys", "Ord", "collect", "toReadonlyArray", "toUnfoldable", "upsertAt", "has", "deleteAt", "updateAt", "modifyAt", "pop", "lookup", "that", "r", "empty", "mapWithIndex", "map", "reduceWithIndex", "foldMapWithIndex", "reduceRightWithIndex", "singleton", "traverseWithIndex", "_traverseWithIndex", "traverse", "_traverse", "sequence", "wither", "compact", "wilt", "separate", "partitionMapWithIndex", "left", "right", "partitionWithIndex", "filterMapWithIndex", "filterWithIndex", "fromFoldable", "every", "some", "elem", "fa", "union", "second", "first", "intersection", "difference", "_map", "_mapWithIndex", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_filter", "filter", "_filterMap", "filterMap", "_partition", "partition", "_partitionMap", "partitionMap", "_reduceWithIndex", "_foldMapWithIndex", "_reduceRightWithIndex", "_partitionMapWithIndex", "_partitionWithIndex", "_filterMapWithIndex", "_filterWithIndex", "key", "b", "URI", "getShow", "getEq", "getMonoid", "Functor", "flap", "FunctorWithIndex", "getFoldable", "getFoldableWithIndex", "Compactable", "Filterable", "FilterableWithIndex", "getTraversable", "getTraversableWithIndex", "getWitherable", "getUnionSemigroup", "getUnionMonoid", "getIntersectionSemigroup", "getDifferenceMagma", "Foldable", "FoldableWithIndex", "Traversable", "TraversableWithIndex", "_wither", "_wilt", "Witherable", "insertAt", "URI", "chain", "compact", "difference", "elem", "empty", "every", "filter", "filterMap", "foldMap", "fromArray", "fromReadonlyArray", "getDifferenceMagma", "getEq", "getIntersectionSemigroup", "getShow", "getUnionMonoid", "getUnionSemigroup", "intersection", "isEmpty", "map", "partition", "partitionMap", "reduce", "reduceRight", "separate", "singleton", "size", "some", "toReadonlyArray", "union", "singleton", "fromReadonlyArray", "as", "has", "elem", "map", "chain", "e", "filter", "values", "partition", "right", "left", "union", "that", "isEmpty", "intersection", "empty", "partitionMap", "difference", "reduce", "toReadonlyArray", "foldMap", "reduceRight", "b", "compact", "filterMap", "separate", "size", "some", "every", "not", "set", "URI", "getShow", "getEq", "getUnionSemigroup", "getUnionMonoid", "getIntersectionSemigroup", "getDifferenceMagma", "fromArray", "Bifunctor", "Comonad", "Foldable", "Functor", "Traversable", "URI", "bimap", "compose", "duplicate", "extend", "extract", "flap", "foldMap", "getApplicative", "getApply", "map", "mapLeft", "reduce", "reduceRight", "sequence", "swap", "traverse", "swap", "getApply", "URI", "_map", "of", "getApplicative", "_compose", "compose", "_bimap", "bimap", "_mapLeft", "_extend", "extend", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_traverse", "traverse", "extract", "duplicate", "sequence", "Functor", "flap", "map", "mapLeft", "Bifunctor", "Comonad", "Foldable", "Traversable", "Compactable", "Filterable", "FilterableWithIndex", "Foldable", "FoldableWithIndex", "Functor", "FunctorWithIndex", "Traversable", "TraversableWithIndex", "URI", "Witherable", "collect", "compact", "deleteAt", "difference", "elem", "empty", "every", "filter", "filterMap", "filterMapWithIndex", "filterWithIndex", "flap", "foldMap", "foldMapWithIndex", "fromEntries", "fromFoldable", "fromFoldableMap", "getDifferenceMagma", "getEq", "getFoldable", "getFoldableWithIndex", "getIntersectionSemigroup", "getMonoid", "getShow", "getTraversable", "getTraversableWithIndex", "getUnionMonoid", "getUnionSemigroup", "getWitherable", "has", "hasOwnProperty", "insertAt", "intersection", "isEmpty", "isSubrecord", "keys", "lookup", "map", "mapWithIndex", "modifyAt", "partition", "partitionMap", "partitionMapWithIndex", "partitionWithIndex", "pop", "reduce", "reduceRight", "reduceRightWithIndex", "reduceWithIndex", "separate", "sequence", "singleton", "size", "some", "toArray", "toEntries", "toUnfoldable", "traverse", "traverseWithIndex", "union", "updateAt", "upsertAt", "wilt", "wither", "__assign", "size", "isEmpty", "keys_", "keys", "Ord", "collect", "toArray", "toUnfoldable", "upsertAt", "has", "deleteAt", "updateAt", "modifyAt", "pop", "lookup", "isSubrecord", "mapWithIndex", "map", "reduceWithIndex", "foldMapWithIndex", "reduceRightWithIndex", "singleton", "traverseWithIndex", "traverse", "sequence", "wither", "compact", "wilt", "separate", "partitionMapWithIndex", "partitionWithIndex", "filterMapWithIndex", "filterWithIndex", "fromFoldable", "toEntries", "fromEntries", "Foldable", "fromFoldableMap", "every", "some", "elem", "union", "second", "first", "intersection", "difference", "_map", "_mapWithIndex", "_reduce", "_foldMap", "_reduceRight", "_filter", "_filterMap", "_partition", "_partitionMap", "_reduceWithIndex", "_foldMapWithIndex", "_reduceRightWithIndex", "_partitionMapWithIndex", "_partitionWithIndex", "_filterMapWithIndex", "_filterWithIndex", "_traverse", "_sequence", "_traverseWithIndex", "key", "filter", "filterMap", "partition", "partitionMap", "reduce", "foldMap", "reduceRight", "URI", "getShow", "getEq", "getMonoid", "Functor", "flap", "FunctorWithIndex", "getFoldable", "getFoldableWithIndex", "Compactable", "Filterable", "FilterableWithIndex", "getTraversable", "getTraversableWithIndex", "getWitherable", "getUnionSemigroup", "getUnionMonoid", "getIntersectionSemigroup", "getDifferenceMagma", "FoldableWithIndex", "Traversable", "TraversableWithIndex", "_wither", "_wilt", "Witherable", "empty", "insertAt", "hasOwnProperty", "and", "compose", "fromEitherK", "fromOptionK", "id", "not", "or", "zero", "fromOptionK", "fromEitherK", "id", "not", "or", "second", "first", "and", "zero", "compose", "tuple", "tuple", "chain", "compact", "difference", "elem", "empty", "every", "filter", "filterMap", "foldMap", "fromArray", "getDifferenceMagma", "getEq", "getIntersectionSemigroup", "getShow", "getUnionMonoid", "getUnionSemigroup", "insert", "intersection", "isEmpty", "isSubset", "map", "partition", "partitionMap", "reduce", "reduceRight", "remove", "separate", "singleton", "size", "some", "toArray", "toggle", "union", "getShow", "getEq", "map", "elem", "chain", "e", "filter", "values", "partition", "right", "left", "union", "that", "isEmpty", "intersection", "partitionMap", "difference", "getUnionSemigroup", "getUnionMonoid", "getIntersectionSemigroup", "getDifferenceMagma", "reduce", "foldMap", "reduceRight", "singleton", "insert", "remove", "toggle", "fromArray", "as", "has", "compact", "filterMap", "separate", "empty", "size", "some", "every", "isSubset", "toArray", "struct", "tuple", "struct", "tuple", "Alt", "Applicative", "Apply", "Bifunctor", "Chain", "FromEither", "FromIO", "FromReader", "FromState", "FromTask", "Functor", "Monad", "MonadIO", "MonadTask", "MonadThrow", "Pointed", "URI", "alt", "altW", "ap", "apFirst", "apFirstW", "apS", "apSW", "apSecond", "apSecondW", "apW", "as", "asUnit", "ask", "asks", "bimap", "bind", "bindTo", "bindW", "chain", "chainEitherK", "chainEitherKW", "chainFirst", "chainFirstEitherK", "chainFirstEitherKW", "chainFirstIOK", "chainFirstReaderK", "chainFirstReaderKW", "chainFirstTaskK", "chainFirstW", "chainIOEitherK", "chainIOEitherKW", "chainIOK", "chainOptionK", "chainOptionKW", "chainReaderK", "chainReaderKW", "chainStateK", "chainTaskEitherK", "chainTaskEitherKW", "chainTaskK", "chainW", "evalState", "evaluate", "execState", "execute", "filterOrElse", "filterOrElseW", "flap", "flatMap", "flatMapEither", "flatMapIO", "flatMapIOEither", "flatMapOption", "flatMapReader", "flatMapTask", "flatMapTaskEither", "flatten", "flattenW", "fromEither", "fromEitherK", "fromIO", "fromIOEither", "fromIOEitherK", "fromIOK", "fromOption", "fromOptionK", "fromPredicate", "fromReader", "fromReaderEither", "fromReaderK", "fromState", "fromStateK", "fromTask", "fromTaskEither", "fromTaskEitherK", "fromTaskK", "get", "gets", "left", "leftIO", "leftReader", "leftTask", "let_", "local", "map", "mapLeft", "modify", "of", "put", "right", "rightIO", "rightReader", "rightTask", "run", "sequenceArray", "tap", "tapEither", "tapIO", "tapReader", "tapTask", "throwError", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "ap", "chain", "evaluate", "execute", "flatMap", "fromF", "map", "of", "of", "map", "ap", "s", "_a", "chain", "flatMap", "fromF", "evaluate", "execute", "_ap", "_map", "left", "right", "of", "Pointed", "rightTask", "leftTask", "rightReader", "leftReader", "rightIO", "leftIO", "fromEither", "match", "fromReader", "fromIO", "fromTask", "fromState", "fromTaskEither", "fromIOEither", "fromReaderEither", "fromF", "Functor", "local", "fromIOEitherK", "fromTaskEitherK", "flatMap", "_map", "map", "_ap", "ap", "_alt", "alt", "_bimap", "bimap", "s", "_mapLeft", "mapLeft", "Chain", "apW", "_FromIO", "_FromTask", "_FromReader", "_FromEither", "Monad", "_FlatMap", "flatMapTaskEither", "flatMapIO", "flatMapTask", "flatMapReader", "flatMapIOEither", "flatMapEither", "flatMapOption", "fromStateK", "flattenW", "flatten", "altW", "throwError", "URI", "as", "asUnit", "flap", "Apply", "apFirst", "apFirstW", "apSecond", "apSecondW", "Applicative", "FromState", "get", "put", "modify", "gets", "chainStateK", "MonadIO", "MonadTask", "MonadThrow", "FromEither", "FromIO", "FromTask", "FromReader", "tap", "tapEither", "tapIO", "tapTask", "tapReader", "Bifunctor", "Alt", "ask", "asks", "fromReaderK", "chainReaderK", "chainReaderKW", "chainFirstReaderK", "chainFirstReaderKW", "fromOption", "fromOptionK", "chainOptionK", "chainOptionKW", "chainEitherK", "chainEitherKW", "chainFirstEitherK", "chainFirstEitherKW", "fromPredicate", "filterOrElse", "filterOrElseW", "fromEitherK", "fromIOK", "chainIOK", "chainFirstIOK", "chainTaskEitherKW", "chainTaskEitherK", "chainIOEitherKW", "chainIOEitherK", "fromTaskK", "chainTaskK", "chainFirstTaskK", "evaluate", "execute", "bindTo", "let_", "bind", "Chain", "bindW", "apS", "Apply", "apSW", "traverseReadonlyNonEmptyArrayWithIndex", "as", "s", "map", "traverseReadonlyArrayWithIndex", "of", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "chain", "flatMap", "chainW", "chainFirst", "tap", "chainFirstW", "URI", "_map", "_ap", "_bimap", "_mapLeft", "_alt", "fromIO", "fromTask", "throwError", "evalState", "execState", "run", "Comonad", "Functor", "URI", "duplicate", "extend", "extract", "flap", "map", "_map", "map", "_extend", "extend", "extract", "duplicate", "URI", "Functor", "flap", "Comonad", "split", "split", "first", "second", "Alt", "Alternative", "ApT", "ApplicativePar", "ApplicativeSeq", "ApplyPar", "ApplySeq", "Chain", "Compactable", "Do", "Filterable", "FromEither", "FromIO", "FromTask", "Functor", "Monad", "MonadIO", "MonadTask", "Pointed", "URI", "Zero", "alt", "altW", "ap", "apFirst", "apS", "apSecond", "as", "asUnit", "bind", "bindTo", "chain", "chainEitherK", "chainFirst", "chainFirstEitherK", "chainFirstIOK", "chainFirstTaskK", "chainIOK", "chainNullableK", "chainOptionK", "chainTaskK", "compact", "filter", "filterMap", "flap", "flatMap", "flatMapIO", "flatMapTask", "flatten", "fold", "foldW", "fromEither", "fromEitherK", "fromIO", "fromIOK", "fromNullable", "fromNullableK", "fromOption", "fromOptionK", "fromPredicate", "fromTask", "fromTaskEither", "fromTaskK", "getOrElse", "getOrElseW", "guard", "let_", "map", "match", "matchE", "matchEW", "matchW", "none", "of", "partition", "partitionMap", "separate", "sequenceArray", "sequenceSeqArray", "some", "tap", "tapEither", "tapIO", "tapTask", "traverseArray", "traverseArrayWithIndex", "traverseReadonlyArrayWithIndex", "traverseReadonlyArrayWithIndexSeq", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseSeqArray", "traverseSeqArrayWithIndex", "tryCatch", "tryCatchK", "zero", "__awaiter", "__generator", "some", "Pointed", "fromPredicate", "fromOption", "of", "fromEither", "fromIO", "fromTask", "Functor", "fromTaskEither", "map", "match", "matchW", "matchE", "Chain", "fold", "matchEW", "foldW", "getOrElse", "Monad", "getOrElseW", "fromNullable", "tryCatch", "tryCatchK", "fromNullableK", "chainNullableK", "fromOptionK", "chainOptionK", "ap", "ApplyPar", "_FromIO", "_FromTask", "flatMap", "_FlatMap", "flatMapIO", "flatMapTask", "flatten", "alt", "altW", "zero", "none", "compact", "Compactable", "separate", "filter", "Filterable", "filterMap", "partition", "partitionMap", "_map", "_ap", "_alt", "_filter", "_filterMap", "_partition", "_partitionMap", "URI", "as", "asUnit", "flap", "apFirst", "apSecond", "ApplicativePar", "_apSeq", "ApplySeq", "ApplicativeSeq", "FromEither", "FromIO", "FromTask", "tap", "tapEither", "tapIO", "tapTask", "Alt", "Zero", "guard", "Alternative", "MonadIO", "MonadTask", "fromIOK", "chainIOK", "chainFirstIOK", "fromEitherK", "chainEitherK", "chainFirstEitherK", "fromTaskK", "chainTaskK", "chainFirstTaskK", "Do", "bindTo", "let_", "bind", "Chain", "apS", "ApplyPar", "ApT", "of", "traverseReadonlyNonEmptyArrayWithIndex", "map", "traverseReadonlyArrayWithIndex", "as", "traverseReadonlyNonEmptyArrayWithIndexSeq", "traverseReadonlyArrayWithIndexSeq", "traverseArrayWithIndex", "traverseArray", "sequenceArray", "traverseSeqArrayWithIndex", "traverseSeqArray", "sequenceSeqArray", "chain", "flatMap", "chainFirst", "tap", "ApT", "Bifunctor", "FromEither", "FromIO", "FromTask", "FromThese", "Functor", "Pointed", "URI", "bimap", "both", "flap", "fold", "foldW", "fromEither", "fromIO", "fromIOEither", "fromIOK", "fromOption", "fromOptionK", "fromPredicate", "fromTask", "fromTaskK", "fromTheseK", "getApplicative", "getApply", "getChain", "getMonad", "getSemigroup", "left", "leftIO", "leftTask", "map", "mapLeft", "match", "matchE", "matchEW", "matchW", "of", "right", "rightIO", "rightTask", "swap", "toTuple", "toTuple2", "traverseReadonlyArrayWithIndex", "traverseReadonlyArrayWithIndexSeq", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndexSeq", "ApT", "Bifunctor", "Foldable", "FromEither", "Functor", "Pointed", "Traversable", "URI", "bimap", "elem", "exists", "flap", "fold", "foldMap", "foldW", "fromOption", "fromOptionK", "fromPredicate", "getApplicative", "getApply", "getChain", "getEq", "getLeft", "getMonad", "getRight", "getSemigroup", "getShow", "isLeft", "isRight", "left", "map", "mapLeft", "match", "matchW", "of", "reduce", "reduceRight", "right", "sequence", "swap", "traverse", "traverseReadonlyArrayWithIndex", "traverseReadonlyNonEmptyArrayWithIndex", "isLeft", "isRight", "left", "right", "matchW", "foldW", "match", "fold", "swap", "getShow", "getEq", "getSemigroup", "getApply", "URI", "_map", "getApplicative", "of", "getChain", "chain", "getMonad", "getLeft", "getRight", "map", "_bimap", "bimap", "_mapLeft", "mapLeft", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_traverse", "traverse", "sequence", "Functor", "flap", "Pointed", "Bifunctor", "Foldable", "Traversable", "FromEither", "fromPredicate", "fromOption", "fromOptionK", "elem", "exists", "ApT", "traverseReadonlyNonEmptyArrayWithIndex", "as", "traverseReadonlyArrayWithIndex", "ap", "bimap", "both", "chain", "left", "leftF", "map", "mapLeft", "match", "matchE", "right", "rightF", "swap", "toTuple2", "right", "left", "both", "rightF", "leftF", "map", "Functor", "ap", "getApply", "chain", "match", "bimap", "mapLeft", "matchE", "swap", "toTuple2", "_map", "_bimap", "_mapLeft", "of", "_ap", "left", "Pointed", "right", "both", "rightTask", "rightF", "Functor", "leftTask", "leftF", "rightIO", "fromIO", "leftIO", "fromEither", "of", "fromIOEither", "fromTask", "match", "matchW", "matchE", "Monad", "fold", "matchEW", "foldW", "swap", "_map", "map", "_bimap", "bimap", "_mapLeft", "mapLeft", "URI", "getApply", "ap", "getApplicative", "getChain", "ApplicativePar", "chain", "getMonad", "flap", "Bifunctor", "FromEither", "fromOption", "fromOptionK", "fromPredicate", "FromThese", "fromTheseK", "FromIO", "fromIOK", "FromTask", "fromTaskK", "toTuple2", "ApT", "traverseReadonlyNonEmptyArrayWithIndex", "traverseReadonlyArrayWithIndex", "as", "traverseReadonlyNonEmptyArrayWithIndexSeq", "isLeft", "traverseReadonlyArrayWithIndexSeq", "toTuple", "getSemigroup", "Functor", "URI", "flap", "map", "extend", "extract", "URI", "_map", "map", "Functor", "flap", "sequence", "traverse", "traverse", "sequence", "sequenceT", "map", "_traverse", "_sequence", "Applicative", "Apply", "Chain", "Comonad", "Do", "Foldable", "Functor", "Monad", "Pointed", "Traversable", "URI", "ap", "apFirst", "apS", "apSecond", "bind", "bindTo", "chain", "chainFirst", "duplicate", "elem", "exists", "extend", "extract", "flap", "flatMap", "flatten", "fold", "foldMap", "getEq", "getShow", "let_", "make", "map", "of", "reduce", "reduceRight", "sequence", "traverse", "make", "getShow", "isEmpty", "getEq", "tree", "traverse", "fold", "_map", "map", "_ap", "flatMap", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_extend", "extend", "_traverse", "ap", "concat", "getMonoid", "duplicate", "flatten", "extract", "sequence", "of", "URI", "Functor", "flap", "Pointed", "Apply", "apFirst", "apSecond", "Applicative", "Chain", "Monad", "chainFirst", "Foldable", "Traversable", "Comonad", "Do", "bindTo", "let_", "bind", "Chain", "apS", "Apply", "elem", "tree", "exists", "chain", "flatMap", "URI", "_map", "of", "_ap", "_reduce", "_foldMap", "_reduceRight", "_traverse", "sequence", "extract", "_extend", "Bifunctor", "Comonad", "Foldable", "Functor", "Semigroupoid", "Traversable", "URI", "bimap", "compose", "duplicate", "extend", "extract", "flap", "foldMap", "fst", "getApplicative", "getApply", "getChain", "getChainRec", "getMonad", "map", "mapFst", "mapLeft", "mapSnd", "reduce", "reduceRight", "sequence", "snd", "swap", "traverse", "tuple", "fst", "snd", "swap", "getApply", "URI", "_map", "of", "getApplicative", "getChain", "getMonad", "getChainRec", "_compose", "compose", "mapFst", "_bimap", "bimap", "_mapLeft", "mapSnd", "_extend", "extend", "_reduce", "reduce", "_foldMap", "foldMap", "_reduceRight", "reduceRight", "_traverse", "traverse", "duplicate", "extract", "sequence", "Functor", "flap", "Bifunctor", "Semigroupoid", "Comonad", "Foldable", "Traversable", "map", "mapLeft", "tuple", "Monoid", "Semigroup", "Semigroup", "constant", "Monoid", "Functor", "URI", "censor", "evaluate", "execute", "flap", "getApplicative", "getApply", "getChain", "getMonad", "listen", "listens", "map", "listen", "listens", "censor", "_map", "map", "URI", "getApply", "getApplicative", "getChain", "getMonad", "Functor", "flap", "evaluate", "execute", "map", "_a"]
}
