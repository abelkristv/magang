import {
  __export
} from "./chunk-ZS7NZCD4.js";

// node_modules/fp-ts/es6/Alt.js
var Alt_exports = {};
__export(Alt_exports, {
  altAll: () => altAll
});
function altAll(F) {
  return function(startWith) {
    return function(as15) {
      return as15.reduce(function(acc, a) {
        return F.alt(acc, function() {
          return a;
        });
      }, startWith);
    };
  };
}

// node_modules/fp-ts/es6/Alternative.js
var Alternative_exports = {};
__export(Alternative_exports, {
  altAll: () => altAll2,
  getAlternativeMonoid: () => getAlternativeMonoid
});

// node_modules/fp-ts/es6/Apply.js
var Apply_exports = {};
__export(Apply_exports, {
  ap: () => ap,
  apFirst: () => apFirst,
  apS: () => apS,
  apSecond: () => apSecond,
  getApplySemigroup: () => getApplySemigroup,
  sequenceS: () => sequenceS,
  sequenceT: () => sequenceT
});

// node_modules/fp-ts/es6/function.js
var function_exports = {};
__export(function_exports, {
  SK: () => SK,
  absurd: () => absurd,
  apply: () => apply,
  constFalse: () => constFalse,
  constNull: () => constNull,
  constTrue: () => constTrue,
  constUndefined: () => constUndefined,
  constVoid: () => constVoid,
  constant: () => constant,
  decrement: () => decrement,
  dual: () => dual,
  flip: () => flip,
  flow: () => flow,
  getBooleanAlgebra: () => getBooleanAlgebra,
  getEndomorphismMonoid: () => getEndomorphismMonoid,
  getMonoid: () => getMonoid,
  getRing: () => getRing,
  getSemigroup: () => getSemigroup,
  getSemiring: () => getSemiring,
  hole: () => hole,
  identity: () => identity,
  increment: () => increment,
  not: () => not,
  pipe: () => pipe,
  tuple: () => tuple,
  tupled: () => tupled,
  unsafeCoerce: () => unsafeCoerce,
  untupled: () => untupled
});
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var getBooleanAlgebra = function(B) {
  return function() {
    return {
      meet: function(x, y) {
        return function(a) {
          return B.meet(x(a), y(a));
        };
      },
      join: function(x, y) {
        return function(a) {
          return B.join(x(a), y(a));
        };
      },
      zero: function() {
        return B.zero;
      },
      one: function() {
        return B.one;
      },
      implies: function(x, y) {
        return function(a) {
          return B.implies(x(a), y(a));
        };
      },
      not: function(x) {
        return function(a) {
          return B.not(x(a));
        };
      }
    };
  };
};
var getSemigroup = function(S) {
  return function() {
    return {
      concat: function(f, g) {
        return function(a) {
          return S.concat(f(a), g(a));
        };
      }
    };
  };
};
var getMonoid = function(M) {
  var getSemigroupM = getSemigroup(M);
  return function() {
    return {
      concat: getSemigroupM().concat,
      empty: function() {
        return M.empty;
      }
    };
  };
};
var getSemiring = function(S) {
  return {
    add: function(f, g) {
      return function(x) {
        return S.add(f(x), g(x));
      };
    },
    zero: function() {
      return S.zero;
    },
    mul: function(f, g) {
      return function(x) {
        return S.mul(f(x), g(x));
      };
    },
    one: function() {
      return S.one;
    }
  };
};
var getRing = function(R) {
  var S = getSemiring(R);
  return {
    add: S.add,
    mul: S.mul,
    one: S.one,
    zero: S.zero,
    sub: function(f, g) {
      return function(x) {
        return R.sub(f(x), g(x));
      };
    }
  };
};
var apply = function(a) {
  return function(f) {
    return f(a);
  };
};
function identity(a) {
  return a;
}
var unsafeCoerce = identity;
function constant(a) {
  return function() {
    return a;
  };
}
var constTrue = constant(true);
var constFalse = constant(false);
var constNull = constant(null);
var constUndefined = constant(void 0);
var constVoid = constUndefined;
function flip(f) {
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (args.length > 1) {
      return f(args[1], args[0]);
    }
    return function(a) {
      return f(a)(args[0]);
    };
  };
}
function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
  switch (arguments.length) {
    case 1:
      return ab;
    case 2:
      return function() {
        return bc(ab.apply(this, arguments));
      };
    case 3:
      return function() {
        return cd(bc(ab.apply(this, arguments)));
      };
    case 4:
      return function() {
        return de(cd(bc(ab.apply(this, arguments))));
      };
    case 5:
      return function() {
        return ef(de(cd(bc(ab.apply(this, arguments)))));
      };
    case 6:
      return function() {
        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
      };
    case 7:
      return function() {
        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
      };
    case 8:
      return function() {
        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
      };
    case 9:
      return function() {
        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
      };
  }
  return;
}
function tuple() {
  var t = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    t[_i] = arguments[_i];
  }
  return t;
}
function increment(n) {
  return n + 1;
}
function decrement(n) {
  return n - 1;
}
function absurd(_) {
  throw new Error("Called `absurd` function which should be uncallable");
}
function tupled(f) {
  return function(a) {
    return f.apply(void 0, a);
  };
}
function untupled(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return f(a);
  };
}
function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
  switch (arguments.length) {
    case 1:
      return a;
    case 2:
      return ab(a);
    case 3:
      return bc(ab(a));
    case 4:
      return cd(bc(ab(a)));
    case 5:
      return de(cd(bc(ab(a))));
    case 6:
      return ef(de(cd(bc(ab(a)))));
    case 7:
      return fg(ef(de(cd(bc(ab(a))))));
    case 8:
      return gh(fg(ef(de(cd(bc(ab(a)))))));
    case 9:
      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
    default: {
      var ret = arguments[0];
      for (var i = 1; i < arguments.length; i++) {
        ret = arguments[i](ret);
      }
      return ret;
    }
  }
}
var hole = absurd;
var SK = function(_, b) {
  return b;
};
function not(predicate) {
  return function(a) {
    return !predicate(a);
  };
}
var getEndomorphismMonoid = function() {
  return {
    concat: function(first3, second2) {
      return flow(first3, second2);
    },
    empty: identity
  };
};
var dual = function(arity, body) {
  var isDataFirst = typeof arity === "number" ? function(args) {
    return args.length >= arity;
  } : arity;
  return function() {
    var args = Array.from(arguments);
    if (isDataFirst(arguments)) {
      return body.apply(this, args);
    }
    return function(self) {
      return body.apply(void 0, __spreadArray([self], args, false));
    };
  };
};

// node_modules/fp-ts/es6/internal.js
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNone = function(fa) {
  return fa._tag === "None";
};
var isSome = function(fa) {
  return fa._tag === "Some";
};
var none = { _tag: "None" };
var some = function(a) {
  return { _tag: "Some", value: a };
};
var isLeft = function(ma) {
  return ma._tag === "Left";
};
var isRight = function(ma) {
  return ma._tag === "Right";
};
var left = function(e) {
  return { _tag: "Left", left: e };
};
var right = function(a) {
  return { _tag: "Right", right: a };
};
var singleton = function(a) {
  return [a];
};
var isNonEmpty = function(as15) {
  return as15.length > 0;
};
var head = function(as15) {
  return as15[0];
};
var tail = function(as15) {
  return as15.slice(1);
};
var emptyReadonlyArray = [];
var emptyRecord = {};
var has = Object.prototype.hasOwnProperty;
var fromReadonlyNonEmptyArray = function(as15) {
  return __spreadArray2([as15[0]], as15.slice(1), true);
};
var liftNullable = function(F) {
  return function(f, onNullable) {
    return function() {
      var a = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
      }
      var o = f.apply(void 0, a);
      return F.fromEither(o == null ? left(onNullable.apply(void 0, a)) : right(o));
    };
  };
};
var liftOption = function(F) {
  return function(f, onNone) {
    return function() {
      var a = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
      }
      var o = f.apply(void 0, a);
      return F.fromEither(isNone(o) ? left(onNone.apply(void 0, a)) : right(o.value));
    };
  };
};
var flatMapNullable = function(F, M) {
  return dual(3, function(self, f, onNullable) {
    return M.flatMap(self, liftNullable(F)(f, onNullable));
  });
};
var flatMapOption = function(F, M) {
  return dual(3, function(self, f, onNone) {
    return M.flatMap(self, liftOption(F)(f, onNone));
  });
};
var flatMapEither = function(F, M) {
  return dual(2, function(self, f) {
    return M.flatMap(self, function(a) {
      return F.fromEither(f(a));
    });
  });
};
var flatMapIO = function(F, M) {
  return dual(2, function(self, f) {
    return M.flatMap(self, function(a) {
      return F.fromIO(f(a));
    });
  });
};
var flatMapTask = function(F, M) {
  return dual(2, function(self, f) {
    return M.flatMap(self, function(a) {
      return F.fromTask(f(a));
    });
  });
};
var flatMapReader = function(F, M) {
  return dual(2, function(self, f) {
    return M.flatMap(self, function(a) {
      return F.fromReader(f(a));
    });
  });
};

// node_modules/fp-ts/es6/Apply.js
function ap(F, G) {
  return function(fa) {
    return function(fab) {
      return F.ap(F.map(fab, function(gab) {
        return function(ga) {
          return G.ap(gab, ga);
        };
      }), fa);
    };
  };
}
function apFirst(A) {
  return function(second2) {
    return function(first3) {
      return A.ap(A.map(first3, function(a) {
        return function() {
          return a;
        };
      }), second2);
    };
  };
}
function apSecond(A) {
  return function(second2) {
    return function(first3) {
      return A.ap(A.map(first3, function() {
        return function(b) {
          return b;
        };
      }), second2);
    };
  };
}
function apS(F) {
  return function(name, fb) {
    return function(fa) {
      return F.ap(F.map(fa, function(a) {
        return function(b) {
          var _a;
          return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
        };
      }), fb);
    };
  };
}
function getApplySemigroup(F) {
  return function(S) {
    return {
      concat: function(first3, second2) {
        return F.ap(F.map(first3, function(x) {
          return function(y) {
            return S.concat(x, y);
          };
        }), second2);
      }
    };
  };
}
function curried(f, n, acc) {
  return function(x) {
    var combined = Array(acc.length + 1);
    for (var i = 0; i < acc.length; i++) {
      combined[i] = acc[i];
    }
    combined[acc.length] = x;
    return n === 0 ? f.apply(null, combined) : curried(f, n - 1, combined);
  };
}
var tupleConstructors = {
  1: function(a) {
    return [a];
  },
  2: function(a) {
    return function(b) {
      return [a, b];
    };
  },
  3: function(a) {
    return function(b) {
      return function(c) {
        return [a, b, c];
      };
    };
  },
  4: function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return [a, b, c, d];
        };
      };
    };
  },
  5: function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return [a, b, c, d, e];
          };
        };
      };
    };
  }
};
function getTupleConstructor(len) {
  if (!has.call(tupleConstructors, len)) {
    tupleConstructors[len] = curried(tuple, len - 1, []);
  }
  return tupleConstructors[len];
}
function sequenceT(F) {
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var len = args.length;
    var f = getTupleConstructor(len);
    var fas = F.map(args[0], f);
    for (var i = 1; i < len; i++) {
      fas = F.ap(fas, args[i]);
    }
    return fas;
  };
}
function getRecordConstructor(keys5) {
  var len = keys5.length;
  switch (len) {
    case 1:
      return function(a) {
        var _a;
        return _a = {}, _a[keys5[0]] = a, _a;
      };
    case 2:
      return function(a) {
        return function(b) {
          var _a;
          return _a = {}, _a[keys5[0]] = a, _a[keys5[1]] = b, _a;
        };
      };
    case 3:
      return function(a) {
        return function(b) {
          return function(c) {
            var _a;
            return _a = {}, _a[keys5[0]] = a, _a[keys5[1]] = b, _a[keys5[2]] = c, _a;
          };
        };
      };
    case 4:
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              var _a;
              return _a = {}, _a[keys5[0]] = a, _a[keys5[1]] = b, _a[keys5[2]] = c, _a[keys5[3]] = d, _a;
            };
          };
        };
      };
    case 5:
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                var _a;
                return _a = {}, _a[keys5[0]] = a, _a[keys5[1]] = b, _a[keys5[2]] = c, _a[keys5[3]] = d, _a[keys5[4]] = e, _a;
              };
            };
          };
        };
      };
    default:
      return curried(function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var r = {};
        for (var i = 0; i < len; i++) {
          r[keys5[i]] = args[i];
        }
        return r;
      }, len - 1, []);
  }
}
function sequenceS(F) {
  return function(r) {
    var keys5 = Object.keys(r);
    var len = keys5.length;
    var f = getRecordConstructor(keys5);
    var fr = F.map(r[keys5[0]], f);
    for (var i = 1; i < len; i++) {
      fr = F.ap(fr, r[keys5[i]]);
    }
    return fr;
  };
}

// node_modules/fp-ts/es6/Alternative.js
function altAll2(F) {
  return altAll(F)(F.zero());
}
function getAlternativeMonoid(F) {
  var f = getApplySemigroup(F);
  return function(S) {
    var SF = f(S);
    return {
      concat: function(first3, second2) {
        return F.alt(SF.concat(first3, second2), function() {
          return F.alt(first3, function() {
            return second2;
          });
        });
      },
      empty: F.zero()
    };
  };
}

// node_modules/fp-ts/es6/Applicative.js
var Applicative_exports = {};
__export(Applicative_exports, {
  getApplicativeComposition: () => getApplicativeComposition,
  getApplicativeMonoid: () => getApplicativeMonoid
});

// node_modules/fp-ts/es6/Functor.js
var Functor_exports = {};
__export(Functor_exports, {
  as: () => as,
  asUnit: () => asUnit,
  bindTo: () => bindTo,
  flap: () => flap,
  getFunctorComposition: () => getFunctorComposition,
  let: () => let_,
  map: () => map
});
function map(F, G) {
  return function(f) {
    return function(fa) {
      return F.map(fa, function(ga) {
        return G.map(ga, f);
      });
    };
  };
}
function flap(F) {
  return function(a) {
    return function(fab) {
      return F.map(fab, function(f) {
        return f(a);
      });
    };
  };
}
function bindTo(F) {
  return function(name) {
    return function(fa) {
      return F.map(fa, function(a) {
        var _a;
        return _a = {}, _a[name] = a, _a;
      });
    };
  };
}
function let_(F) {
  return function(name, f) {
    return function(fa) {
      return F.map(fa, function(a) {
        var _a;
        return Object.assign({}, a, (_a = {}, _a[name] = f(a), _a));
      });
    };
  };
}
function getFunctorComposition(F, G) {
  var _map35 = map(F, G);
  return {
    map: function(fga, f) {
      return pipe(fga, _map35(f));
    }
  };
}
function as(F) {
  return function(self, b) {
    return F.map(self, function() {
      return b;
    });
  };
}
function asUnit(F) {
  var asM = as(F);
  return function(self) {
    return asM(self, void 0);
  };
}

// node_modules/fp-ts/es6/Applicative.js
function getApplicativeMonoid(F) {
  var f = getApplySemigroup(F);
  return function(M) {
    return {
      concat: f(M).concat,
      empty: F.of(M.empty)
    };
  };
}
function getApplicativeComposition(F, G) {
  var map44 = getFunctorComposition(F, G).map;
  var _ap18 = ap(F, G);
  return {
    map: map44,
    of: function(a) {
      return F.of(G.of(a));
    },
    ap: function(fgab, fga) {
      return pipe(fgab, _ap18(fga));
    }
  };
}

// node_modules/fp-ts/es6/Array.js
var Array_exports = {};
__export(Array_exports, {
  Alt: () => Alt4,
  Alternative: () => Alternative2,
  Applicative: () => Applicative4,
  Apply: () => Apply4,
  Chain: () => Chain4,
  ChainRecBreadthFirst: () => ChainRecBreadthFirst2,
  ChainRecDepthFirst: () => ChainRecDepthFirst2,
  Compactable: () => Compactable2,
  Do: () => Do4,
  Extend: () => Extend2,
  Filterable: () => Filterable2,
  FilterableWithIndex: () => FilterableWithIndex2,
  Foldable: () => Foldable4,
  FoldableWithIndex: () => FoldableWithIndex4,
  FromEither: () => FromEither2,
  Functor: () => Functor5,
  FunctorWithIndex: () => FunctorWithIndex4,
  Monad: () => Monad4,
  Pointed: () => Pointed4,
  Traversable: () => Traversable4,
  TraversableWithIndex: () => TraversableWithIndex4,
  URI: () => URI7,
  Unfoldable: () => Unfoldable2,
  Witherable: () => Witherable2,
  Zero: () => Zero2,
  alt: () => alt4,
  altW: () => altW4,
  ap: () => ap5,
  apFirst: () => apFirst5,
  apS: () => apS5,
  apSecond: () => apSecond5,
  append: () => append4,
  appendW: () => appendW4,
  array: () => array,
  bind: () => bind5,
  bindTo: () => bindTo5,
  chain: () => chain4,
  chainFirst: () => chainFirst5,
  chainRecBreadthFirst: () => chainRecBreadthFirst2,
  chainRecDepthFirst: () => chainRecDepthFirst2,
  chainWithIndex: () => chainWithIndex4,
  chop: () => chop4,
  chunksOf: () => chunksOf4,
  compact: () => compact2,
  comprehension: () => comprehension2,
  concat: () => concat4,
  concatW: () => concatW4,
  cons: () => cons4,
  copy: () => copy2,
  deleteAt: () => deleteAt2,
  difference: () => difference2,
  dropLeft: () => dropLeft2,
  dropLeftWhile: () => dropLeftWhile2,
  dropRight: () => dropRight2,
  duplicate: () => duplicate4,
  elem: () => elem2,
  empty: () => empty4,
  every: () => every2,
  exists: () => exists2,
  extend: () => extend4,
  filter: () => filter4,
  filterE: () => filterE3,
  filterMap: () => filterMap2,
  filterMapWithIndex: () => filterMapWithIndex2,
  filterWithIndex: () => filterWithIndex4,
  findFirst: () => findFirst2,
  findFirstMap: () => findFirstMap2,
  findIndex: () => findIndex2,
  findLast: () => findLast2,
  findLastIndex: () => findLastIndex2,
  findLastMap: () => findLastMap2,
  flap: () => flap6,
  flatMap: () => flatMap4,
  flatten: () => flatten4,
  foldLeft: () => foldLeft2,
  foldMap: () => foldMap4,
  foldMapWithIndex: () => foldMapWithIndex4,
  foldRight: () => foldRight2,
  fromEither: () => fromEither2,
  fromEitherK: () => fromEitherK3,
  fromOption: () => fromOption3,
  fromOptionK: () => fromOptionK3,
  fromPredicate: () => fromPredicate3,
  getDifferenceMagma: () => getDifferenceMagma2,
  getEq: () => getEq4,
  getIntersectionSemigroup: () => getIntersectionSemigroup2,
  getMonoid: () => getMonoid5,
  getOrd: () => getOrd2,
  getSemigroup: () => getSemigroup7,
  getShow: () => getShow4,
  getUnionMonoid: () => getUnionMonoid2,
  getUnionSemigroup: () => getUnionSemigroup4,
  guard: () => guard3,
  head: () => head5,
  init: () => init4,
  insertAt: () => insertAt4,
  intercalate: () => intercalate5,
  intersection: () => intersection2,
  intersperse: () => intersperse4,
  isEmpty: () => isEmpty2,
  isNonEmpty: () => isNonEmpty5,
  isOutOfBound: () => isOutOfBound4,
  last: () => last5,
  lefts: () => lefts2,
  let: () => let_5,
  lookup: () => lookup2,
  makeBy: () => makeBy4,
  map: () => map6,
  mapWithIndex: () => mapWithIndex4,
  match: () => match2,
  matchLeft: () => matchLeft4,
  matchLeftW: () => matchLeftW2,
  matchRight: () => matchRight4,
  matchRightW: () => matchRightW2,
  matchW: () => matchW2,
  modifyAt: () => modifyAt4,
  of: () => of4,
  partition: () => partition2,
  partitionMap: () => partitionMap2,
  partitionMapWithIndex: () => partitionMapWithIndex2,
  partitionWithIndex: () => partitionWithIndex2,
  prepend: () => prepend4,
  prependAll: () => prependAll4,
  prependToAll: () => prependToAll4,
  prependW: () => prependW4,
  range: () => range4,
  reduce: () => reduce4,
  reduceRight: () => reduceRight4,
  reduceRightWithIndex: () => reduceRightWithIndex4,
  reduceWithIndex: () => reduceWithIndex4,
  replicate: () => replicate4,
  reverse: () => reverse7,
  rights: () => rights2,
  rotate: () => rotate4,
  scanLeft: () => scanLeft2,
  scanRight: () => scanRight2,
  separate: () => separate2,
  sequence: () => sequence4,
  size: () => size2,
  snoc: () => snoc4,
  some: () => some3,
  sort: () => sort4,
  sortBy: () => sortBy4,
  spanLeft: () => spanLeft2,
  splitAt: () => splitAt4,
  tail: () => tail5,
  takeLeft: () => takeLeft2,
  takeLeftWhile: () => takeLeftWhile2,
  takeRight: () => takeRight2,
  traverse: () => traverse4,
  traverseWithIndex: () => traverseWithIndex4,
  unfold: () => unfold2,
  union: () => union4,
  uniq: () => uniq4,
  unsafeDeleteAt: () => unsafeDeleteAt2,
  unsafeInsertAt: () => unsafeInsertAt4,
  unsafeUpdateAt: () => unsafeUpdateAt4,
  unzip: () => unzip4,
  updateAt: () => updateAt4,
  wilt: () => wilt2,
  wither: () => wither2,
  zero: () => zero2,
  zip: () => zip4,
  zipWith: () => zipWith4
});

// node_modules/fp-ts/es6/Chain.js
var Chain_exports = {};
__export(Chain_exports, {
  bind: () => bind,
  chainFirst: () => chainFirst,
  tap: () => tap
});
function chainFirst(M) {
  var tapM = tap(M);
  return function(f) {
    return function(first3) {
      return tapM(first3, f);
    };
  };
}
function tap(M) {
  return function(first3, f) {
    return M.chain(first3, function(a) {
      return M.map(f(a), function() {
        return a;
      });
    });
  };
}
function bind(M) {
  return function(name, f) {
    return function(ma) {
      return M.chain(ma, function(a) {
        return M.map(f(a), function(b) {
          var _a;
          return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
        });
      });
    };
  };
}

// node_modules/fp-ts/es6/FromEither.js
var FromEither_exports = {};
__export(FromEither_exports, {
  chainEitherK: () => chainEitherK,
  chainFirstEitherK: () => chainFirstEitherK,
  chainOptionK: () => chainOptionK,
  filterOrElse: () => filterOrElse,
  fromEitherK: () => fromEitherK,
  fromOption: () => fromOption,
  fromOptionK: () => fromOptionK,
  fromPredicate: () => fromPredicate,
  tapEither: () => tapEither
});
function fromOption(F) {
  return function(onNone) {
    return function(ma) {
      return F.fromEither(isNone(ma) ? left(onNone()) : right(ma.value));
    };
  };
}
function fromPredicate(F) {
  return function(predicate, onFalse) {
    return function(a) {
      return F.fromEither(predicate(a) ? right(a) : left(onFalse(a)));
    };
  };
}
function fromOptionK(F) {
  var fromOptionF = fromOption(F);
  return function(onNone) {
    var from = fromOptionF(onNone);
    return function(f) {
      return flow(f, from);
    };
  };
}
function chainOptionK(F, M) {
  var fromOptionKF = fromOptionK(F);
  return function(onNone) {
    var from = fromOptionKF(onNone);
    return function(f) {
      return function(ma) {
        return M.chain(ma, from(f));
      };
    };
  };
}
function fromEitherK(F) {
  return function(f) {
    return flow(f, F.fromEither);
  };
}
function chainEitherK(F, M) {
  var fromEitherKF = fromEitherK(F);
  return function(f) {
    return function(ma) {
      return M.chain(ma, fromEitherKF(f));
    };
  };
}
function chainFirstEitherK(F, M) {
  var tapEitherM = tapEither(F, M);
  return function(f) {
    return function(ma) {
      return tapEitherM(ma, f);
    };
  };
}
function filterOrElse(F, M) {
  return function(predicate, onFalse) {
    return function(ma) {
      return M.chain(ma, function(a) {
        return F.fromEither(predicate(a) ? right(a) : left(onFalse(a)));
      });
    };
  };
}
function tapEither(F, M) {
  var fromEither13 = fromEitherK(F);
  var tapM = tap(M);
  return function(self, f) {
    return tapM(self, fromEither13(f));
  };
}

// node_modules/fp-ts/es6/NonEmptyArray.js
var NonEmptyArray_exports = {};
__export(NonEmptyArray_exports, {
  Alt: () => Alt2,
  Applicative: () => Applicative2,
  Apply: () => Apply2,
  Chain: () => Chain2,
  Comonad: () => Comonad2,
  Do: () => Do2,
  Foldable: () => Foldable2,
  FoldableWithIndex: () => FoldableWithIndex2,
  Functor: () => Functor2,
  FunctorWithIndex: () => FunctorWithIndex2,
  Monad: () => Monad2,
  Pointed: () => Pointed2,
  Traversable: () => Traversable2,
  TraversableWithIndex: () => TraversableWithIndex2,
  URI: () => URI4,
  alt: () => alt2,
  altW: () => altW2,
  ap: () => ap3,
  apFirst: () => apFirst3,
  apS: () => apS3,
  apSecond: () => apSecond3,
  append: () => append2,
  appendW: () => appendW2,
  bind: () => bind3,
  bindTo: () => bindTo3,
  chain: () => chain2,
  chainFirst: () => chainFirst3,
  chainWithIndex: () => chainWithIndex2,
  chop: () => chop2,
  chunksOf: () => chunksOf2,
  concat: () => concat2,
  concatAll: () => concatAll4,
  concatW: () => concatW2,
  cons: () => cons2,
  copy: () => copy,
  duplicate: () => duplicate2,
  extend: () => extend2,
  extract: () => extract2,
  filter: () => filter2,
  filterWithIndex: () => filterWithIndex2,
  flap: () => flap3,
  flatMap: () => flatMap2,
  flatten: () => flatten2,
  fold: () => fold3,
  foldMap: () => foldMap2,
  foldMapWithIndex: () => foldMapWithIndex2,
  fromArray: () => fromArray2,
  fromReadonlyNonEmptyArray: () => fromReadonlyNonEmptyArray2,
  getEq: () => getEq2,
  getSemigroup: () => getSemigroup5,
  getShow: () => getShow2,
  getUnionSemigroup: () => getUnionSemigroup2,
  group: () => group2,
  groupBy: () => groupBy2,
  groupSort: () => groupSort2,
  head: () => head3,
  init: () => init2,
  insertAt: () => insertAt2,
  intercalate: () => intercalate3,
  intersperse: () => intersperse2,
  isNonEmpty: () => isNonEmpty3,
  isOutOfBound: () => isOutOfBound2,
  last: () => last3,
  let: () => let_3,
  makeBy: () => makeBy2,
  map: () => map3,
  mapWithIndex: () => mapWithIndex2,
  matchLeft: () => matchLeft2,
  matchRight: () => matchRight2,
  max: () => max4,
  min: () => min4,
  modifyAt: () => modifyAt2,
  modifyHead: () => modifyHead2,
  modifyLast: () => modifyLast2,
  nonEmptyArray: () => nonEmptyArray,
  of: () => of2,
  prepend: () => prepend2,
  prependAll: () => prependAll2,
  prependToAll: () => prependToAll2,
  prependW: () => prependW2,
  range: () => range2,
  reduce: () => reduce2,
  reduceRight: () => reduceRight2,
  reduceRightWithIndex: () => reduceRightWithIndex2,
  reduceWithIndex: () => reduceWithIndex2,
  replicate: () => replicate2,
  reverse: () => reverse5,
  rotate: () => rotate2,
  sequence: () => sequence2,
  snoc: () => snoc2,
  sort: () => sort2,
  sortBy: () => sortBy2,
  splitAt: () => splitAt2,
  tail: () => tail3,
  traverse: () => traverse2,
  traverseWithIndex: () => traverseWithIndex2,
  unappend: () => unappend2,
  uncons: () => uncons2,
  union: () => union2,
  uniq: () => uniq2,
  unprepend: () => unprepend2,
  unsafeInsertAt: () => unsafeInsertAt2,
  unsafeUpdateAt: () => unsafeUpdateAt2,
  unsnoc: () => unsnoc2,
  unzip: () => unzip2,
  updateAt: () => updateAt2,
  updateHead: () => updateHead2,
  updateLast: () => updateLast2,
  zip: () => zip2,
  zipWith: () => zipWith2
});

// node_modules/fp-ts/es6/Ord.js
var Ord_exports = {};
__export(Ord_exports, {
  Contravariant: () => Contravariant2,
  URI: () => URI2,
  between: () => between,
  clamp: () => clamp,
  contramap: () => contramap2,
  equals: () => equals,
  equalsDefault: () => equalsDefault,
  fromCompare: () => fromCompare,
  geq: () => geq,
  getDualOrd: () => getDualOrd,
  getMonoid: () => getMonoid3,
  getSemigroup: () => getSemigroup3,
  getTupleOrd: () => getTupleOrd,
  gt: () => gt,
  leq: () => leq,
  lt: () => lt,
  max: () => max,
  min: () => min,
  ord: () => ord,
  ordBoolean: () => ordBoolean,
  ordDate: () => ordDate,
  ordNumber: () => ordNumber,
  ordString: () => ordString,
  reverse: () => reverse,
  trivial: () => trivial,
  tuple: () => tuple3
});

// node_modules/fp-ts/es6/Eq.js
var Eq_exports = {};
__export(Eq_exports, {
  Contravariant: () => Contravariant,
  URI: () => URI,
  contramap: () => contramap,
  eq: () => eq,
  eqBoolean: () => eqBoolean,
  eqDate: () => eqDate,
  eqNumber: () => eqNumber,
  eqStrict: () => eqStrict,
  eqString: () => eqString,
  fromEquals: () => fromEquals,
  getMonoid: () => getMonoid2,
  getSemigroup: () => getSemigroup2,
  getStructEq: () => getStructEq,
  getTupleEq: () => getTupleEq,
  strictEqual: () => strictEqual,
  struct: () => struct,
  tuple: () => tuple2
});
var fromEquals = function(equals2) {
  return {
    equals: function(x, y) {
      return x === y || equals2(x, y);
    }
  };
};
var struct = function(eqs) {
  return fromEquals(function(first3, second2) {
    for (var key in eqs) {
      if (!eqs[key].equals(first3[key], second2[key])) {
        return false;
      }
    }
    return true;
  });
};
var tuple2 = function() {
  var eqs = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    eqs[_i] = arguments[_i];
  }
  return fromEquals(function(first3, second2) {
    return eqs.every(function(E, i) {
      return E.equals(first3[i], second2[i]);
    });
  });
};
var contramap_ = function(fa, f) {
  return pipe(fa, contramap(f));
};
var contramap = function(f) {
  return function(fa) {
    return fromEquals(function(x, y) {
      return fa.equals(f(x), f(y));
    });
  };
};
var URI = "Eq";
var eqStrict = {
  equals: function(a, b) {
    return a === b;
  }
};
var empty = {
  equals: function() {
    return true;
  }
};
var getSemigroup2 = function() {
  return {
    concat: function(x, y) {
      return fromEquals(function(a, b) {
        return x.equals(a, b) && y.equals(a, b);
      });
    }
  };
};
var getMonoid2 = function() {
  return {
    concat: getSemigroup2().concat,
    empty
  };
};
var Contravariant = {
  URI,
  contramap: contramap_
};
var getTupleEq = tuple2;
var getStructEq = struct;
var strictEqual = eqStrict.equals;
var eq = Contravariant;
var eqBoolean = eqStrict;
var eqString = eqStrict;
var eqNumber = eqStrict;
var eqDate = {
  equals: function(first3, second2) {
    return first3.valueOf() === second2.valueOf();
  }
};

// node_modules/fp-ts/es6/Ord.js
var equalsDefault = function(compare2) {
  return function(first3, second2) {
    return first3 === second2 || compare2(first3, second2) === 0;
  };
};
var fromCompare = function(compare2) {
  return {
    equals: equalsDefault(compare2),
    compare: function(first3, second2) {
      return first3 === second2 ? 0 : compare2(first3, second2);
    }
  };
};
var tuple3 = function() {
  var ords = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    ords[_i] = arguments[_i];
  }
  return fromCompare(function(first3, second2) {
    var i = 0;
    for (; i < ords.length - 1; i++) {
      var r = ords[i].compare(first3[i], second2[i]);
      if (r !== 0) {
        return r;
      }
    }
    return ords[i].compare(first3[i], second2[i]);
  });
};
var reverse = function(O) {
  return fromCompare(function(first3, second2) {
    return O.compare(second2, first3);
  });
};
var contramap_2 = function(fa, f) {
  return pipe(fa, contramap2(f));
};
var contramap2 = function(f) {
  return function(fa) {
    return fromCompare(function(first3, second2) {
      return fa.compare(f(first3), f(second2));
    });
  };
};
var URI2 = "Ord";
var getSemigroup3 = function() {
  return {
    concat: function(first3, second2) {
      return fromCompare(function(a, b) {
        var ox = first3.compare(a, b);
        return ox !== 0 ? ox : second2.compare(a, b);
      });
    }
  };
};
var getMonoid3 = function() {
  return {
    concat: getSemigroup3().concat,
    empty: fromCompare(function() {
      return 0;
    })
  };
};
var Contravariant2 = {
  URI: URI2,
  contramap: contramap_2
};
var trivial = {
  equals: constTrue,
  compare: constant(0)
};
var equals = function(O) {
  return function(second2) {
    return function(first3) {
      return first3 === second2 || O.compare(first3, second2) === 0;
    };
  };
};
var lt = function(O) {
  return function(first3, second2) {
    return O.compare(first3, second2) === -1;
  };
};
var gt = function(O) {
  return function(first3, second2) {
    return O.compare(first3, second2) === 1;
  };
};
var leq = function(O) {
  return function(first3, second2) {
    return O.compare(first3, second2) !== 1;
  };
};
var geq = function(O) {
  return function(first3, second2) {
    return O.compare(first3, second2) !== -1;
  };
};
var min = function(O) {
  return function(first3, second2) {
    return first3 === second2 || O.compare(first3, second2) < 1 ? first3 : second2;
  };
};
var max = function(O) {
  return function(first3, second2) {
    return first3 === second2 || O.compare(first3, second2) > -1 ? first3 : second2;
  };
};
var clamp = function(O) {
  var minO = min(O);
  var maxO = max(O);
  return function(low, hi) {
    return function(a) {
      return maxO(minO(a, hi), low);
    };
  };
};
var between = function(O) {
  var ltO = lt(O);
  var gtO = gt(O);
  return function(low, hi) {
    return function(a) {
      return ltO(a, low) || gtO(a, hi) ? false : true;
    };
  };
};
var getTupleOrd = tuple3;
var getDualOrd = reverse;
var ord = Contravariant2;
function compare(first3, second2) {
  return first3 < second2 ? -1 : first3 > second2 ? 1 : 0;
}
var strictOrd = {
  equals: eqStrict.equals,
  compare
};
var ordBoolean = strictOrd;
var ordString = strictOrd;
var ordNumber = strictOrd;
var ordDate = pipe(
  ordNumber,
  contramap2(function(date) {
    return date.valueOf();
  })
);

// node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js
var ReadonlyNonEmptyArray_exports = {};
__export(ReadonlyNonEmptyArray_exports, {
  Alt: () => Alt,
  Applicative: () => Applicative,
  Apply: () => Apply,
  Chain: () => Chain,
  Comonad: () => Comonad,
  Do: () => Do,
  Foldable: () => Foldable,
  FoldableWithIndex: () => FoldableWithIndex,
  Functor: () => Functor,
  FunctorWithIndex: () => FunctorWithIndex,
  Monad: () => Monad,
  Pointed: () => Pointed,
  Traversable: () => Traversable,
  TraversableWithIndex: () => TraversableWithIndex,
  URI: () => URI3,
  alt: () => alt,
  altW: () => altW,
  ap: () => ap2,
  apFirst: () => apFirst2,
  apS: () => apS2,
  apSecond: () => apSecond2,
  append: () => append,
  appendW: () => appendW,
  bind: () => bind2,
  bindTo: () => bindTo2,
  chain: () => chain,
  chainFirst: () => chainFirst2,
  chainWithIndex: () => chainWithIndex,
  chop: () => chop,
  chunksOf: () => chunksOf,
  concat: () => concat,
  concatAll: () => concatAll3,
  concatW: () => concatW,
  cons: () => cons,
  duplicate: () => duplicate,
  empty: () => empty2,
  extend: () => extend,
  extract: () => extract,
  filter: () => filter,
  filterWithIndex: () => filterWithIndex,
  flap: () => flap2,
  flatMap: () => flatMap,
  flatten: () => flatten,
  fold: () => fold2,
  foldMap: () => foldMap,
  foldMapWithIndex: () => foldMapWithIndex,
  fromArray: () => fromArray,
  fromReadonlyArray: () => fromReadonlyArray,
  getEq: () => getEq,
  getSemigroup: () => getSemigroup4,
  getShow: () => getShow,
  getUnionSemigroup: () => getUnionSemigroup,
  group: () => group,
  groupBy: () => groupBy,
  groupSort: () => groupSort,
  head: () => head2,
  init: () => init,
  insertAt: () => insertAt,
  intercalate: () => intercalate2,
  intersperse: () => intersperse,
  isNonEmpty: () => isNonEmpty2,
  isOutOfBound: () => isOutOfBound,
  last: () => last2,
  let: () => let_2,
  makeBy: () => makeBy,
  map: () => map2,
  mapWithIndex: () => mapWithIndex,
  matchLeft: () => matchLeft,
  matchRight: () => matchRight,
  max: () => max3,
  min: () => min3,
  modifyAt: () => modifyAt,
  modifyHead: () => modifyHead,
  modifyLast: () => modifyLast,
  of: () => of,
  prepend: () => prepend,
  prependAll: () => prependAll,
  prependToAll: () => prependToAll,
  prependW: () => prependW,
  range: () => range,
  readonlyNonEmptyArray: () => readonlyNonEmptyArray,
  reduce: () => reduce,
  reduceRight: () => reduceRight,
  reduceRightWithIndex: () => reduceRightWithIndex,
  reduceWithIndex: () => reduceWithIndex,
  replicate: () => replicate,
  reverse: () => reverse4,
  rotate: () => rotate,
  sequence: () => sequence,
  snoc: () => snoc,
  sort: () => sort,
  sortBy: () => sortBy,
  splitAt: () => splitAt,
  tail: () => tail2,
  traverse: () => traverse,
  traverseWithIndex: () => traverseWithIndex,
  unappend: () => unappend,
  uncons: () => uncons,
  union: () => union,
  uniq: () => uniq,
  unprepend: () => unprepend,
  unsafeInsertAt: () => unsafeInsertAt,
  unsafeUpdateAt: () => unsafeUpdateAt,
  unsnoc: () => unsnoc,
  unzip: () => unzip,
  updateAt: () => updateAt,
  updateHead: () => updateHead,
  updateLast: () => updateLast,
  zip: () => zip,
  zipWith: () => zipWith
});

// node_modules/fp-ts/es6/Semigroup.js
var Semigroup_exports = {};
__export(Semigroup_exports, {
  concatAll: () => concatAll2,
  constant: () => constant2,
  first: () => first,
  fold: () => fold,
  getDualSemigroup: () => getDualSemigroup,
  getFirstSemigroup: () => getFirstSemigroup,
  getFunctionSemigroup: () => getFunctionSemigroup,
  getIntercalateSemigroup: () => getIntercalateSemigroup,
  getJoinSemigroup: () => getJoinSemigroup,
  getLastSemigroup: () => getLastSemigroup,
  getMeetSemigroup: () => getMeetSemigroup,
  getObjectSemigroup: () => getObjectSemigroup,
  getStructSemigroup: () => getStructSemigroup,
  getTupleSemigroup: () => getTupleSemigroup,
  intercalate: () => intercalate,
  last: () => last,
  max: () => max2,
  min: () => min2,
  reverse: () => reverse3,
  semigroupAll: () => semigroupAll,
  semigroupAny: () => semigroupAny,
  semigroupProduct: () => semigroupProduct,
  semigroupString: () => semigroupString,
  semigroupSum: () => semigroupSum,
  semigroupVoid: () => semigroupVoid,
  struct: () => struct2,
  tuple: () => tuple4
});

// node_modules/fp-ts/es6/Magma.js
var Magma_exports = {};
__export(Magma_exports, {
  concatAll: () => concatAll,
  endo: () => endo,
  filterFirst: () => filterFirst,
  filterSecond: () => filterSecond,
  reverse: () => reverse2
});
var reverse2 = function(M) {
  return {
    concat: function(first3, second2) {
      return M.concat(second2, first3);
    }
  };
};
var filterFirst = function(predicate) {
  return function(M) {
    return {
      concat: function(first3, second2) {
        return predicate(first3) ? M.concat(first3, second2) : second2;
      }
    };
  };
};
var filterSecond = function(predicate) {
  return function(M) {
    return {
      concat: function(first3, second2) {
        return predicate(second2) ? M.concat(first3, second2) : first3;
      }
    };
  };
};
var endo = function(f) {
  return function(M) {
    return {
      concat: function(first3, second2) {
        return M.concat(f(first3), f(second2));
      }
    };
  };
};
var concatAll = function(M) {
  return function(startWith) {
    return function(as15) {
      return as15.reduce(function(a, acc) {
        return M.concat(a, acc);
      }, startWith);
    };
  };
};

// node_modules/fp-ts/es6/Semigroup.js
var min2 = function(O) {
  return {
    concat: min(O)
  };
};
var max2 = function(O) {
  return {
    concat: max(O)
  };
};
var constant2 = function(a) {
  return {
    concat: function() {
      return a;
    }
  };
};
var reverse3 = reverse2;
var struct2 = function(semigroups) {
  return {
    concat: function(first3, second2) {
      var r = {};
      for (var k in semigroups) {
        if (has.call(semigroups, k)) {
          r[k] = semigroups[k].concat(first3[k], second2[k]);
        }
      }
      return r;
    }
  };
};
var tuple4 = function() {
  var semigroups = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    semigroups[_i] = arguments[_i];
  }
  return {
    concat: function(first3, second2) {
      return semigroups.map(function(s, i) {
        return s.concat(first3[i], second2[i]);
      });
    }
  };
};
var intercalate = function(middle) {
  return function(S) {
    return {
      concat: function(x, y) {
        return S.concat(x, S.concat(middle, y));
      }
    };
  };
};
var first = function() {
  return { concat: identity };
};
var last = function() {
  return { concat: function(_, y) {
    return y;
  } };
};
var concatAll2 = concatAll;
var semigroupVoid = constant2(void 0);
var getObjectSemigroup = function() {
  return {
    concat: function(first3, second2) {
      return Object.assign({}, first3, second2);
    }
  };
};
var getLastSemigroup = last;
var getFirstSemigroup = first;
var getTupleSemigroup = tuple4;
var getStructSemigroup = struct2;
var getDualSemigroup = reverse3;
var getJoinSemigroup = max2;
var getMeetSemigroup = min2;
var getIntercalateSemigroup = intercalate;
function fold(S) {
  var concatAllS = concatAll2(S);
  return function(startWith, as15) {
    return as15 === void 0 ? concatAllS(startWith) : concatAllS(startWith)(as15);
  };
}
var semigroupAll = {
  concat: function(x, y) {
    return x && y;
  }
};
var semigroupAny = {
  concat: function(x, y) {
    return x || y;
  }
};
var getFunctionSemigroup = getSemigroup;
var semigroupString = {
  concat: function(x, y) {
    return x + y;
  }
};
var semigroupSum = {
  concat: function(x, y) {
    return x + y;
  }
};
var semigroupProduct = {
  concat: function(x, y) {
    return x * y;
  }
};

// node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var empty2 = emptyReadonlyArray;
var isNonEmpty2 = isNonEmpty;
var isOutOfBound = function(i, as15) {
  return i < 0 || i >= as15.length;
};
var prependW = function(head6) {
  return function(tail6) {
    return __spreadArray3([head6], tail6, true);
  };
};
var prepend = prependW;
var appendW = function(end) {
  return function(init5) {
    return __spreadArray3(__spreadArray3([], init5, true), [end], false);
  };
};
var append = appendW;
var unsafeInsertAt = function(i, a, as15) {
  if (isNonEmpty2(as15)) {
    var xs = fromReadonlyNonEmptyArray(as15);
    xs.splice(i, 0, a);
    return xs;
  }
  return [a];
};
var unsafeUpdateAt = function(i, a, as15) {
  if (as15[i] === a) {
    return as15;
  } else {
    var xs = fromReadonlyNonEmptyArray(as15);
    xs[i] = a;
    return xs;
  }
};
var uniq = function(E) {
  return function(as15) {
    if (as15.length === 1) {
      return as15;
    }
    var out = [head2(as15)];
    var rest = tail2(as15);
    var _loop_1 = function(a2) {
      if (out.every(function(o) {
        return !E.equals(o, a2);
      })) {
        out.push(a2);
      }
    };
    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
      var a = rest_1[_i];
      _loop_1(a);
    }
    return out;
  };
};
var sortBy = function(ords) {
  if (isNonEmpty2(ords)) {
    var M = getMonoid3();
    return sort(ords.reduce(M.concat, M.empty));
  }
  return identity;
};
var union = function(E) {
  var uniqE = uniq(E);
  return function(second2) {
    return function(first3) {
      return uniqE(pipe(first3, concat(second2)));
    };
  };
};
var rotate = function(n) {
  return function(as15) {
    var len = as15.length;
    var m = Math.round(n) % len;
    if (isOutOfBound(Math.abs(m), as15) || m === 0) {
      return as15;
    }
    if (m < 0) {
      var _a = splitAt(-m)(as15), f = _a[0], s = _a[1];
      return pipe(s, concat(f));
    } else {
      return rotate(m - len)(as15);
    }
  };
};
var fromReadonlyArray = function(as15) {
  return isNonEmpty2(as15) ? some(as15) : none;
};
var makeBy = function(f) {
  return function(n) {
    var j = Math.max(0, Math.floor(n));
    var out = [f(0)];
    for (var i = 1; i < j; i++) {
      out.push(f(i));
    }
    return out;
  };
};
var replicate = function(a) {
  return makeBy(function() {
    return a;
  });
};
var range = function(start, end) {
  return start <= end ? makeBy(function(i) {
    return start + i;
  })(end - start + 1) : [start];
};
var unprepend = function(as15) {
  return [head2(as15), tail2(as15)];
};
var unappend = function(as15) {
  return [init(as15), last2(as15)];
};
var fromArray = function(as15) {
  return fromReadonlyArray(as15.slice());
};
function concatW(second2) {
  return function(first3) {
    return first3.concat(second2);
  };
}
function concat(x, y) {
  return y ? x.concat(y) : function(y2) {
    return y2.concat(x);
  };
}
var reverse4 = function(as15) {
  return as15.length === 1 ? as15 : __spreadArray3([last2(as15)], as15.slice(0, -1).reverse(), true);
};
function group(E) {
  return function(as15) {
    var len = as15.length;
    if (len === 0) {
      return empty2;
    }
    var out = [];
    var head6 = as15[0];
    var nea = [head6];
    for (var i = 1; i < len; i++) {
      var a = as15[i];
      if (E.equals(a, head6)) {
        nea.push(a);
      } else {
        out.push(nea);
        head6 = a;
        nea = [head6];
      }
    }
    out.push(nea);
    return out;
  };
}
var groupBy = function(f) {
  return function(as15) {
    var out = {};
    for (var _i = 0, as_1 = as15; _i < as_1.length; _i++) {
      var a = as_1[_i];
      var k = f(a);
      if (has.call(out, k)) {
        out[k].push(a);
      } else {
        out[k] = [a];
      }
    }
    return out;
  };
};
var sort = function(O) {
  return function(as15) {
    return as15.length === 1 ? as15 : as15.slice().sort(O.compare);
  };
};
var updateAt = function(i, a) {
  return modifyAt(i, function() {
    return a;
  });
};
var modifyAt = function(i, f) {
  return function(as15) {
    return isOutOfBound(i, as15) ? none : some(unsafeUpdateAt(i, f(as15[i]), as15));
  };
};
var zipWith = function(as15, bs, f) {
  var cs = [f(as15[0], bs[0])];
  var len = Math.min(as15.length, bs.length);
  for (var i = 1; i < len; i++) {
    cs[i] = f(as15[i], bs[i]);
  }
  return cs;
};
function zip(as15, bs) {
  if (bs === void 0) {
    return function(bs2) {
      return zip(bs2, as15);
    };
  }
  return zipWith(as15, bs, function(a, b) {
    return [a, b];
  });
}
var unzip = function(abs) {
  var fa = [abs[0][0]];
  var fb = [abs[0][1]];
  for (var i = 1; i < abs.length; i++) {
    fa[i] = abs[i][0];
    fb[i] = abs[i][1];
  }
  return [fa, fb];
};
var prependAll = function(middle) {
  return function(as15) {
    var out = [middle, as15[0]];
    for (var i = 1; i < as15.length; i++) {
      out.push(middle, as15[i]);
    }
    return out;
  };
};
var intersperse = function(middle) {
  return function(as15) {
    var rest = tail2(as15);
    return isNonEmpty2(rest) ? pipe(rest, prependAll(middle), prepend(head2(as15))) : as15;
  };
};
var chainWithIndex = function(f) {
  return function(as15) {
    var out = fromReadonlyNonEmptyArray(f(0, head2(as15)));
    for (var i = 1; i < as15.length; i++) {
      var bs = f(i, as15[i]);
      for (var j = 0; j < bs.length; j++) {
        out.push(bs[j]);
      }
    }
    return out;
  };
};
var chop = function(f) {
  return function(as15) {
    var _a = f(as15), b = _a[0], rest = _a[1];
    var out = [b];
    var next = rest;
    while (isNonEmpty2(next)) {
      var _b = f(next), b_1 = _b[0], rest_2 = _b[1];
      out.push(b_1);
      next = rest_2;
    }
    return out;
  };
};
var splitAt = function(n) {
  return function(as15) {
    var m = Math.max(1, n);
    return m >= as15.length ? [as15, empty2] : [pipe(as15.slice(1, m), prepend(head2(as15))), as15.slice(m)];
  };
};
var chunksOf = function(n) {
  return chop(splitAt(n));
};
var _map = function(fa, f) {
  return pipe(fa, map2(f));
};
var _mapWithIndex = function(fa, f) {
  return pipe(fa, mapWithIndex(f));
};
var _ap = function(fab, fa) {
  return pipe(fab, ap2(fa));
};
var _extend = function(wa, f) {
  return pipe(wa, extend(f));
};
var _reduce = function(fa, b, f) {
  return pipe(fa, reduce(b, f));
};
var _foldMap = function(M) {
  var foldMapM = foldMap(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight = function(fa, b, f) {
  return pipe(fa, reduceRight(b, f));
};
var _traverse = function(F) {
  var traverseF = traverse(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _alt = function(fa, that) {
  return pipe(fa, alt(that));
};
var _reduceWithIndex = function(fa, b, f) {
  return pipe(fa, reduceWithIndex(b, f));
};
var _foldMapWithIndex = function(M) {
  var foldMapWithIndexM = foldMapWithIndex(M);
  return function(fa, f) {
    return pipe(fa, foldMapWithIndexM(f));
  };
};
var _reduceRightWithIndex = function(fa, b, f) {
  return pipe(fa, reduceRightWithIndex(b, f));
};
var _traverseWithIndex = function(F) {
  var traverseWithIndexF = traverseWithIndex(F);
  return function(ta, f) {
    return pipe(ta, traverseWithIndexF(f));
  };
};
var of = singleton;
var altW = function(that) {
  return function(as15) {
    return pipe(as15, concatW(that()));
  };
};
var alt = altW;
var ap2 = function(as15) {
  return flatMap(function(f) {
    return pipe(as15, map2(f));
  });
};
var flatMap = dual(2, function(ma, f) {
  return pipe(ma, chainWithIndex(function(i, a) {
    return f(a, i);
  }));
});
var extend = function(f) {
  return function(as15) {
    var next = tail2(as15);
    var out = [f(as15)];
    while (isNonEmpty2(next)) {
      out.push(f(next));
      next = tail2(next);
    }
    return out;
  };
};
var duplicate = extend(identity);
var flatten = flatMap(identity);
var map2 = function(f) {
  return mapWithIndex(function(_, a) {
    return f(a);
  });
};
var mapWithIndex = function(f) {
  return function(as15) {
    var out = [f(0, head2(as15))];
    for (var i = 1; i < as15.length; i++) {
      out.push(f(i, as15[i]));
    }
    return out;
  };
};
var reduce = function(b, f) {
  return reduceWithIndex(b, function(_, b2, a) {
    return f(b2, a);
  });
};
var foldMap = function(S) {
  return function(f) {
    return function(as15) {
      return as15.slice(1).reduce(function(s, a) {
        return S.concat(s, f(a));
      }, f(as15[0]));
    };
  };
};
var reduceRight = function(b, f) {
  return reduceRightWithIndex(b, function(_, b2, a) {
    return f(b2, a);
  });
};
var reduceWithIndex = function(b, f) {
  return function(as15) {
    return as15.reduce(function(b2, a, i) {
      return f(i, b2, a);
    }, b);
  };
};
var foldMapWithIndex = function(S) {
  return function(f) {
    return function(as15) {
      return as15.slice(1).reduce(function(s, a, i) {
        return S.concat(s, f(i + 1, a));
      }, f(0, as15[0]));
    };
  };
};
var reduceRightWithIndex = function(b, f) {
  return function(as15) {
    return as15.reduceRight(function(b2, a, i) {
      return f(i, a, b2);
    }, b);
  };
};
var traverse = function(F) {
  var traverseWithIndexF = traverseWithIndex(F);
  return function(f) {
    return traverseWithIndexF(function(_, a) {
      return f(a);
    });
  };
};
var sequence = function(F) {
  return traverseWithIndex(F)(SK);
};
var traverseWithIndex = function(F) {
  return function(f) {
    return function(as15) {
      var out = F.map(f(0, head2(as15)), of);
      for (var i = 1; i < as15.length; i++) {
        out = F.ap(F.map(out, function(bs) {
          return function(b) {
            return pipe(bs, append(b));
          };
        }), f(i, as15[i]));
      }
      return out;
    };
  };
};
var extract = head;
var URI3 = "ReadonlyNonEmptyArray";
var getShow = function(S) {
  return {
    show: function(as15) {
      return "[".concat(as15.map(S.show).join(", "), "]");
    }
  };
};
var getSemigroup4 = function() {
  return {
    concat
  };
};
var getEq = function(E) {
  return fromEquals(function(xs, ys) {
    return xs.length === ys.length && xs.every(function(x, i) {
      return E.equals(x, ys[i]);
    });
  });
};
var getUnionSemigroup = function(E) {
  var unionE = union(E);
  return {
    concat: function(first3, second2) {
      return unionE(second2)(first3);
    }
  };
};
var Functor = {
  URI: URI3,
  map: _map
};
var flap2 = flap(Functor);
var Pointed = {
  URI: URI3,
  of
};
var FunctorWithIndex = {
  URI: URI3,
  map: _map,
  mapWithIndex: _mapWithIndex
};
var Apply = {
  URI: URI3,
  map: _map,
  ap: _ap
};
var apFirst2 = apFirst(Apply);
var apSecond2 = apSecond(Apply);
var Applicative = {
  URI: URI3,
  map: _map,
  ap: _ap,
  of
};
var Chain = {
  URI: URI3,
  map: _map,
  ap: _ap,
  chain: flatMap
};
var chainFirst2 = chainFirst(Chain);
var Monad = {
  URI: URI3,
  map: _map,
  ap: _ap,
  of,
  chain: flatMap
};
var Foldable = {
  URI: URI3,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight
};
var FoldableWithIndex = {
  URI: URI3,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  reduceWithIndex: _reduceWithIndex,
  foldMapWithIndex: _foldMapWithIndex,
  reduceRightWithIndex: _reduceRightWithIndex
};
var Traversable = {
  URI: URI3,
  map: _map,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence
};
var TraversableWithIndex = {
  URI: URI3,
  map: _map,
  mapWithIndex: _mapWithIndex,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence,
  reduceWithIndex: _reduceWithIndex,
  foldMapWithIndex: _foldMapWithIndex,
  reduceRightWithIndex: _reduceRightWithIndex,
  traverseWithIndex: _traverseWithIndex
};
var Alt = {
  URI: URI3,
  map: _map,
  alt: _alt
};
var Comonad = {
  URI: URI3,
  map: _map,
  extend: _extend,
  extract
};
var Do = of(emptyRecord);
var bindTo2 = bindTo(Functor);
var let_2 = let_(Functor);
var bind2 = bind(Chain);
var apS2 = apS(Apply);
var head2 = extract;
var tail2 = tail;
var last2 = function(as15) {
  return as15[as15.length - 1];
};
var init = function(as15) {
  return as15.slice(0, -1);
};
var min3 = function(O) {
  var S = min2(O);
  return function(as15) {
    return as15.reduce(S.concat);
  };
};
var max3 = function(O) {
  var S = max2(O);
  return function(as15) {
    return as15.reduce(S.concat);
  };
};
var concatAll3 = function(S) {
  return function(as15) {
    return as15.reduce(S.concat);
  };
};
var matchLeft = function(f) {
  return function(as15) {
    return f(head2(as15), tail2(as15));
  };
};
var matchRight = function(f) {
  return function(as15) {
    return f(init(as15), last2(as15));
  };
};
var modifyHead = function(f) {
  return function(as15) {
    return __spreadArray3([f(head2(as15))], tail2(as15), true);
  };
};
var updateHead = function(a) {
  return modifyHead(function() {
    return a;
  });
};
var modifyLast = function(f) {
  return function(as15) {
    return pipe(init(as15), append(f(last2(as15))));
  };
};
var updateLast = function(a) {
  return modifyLast(function() {
    return a;
  });
};
var intercalate2 = function(S) {
  var concatAllS = concatAll3(S);
  return function(middle) {
    return flow(intersperse(middle), concatAllS);
  };
};
var chain = flatMap;
function groupSort(O) {
  var sortO = sort(O);
  var groupO = group(O);
  return function(as15) {
    return isNonEmpty2(as15) ? groupO(sortO(as15)) : empty2;
  };
}
function filter(predicate) {
  return filterWithIndex(function(_, a) {
    return predicate(a);
  });
}
var filterWithIndex = function(predicate) {
  return function(as15) {
    return fromReadonlyArray(as15.filter(function(a, i) {
      return predicate(i, a);
    }));
  };
};
var uncons = unprepend;
var unsnoc = unappend;
function cons(head6, tail6) {
  return tail6 === void 0 ? prepend(head6) : pipe(tail6, prepend(head6));
}
var snoc = function(init5, end) {
  return pipe(init5, concat([end]));
};
var insertAt = function(i, a) {
  return function(as15) {
    return i < 0 || i > as15.length ? none : some(unsafeInsertAt(i, a, as15));
  };
};
var prependToAll = prependAll;
var fold2 = concatAll3;
var readonlyNonEmptyArray = {
  URI: URI3,
  of,
  map: _map,
  mapWithIndex: _mapWithIndex,
  ap: _ap,
  chain: flatMap,
  extend: _extend,
  extract,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence,
  reduceWithIndex: _reduceWithIndex,
  foldMapWithIndex: _foldMapWithIndex,
  reduceRightWithIndex: _reduceRightWithIndex,
  traverseWithIndex: _traverseWithIndex,
  alt: _alt
};

// node_modules/fp-ts/es6/NonEmptyArray.js
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNonEmpty3 = function(as15) {
  return as15.length > 0;
};
var isOutOfBound2 = function(i, as15) {
  return i < 0 || i >= as15.length;
};
var prependW2 = function(head6) {
  return function(tail6) {
    return __spreadArray4([head6], tail6, true);
  };
};
var prepend2 = prependW2;
var appendW2 = function(end) {
  return function(init5) {
    return __spreadArray4(__spreadArray4([], init5, true), [end], false);
  };
};
var append2 = appendW2;
var unsafeInsertAt2 = function(i, a, as15) {
  if (isNonEmpty3(as15)) {
    var xs = fromReadonlyNonEmptyArray2(as15);
    xs.splice(i, 0, a);
    return xs;
  }
  return [a];
};
var unsafeUpdateAt2 = function(i, a, as15) {
  var xs = fromReadonlyNonEmptyArray2(as15);
  xs[i] = a;
  return xs;
};
var uniq2 = function(E) {
  return function(as15) {
    if (as15.length === 1) {
      return copy(as15);
    }
    var out = [head3(as15)];
    var rest = tail3(as15);
    var _loop_1 = function(a2) {
      if (out.every(function(o) {
        return !E.equals(o, a2);
      })) {
        out.push(a2);
      }
    };
    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
      var a = rest_1[_i];
      _loop_1(a);
    }
    return out;
  };
};
var sortBy2 = function(ords) {
  if (isNonEmpty3(ords)) {
    var M = getMonoid3();
    return sort2(ords.reduce(M.concat, M.empty));
  }
  return copy;
};
var union2 = function(E) {
  var uniqE = uniq2(E);
  return function(second2) {
    return function(first3) {
      return uniqE(pipe(first3, concat2(second2)));
    };
  };
};
var rotate2 = function(n) {
  return function(as15) {
    var len = as15.length;
    var m = Math.round(n) % len;
    if (isOutOfBound2(Math.abs(m), as15) || m === 0) {
      return copy(as15);
    }
    if (m < 0) {
      var _a = splitAt2(-m)(as15), f = _a[0], s = _a[1];
      return pipe(s, concat2(f));
    } else {
      return rotate2(m - len)(as15);
    }
  };
};
var fromReadonlyNonEmptyArray2 = fromReadonlyNonEmptyArray;
var fromArray2 = function(as15) {
  return isNonEmpty3(as15) ? some(as15) : none;
};
var makeBy2 = function(f) {
  return function(n) {
    var j = Math.max(0, Math.floor(n));
    var out = [f(0)];
    for (var i = 1; i < j; i++) {
      out.push(f(i));
    }
    return out;
  };
};
var replicate2 = function(a) {
  return makeBy2(function() {
    return a;
  });
};
var range2 = function(start, end) {
  return start <= end ? makeBy2(function(i) {
    return start + i;
  })(end - start + 1) : [start];
};
var unprepend2 = function(as15) {
  return [head3(as15), tail3(as15)];
};
var unappend2 = function(as15) {
  return [init2(as15), last3(as15)];
};
function concatW2(second2) {
  return function(first3) {
    return first3.concat(second2);
  };
}
function concat2(x, y) {
  return y ? x.concat(y) : function(y2) {
    return y2.concat(x);
  };
}
var reverse5 = function(as15) {
  return __spreadArray4([last3(as15)], as15.slice(0, -1).reverse(), true);
};
function group2(E) {
  return function(as15) {
    var len = as15.length;
    if (len === 0) {
      return [];
    }
    var out = [];
    var head6 = as15[0];
    var nea = [head6];
    for (var i = 1; i < len; i++) {
      var a = as15[i];
      if (E.equals(a, head6)) {
        nea.push(a);
      } else {
        out.push(nea);
        head6 = a;
        nea = [head6];
      }
    }
    out.push(nea);
    return out;
  };
}
var groupBy2 = function(f) {
  return function(as15) {
    var out = {};
    for (var _i = 0, as_1 = as15; _i < as_1.length; _i++) {
      var a = as_1[_i];
      var k = f(a);
      if (has.call(out, k)) {
        out[k].push(a);
      } else {
        out[k] = [a];
      }
    }
    return out;
  };
};
var sort2 = function(O) {
  return function(as15) {
    return as15.slice().sort(O.compare);
  };
};
var insertAt2 = function(i, a) {
  return function(as15) {
    return i < 0 || i > as15.length ? none : some(unsafeInsertAt2(i, a, as15));
  };
};
var updateAt2 = function(i, a) {
  return modifyAt2(i, function() {
    return a;
  });
};
var modifyAt2 = function(i, f) {
  return function(as15) {
    return isOutOfBound2(i, as15) ? none : some(unsafeUpdateAt2(i, f(as15[i]), as15));
  };
};
var copy = fromReadonlyNonEmptyArray2;
var of2 = function(a) {
  return [a];
};
var zipWith2 = function(as15, bs, f) {
  var cs = [f(as15[0], bs[0])];
  var len = Math.min(as15.length, bs.length);
  for (var i = 1; i < len; i++) {
    cs[i] = f(as15[i], bs[i]);
  }
  return cs;
};
function zip2(as15, bs) {
  if (bs === void 0) {
    return function(bs2) {
      return zip2(bs2, as15);
    };
  }
  return zipWith2(as15, bs, function(a, b) {
    return [a, b];
  });
}
var unzip2 = function(abs) {
  var fa = [abs[0][0]];
  var fb = [abs[0][1]];
  for (var i = 1; i < abs.length; i++) {
    fa[i] = abs[i][0];
    fb[i] = abs[i][1];
  }
  return [fa, fb];
};
var prependAll2 = function(middle) {
  return function(as15) {
    var out = [middle, as15[0]];
    for (var i = 1; i < as15.length; i++) {
      out.push(middle, as15[i]);
    }
    return out;
  };
};
var intersperse2 = function(middle) {
  return function(as15) {
    var rest = tail3(as15);
    return isNonEmpty3(rest) ? pipe(rest, prependAll2(middle), prepend2(head3(as15))) : copy(as15);
  };
};
var foldMapWithIndex2 = foldMapWithIndex;
var foldMap2 = foldMap;
var chainWithIndex2 = function(f) {
  return function(as15) {
    var out = fromReadonlyNonEmptyArray2(f(0, head3(as15)));
    for (var i = 1; i < as15.length; i++) {
      var bs = f(i, as15[i]);
      for (var j = 0; j < bs.length; j++) {
        out.push(bs[j]);
      }
    }
    return out;
  };
};
var chop2 = function(f) {
  return function(as15) {
    var _a = f(as15), b = _a[0], rest = _a[1];
    var out = [b];
    var next = rest;
    while (isNonEmpty3(next)) {
      var _b = f(next), b_1 = _b[0], rest_2 = _b[1];
      out.push(b_1);
      next = rest_2;
    }
    return out;
  };
};
var splitAt2 = function(n) {
  return function(as15) {
    var m = Math.max(1, n);
    return m >= as15.length ? [copy(as15), []] : [pipe(as15.slice(1, m), prepend2(head3(as15))), as15.slice(m)];
  };
};
var chunksOf2 = function(n) {
  return chop2(splitAt2(n));
};
var _map2 = function(fa, f) {
  return pipe(fa, map3(f));
};
var _mapWithIndex2 = function(fa, f) {
  return pipe(fa, mapWithIndex2(f));
};
var _ap2 = function(fab, fa) {
  return pipe(fab, ap3(fa));
};
var _extend2 = function(wa, f) {
  return pipe(wa, extend2(f));
};
var _reduce2 = function(fa, b, f) {
  return pipe(fa, reduce2(b, f));
};
var _foldMap2 = function(M) {
  var foldMapM = foldMap2(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight2 = function(fa, b, f) {
  return pipe(fa, reduceRight2(b, f));
};
var _traverse2 = function(F) {
  var traverseF = traverse2(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _alt2 = function(fa, that) {
  return pipe(fa, alt2(that));
};
var _reduceWithIndex2 = function(fa, b, f) {
  return pipe(fa, reduceWithIndex2(b, f));
};
var _foldMapWithIndex2 = function(M) {
  var foldMapWithIndexM = foldMapWithIndex2(M);
  return function(fa, f) {
    return pipe(fa, foldMapWithIndexM(f));
  };
};
var _reduceRightWithIndex2 = function(fa, b, f) {
  return pipe(fa, reduceRightWithIndex2(b, f));
};
var _traverseWithIndex2 = function(F) {
  var traverseWithIndexF = traverseWithIndex2(F);
  return function(ta, f) {
    return pipe(ta, traverseWithIndexF(f));
  };
};
var altW2 = function(that) {
  return function(as15) {
    return pipe(as15, concatW2(that()));
  };
};
var alt2 = altW2;
var ap3 = function(as15) {
  return flatMap2(function(f) {
    return pipe(as15, map3(f));
  });
};
var flatMap2 = dual(2, function(ma, f) {
  return pipe(ma, chainWithIndex2(function(i, a) {
    return f(a, i);
  }));
});
var extend2 = function(f) {
  return function(as15) {
    var next = tail3(as15);
    var out = [f(as15)];
    while (isNonEmpty3(next)) {
      out.push(f(next));
      next = tail3(next);
    }
    return out;
  };
};
var duplicate2 = extend2(identity);
var flatten2 = flatMap2(identity);
var map3 = function(f) {
  return mapWithIndex2(function(_, a) {
    return f(a);
  });
};
var mapWithIndex2 = function(f) {
  return function(as15) {
    var out = [f(0, head3(as15))];
    for (var i = 1; i < as15.length; i++) {
      out.push(f(i, as15[i]));
    }
    return out;
  };
};
var reduce2 = reduce;
var reduceWithIndex2 = reduceWithIndex;
var reduceRight2 = reduceRight;
var reduceRightWithIndex2 = reduceRightWithIndex;
var traverse2 = function(F) {
  var traverseWithIndexF = traverseWithIndex2(F);
  return function(f) {
    return traverseWithIndexF(function(_, a) {
      return f(a);
    });
  };
};
var sequence2 = function(F) {
  return traverseWithIndex2(F)(function(_, a) {
    return a;
  });
};
var traverseWithIndex2 = function(F) {
  return function(f) {
    return function(as15) {
      var out = F.map(f(0, head3(as15)), of2);
      for (var i = 1; i < as15.length; i++) {
        out = F.ap(F.map(out, function(bs) {
          return function(b) {
            return pipe(bs, append2(b));
          };
        }), f(i, as15[i]));
      }
      return out;
    };
  };
};
var extract2 = head2;
var URI4 = "NonEmptyArray";
var getShow2 = getShow;
var getSemigroup5 = function() {
  return {
    concat: concat2
  };
};
var getEq2 = getEq;
var getUnionSemigroup2 = function(E) {
  var unionE = union2(E);
  return {
    concat: function(first3, second2) {
      return unionE(second2)(first3);
    }
  };
};
var Functor2 = {
  URI: URI4,
  map: _map2
};
var flap3 = flap(Functor2);
var Pointed2 = {
  URI: URI4,
  of: of2
};
var FunctorWithIndex2 = {
  URI: URI4,
  map: _map2,
  mapWithIndex: _mapWithIndex2
};
var Apply2 = {
  URI: URI4,
  map: _map2,
  ap: _ap2
};
var apFirst3 = apFirst(Apply2);
var apSecond3 = apSecond(Apply2);
var Applicative2 = {
  URI: URI4,
  map: _map2,
  ap: _ap2,
  of: of2
};
var Chain2 = {
  URI: URI4,
  map: _map2,
  ap: _ap2,
  chain: flatMap2
};
var chainFirst3 = chainFirst(Chain2);
var Monad2 = {
  URI: URI4,
  map: _map2,
  ap: _ap2,
  of: of2,
  chain: flatMap2
};
var Foldable2 = {
  URI: URI4,
  reduce: _reduce2,
  foldMap: _foldMap2,
  reduceRight: _reduceRight2
};
var FoldableWithIndex2 = {
  URI: URI4,
  reduce: _reduce2,
  foldMap: _foldMap2,
  reduceRight: _reduceRight2,
  reduceWithIndex: _reduceWithIndex2,
  foldMapWithIndex: _foldMapWithIndex2,
  reduceRightWithIndex: _reduceRightWithIndex2
};
var Traversable2 = {
  URI: URI4,
  map: _map2,
  reduce: _reduce2,
  foldMap: _foldMap2,
  reduceRight: _reduceRight2,
  traverse: _traverse2,
  sequence: sequence2
};
var TraversableWithIndex2 = {
  URI: URI4,
  map: _map2,
  mapWithIndex: _mapWithIndex2,
  reduce: _reduce2,
  foldMap: _foldMap2,
  reduceRight: _reduceRight2,
  traverse: _traverse2,
  sequence: sequence2,
  reduceWithIndex: _reduceWithIndex2,
  foldMapWithIndex: _foldMapWithIndex2,
  reduceRightWithIndex: _reduceRightWithIndex2,
  traverseWithIndex: _traverseWithIndex2
};
var Alt2 = {
  URI: URI4,
  map: _map2,
  alt: _alt2
};
var Comonad2 = {
  URI: URI4,
  map: _map2,
  extend: _extend2,
  extract: extract2
};
var Do2 = of2(emptyRecord);
var bindTo3 = bindTo(Functor2);
var let_3 = let_(Functor2);
var bind3 = bind(Chain2);
var apS3 = apS(Apply2);
var head3 = head2;
var tail3 = function(as15) {
  return as15.slice(1);
};
var last3 = last2;
var init2 = function(as15) {
  return as15.slice(0, -1);
};
var min4 = min3;
var max4 = max3;
var concatAll4 = function(S) {
  return function(as15) {
    return as15.reduce(S.concat);
  };
};
var matchLeft2 = function(f) {
  return function(as15) {
    return f(head3(as15), tail3(as15));
  };
};
var matchRight2 = function(f) {
  return function(as15) {
    return f(init2(as15), last3(as15));
  };
};
var modifyHead2 = function(f) {
  return function(as15) {
    return __spreadArray4([f(head3(as15))], tail3(as15), true);
  };
};
var updateHead2 = function(a) {
  return modifyHead2(function() {
    return a;
  });
};
var modifyLast2 = function(f) {
  return function(as15) {
    return pipe(init2(as15), append2(f(last3(as15))));
  };
};
var updateLast2 = function(a) {
  return modifyLast2(function() {
    return a;
  });
};
var intercalate3 = intercalate2;
var chain2 = flatMap2;
function groupSort2(O) {
  var sortO = sort2(O);
  var groupO = group2(O);
  return function(as15) {
    return isNonEmpty3(as15) ? groupO(sortO(as15)) : [];
  };
}
function filter2(predicate) {
  return filterWithIndex2(function(_, a) {
    return predicate(a);
  });
}
var filterWithIndex2 = function(predicate) {
  return function(as15) {
    return fromArray2(as15.filter(function(a, i) {
      return predicate(i, a);
    }));
  };
};
var uncons2 = unprepend2;
var unsnoc2 = unappend2;
function cons2(head6, tail6) {
  return tail6 === void 0 ? prepend2(head6) : pipe(tail6, prepend2(head6));
}
var snoc2 = function(init5, end) {
  return pipe(init5, append2(end));
};
var prependToAll2 = prependAll2;
var fold3 = concatAll3;
var nonEmptyArray = {
  URI: URI4,
  of: of2,
  map: _map2,
  mapWithIndex: _mapWithIndex2,
  ap: _ap2,
  chain: flatMap2,
  extend: _extend2,
  extract: extract2,
  reduce: _reduce2,
  foldMap: _foldMap2,
  reduceRight: _reduceRight2,
  traverse: _traverse2,
  sequence: sequence2,
  reduceWithIndex: _reduceWithIndex2,
  foldMapWithIndex: _foldMapWithIndex2,
  reduceRightWithIndex: _reduceRightWithIndex2,
  traverseWithIndex: _traverseWithIndex2,
  alt: _alt2
};

// node_modules/fp-ts/es6/ReadonlyArray.js
var ReadonlyArray_exports = {};
__export(ReadonlyArray_exports, {
  Alt: () => Alt3,
  Alternative: () => Alternative,
  Applicative: () => Applicative3,
  Apply: () => Apply3,
  Chain: () => Chain3,
  ChainRecBreadthFirst: () => ChainRecBreadthFirst,
  ChainRecDepthFirst: () => ChainRecDepthFirst,
  Compactable: () => Compactable,
  Do: () => Do3,
  Extend: () => Extend,
  Filterable: () => Filterable,
  FilterableWithIndex: () => FilterableWithIndex,
  Foldable: () => Foldable3,
  FoldableWithIndex: () => FoldableWithIndex3,
  FromEither: () => FromEither,
  Functor: () => Functor4,
  FunctorWithIndex: () => FunctorWithIndex3,
  Monad: () => Monad3,
  Pointed: () => Pointed3,
  Traversable: () => Traversable3,
  TraversableWithIndex: () => TraversableWithIndex3,
  URI: () => URI6,
  Unfoldable: () => Unfoldable,
  Witherable: () => Witherable,
  Zero: () => Zero,
  _chainRecBreadthFirst: () => _chainRecBreadthFirst,
  _chainRecDepthFirst: () => _chainRecDepthFirst,
  alt: () => alt3,
  altW: () => altW3,
  ap: () => ap4,
  apFirst: () => apFirst4,
  apS: () => apS4,
  apSecond: () => apSecond4,
  append: () => append3,
  appendW: () => appendW3,
  bind: () => bind4,
  bindTo: () => bindTo4,
  chain: () => chain3,
  chainFirst: () => chainFirst4,
  chainRecBreadthFirst: () => chainRecBreadthFirst,
  chainRecDepthFirst: () => chainRecDepthFirst,
  chainWithIndex: () => chainWithIndex3,
  chop: () => chop3,
  chunksOf: () => chunksOf3,
  compact: () => compact,
  comprehension: () => comprehension,
  concat: () => concat3,
  concatW: () => concatW3,
  cons: () => cons3,
  deleteAt: () => deleteAt,
  difference: () => difference,
  dropLeft: () => dropLeft,
  dropLeftWhile: () => dropLeftWhile,
  dropRight: () => dropRight,
  duplicate: () => duplicate3,
  elem: () => elem,
  empty: () => empty3,
  every: () => every,
  exists: () => exists,
  extend: () => extend3,
  filter: () => filter3,
  filterE: () => filterE2,
  filterMap: () => filterMap,
  filterMapWithIndex: () => filterMapWithIndex,
  filterWithIndex: () => filterWithIndex3,
  findFirst: () => findFirst,
  findFirstMap: () => findFirstMap,
  findIndex: () => findIndex,
  findLast: () => findLast,
  findLastIndex: () => findLastIndex,
  findLastMap: () => findLastMap,
  flap: () => flap5,
  flatMap: () => flatMap3,
  flatten: () => flatten3,
  foldLeft: () => foldLeft,
  foldMap: () => foldMap3,
  foldMapWithIndex: () => foldMapWithIndex3,
  foldRight: () => foldRight,
  fromArray: () => fromArray3,
  fromEither: () => fromEither,
  fromEitherK: () => fromEitherK2,
  fromOption: () => fromOption2,
  fromOptionK: () => fromOptionK2,
  fromPredicate: () => fromPredicate2,
  getDifferenceMagma: () => getDifferenceMagma,
  getEq: () => getEq3,
  getIntersectionSemigroup: () => getIntersectionSemigroup,
  getMonoid: () => getMonoid4,
  getOrd: () => getOrd,
  getSemigroup: () => getSemigroup6,
  getShow: () => getShow3,
  getUnionMonoid: () => getUnionMonoid,
  getUnionSemigroup: () => getUnionSemigroup3,
  guard: () => guard2,
  head: () => head4,
  init: () => init3,
  insertAt: () => insertAt3,
  intercalate: () => intercalate4,
  intersection: () => intersection,
  intersperse: () => intersperse3,
  isEmpty: () => isEmpty,
  isNonEmpty: () => isNonEmpty4,
  isOutOfBound: () => isOutOfBound3,
  last: () => last4,
  lefts: () => lefts,
  let: () => let_4,
  lookup: () => lookup,
  makeBy: () => makeBy3,
  map: () => map5,
  mapWithIndex: () => mapWithIndex3,
  match: () => match,
  matchLeft: () => matchLeft3,
  matchLeftW: () => matchLeftW,
  matchRight: () => matchRight3,
  matchRightW: () => matchRightW,
  matchW: () => matchW,
  modifyAt: () => modifyAt3,
  of: () => of3,
  partition: () => partition,
  partitionMap: () => partitionMap,
  partitionMapWithIndex: () => partitionMapWithIndex,
  partitionWithIndex: () => partitionWithIndex,
  prepend: () => prepend3,
  prependAll: () => prependAll3,
  prependToAll: () => prependToAll3,
  prependW: () => prependW3,
  range: () => range3,
  readonlyArray: () => readonlyArray,
  reduce: () => reduce3,
  reduceRight: () => reduceRight3,
  reduceRightWithIndex: () => reduceRightWithIndex3,
  reduceWithIndex: () => reduceWithIndex3,
  replicate: () => replicate3,
  reverse: () => reverse6,
  rights: () => rights,
  rotate: () => rotate3,
  scanLeft: () => scanLeft,
  scanRight: () => scanRight,
  separate: () => separate,
  sequence: () => sequence3,
  size: () => size,
  snoc: () => snoc3,
  some: () => some2,
  sort: () => sort3,
  sortBy: () => sortBy3,
  spanLeft: () => spanLeft,
  splitAt: () => splitAt3,
  tail: () => tail4,
  takeLeft: () => takeLeft,
  takeLeftWhile: () => takeLeftWhile,
  takeRight: () => takeRight,
  toArray: () => toArray,
  traverse: () => traverse3,
  traverseWithIndex: () => traverseWithIndex3,
  unfold: () => unfold,
  union: () => union3,
  uniq: () => uniq3,
  unsafeDeleteAt: () => unsafeDeleteAt,
  unsafeInsertAt: () => unsafeInsertAt3,
  unsafeUpdateAt: () => unsafeUpdateAt3,
  unzip: () => unzip3,
  updateAt: () => updateAt3,
  wilt: () => wilt,
  wither: () => wither,
  zero: () => zero,
  zip: () => zip3,
  zipWith: () => zipWith3
});

// node_modules/fp-ts/es6/number.js
var number_exports = {};
__export(number_exports, {
  Bounded: () => Bounded,
  Eq: () => Eq,
  Field: () => Field,
  MagmaSub: () => MagmaSub,
  MonoidProduct: () => MonoidProduct,
  MonoidSum: () => MonoidSum,
  Ord: () => Ord,
  SemigroupProduct: () => SemigroupProduct,
  SemigroupSum: () => SemigroupSum,
  Show: () => Show,
  isNumber: () => isNumber
});
var isNumber = function(u) {
  return typeof u === "number";
};
var Eq = {
  equals: function(first3, second2) {
    return first3 === second2;
  }
};
var Ord = {
  equals: Eq.equals,
  compare: function(first3, second2) {
    return first3 < second2 ? -1 : first3 > second2 ? 1 : 0;
  }
};
var Bounded = {
  equals: Eq.equals,
  compare: Ord.compare,
  top: Infinity,
  bottom: -Infinity
};
var Show = {
  show: function(n) {
    return JSON.stringify(n);
  }
};
var MagmaSub = {
  concat: function(first3, second2) {
    return first3 - second2;
  }
};
var SemigroupSum = {
  concat: function(first3, second2) {
    return first3 + second2;
  }
};
var SemigroupProduct = {
  concat: function(first3, second2) {
    return first3 * second2;
  }
};
var MonoidSum = {
  concat: SemigroupSum.concat,
  empty: 0
};
var MonoidProduct = {
  concat: SemigroupProduct.concat,
  empty: 1
};
var Field = {
  add: SemigroupSum.concat,
  zero: 0,
  mul: SemigroupProduct.concat,
  one: 1,
  sub: MagmaSub.concat,
  degree: function(_) {
    return 1;
  },
  div: function(first3, second2) {
    return first3 / second2;
  },
  mod: function(first3, second2) {
    return first3 % second2;
  }
};

// node_modules/fp-ts/es6/Separated.js
var Separated_exports = {};
__export(Separated_exports, {
  Bifunctor: () => Bifunctor,
  Functor: () => Functor3,
  URI: () => URI5,
  bimap: () => bimap,
  flap: () => flap4,
  left: () => left2,
  map: () => map4,
  mapLeft: () => mapLeft,
  right: () => right2,
  separated: () => separated
});
var separated = function(left14, right14) {
  return { left: left14, right: right14 };
};
var _map3 = function(fa, f) {
  return pipe(fa, map4(f));
};
var _mapLeft = function(fa, f) {
  return pipe(fa, mapLeft(f));
};
var _bimap = function(fa, g, f) {
  return pipe(fa, bimap(g, f));
};
var map4 = function(f) {
  return function(fa) {
    return separated(left2(fa), f(right2(fa)));
  };
};
var mapLeft = function(f) {
  return function(fa) {
    return separated(f(left2(fa)), right2(fa));
  };
};
var bimap = function(f, g) {
  return function(fa) {
    return separated(f(left2(fa)), g(right2(fa)));
  };
};
var URI5 = "Separated";
var Bifunctor = {
  URI: URI5,
  mapLeft: _mapLeft,
  bimap: _bimap
};
var Functor3 = {
  URI: URI5,
  map: _map3
};
var flap4 = flap(Functor3);
var left2 = function(s) {
  return s.left;
};
var right2 = function(s) {
  return s.right;
};

// node_modules/fp-ts/es6/Witherable.js
var Witherable_exports = {};
__export(Witherable_exports, {
  filterE: () => filterE,
  wiltDefault: () => wiltDefault,
  witherDefault: () => witherDefault
});
function wiltDefault(T, C) {
  return function(F) {
    var traverseF = T.traverse(F);
    return function(wa, f) {
      return F.map(traverseF(wa, f), C.separate);
    };
  };
}
function witherDefault(T, C) {
  return function(F) {
    var traverseF = T.traverse(F);
    return function(wa, f) {
      return F.map(traverseF(wa, f), C.compact);
    };
  };
}
function filterE(W) {
  return function(F) {
    var witherF = W.wither(F);
    return function(predicate) {
      return function(ga) {
        return witherF(ga, function(a) {
          return F.map(predicate(a), function(b) {
            return b ? some(a) : none;
          });
        });
      };
    };
  };
}

// node_modules/fp-ts/es6/Zero.js
var Zero_exports = {};
__export(Zero_exports, {
  guard: () => guard
});
function guard(F, P) {
  return function(b) {
    return b ? P.of(void 0) : F.zero();
  };
}

// node_modules/fp-ts/es6/ReadonlyArray.js
var __spreadArray5 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isEmpty = function(as15) {
  return as15.length === 0;
};
var isNonEmpty4 = isNonEmpty2;
var prepend3 = prepend;
var prependW3 = prependW;
var append3 = append;
var appendW3 = appendW;
var makeBy3 = function(n, f) {
  return n <= 0 ? empty3 : makeBy(f)(n);
};
var replicate3 = function(n, a) {
  return makeBy3(n, function() {
    return a;
  });
};
function fromPredicate2(predicate) {
  return function(a) {
    return predicate(a) ? [a] : empty3;
  };
}
var fromOption2 = function(ma) {
  return isNone(ma) ? empty3 : [ma.value];
};
var fromEither = function(e) {
  return isLeft(e) ? empty3 : [e.right];
};
var matchW = function(onEmpty, onNonEmpty) {
  return function(as15) {
    return isNonEmpty4(as15) ? onNonEmpty(as15) : onEmpty();
  };
};
var match = matchW;
var matchLeftW = function(onEmpty, onNonEmpty) {
  return function(as15) {
    return isNonEmpty4(as15) ? onNonEmpty(head2(as15), tail2(as15)) : onEmpty();
  };
};
var matchLeft3 = matchLeftW;
var foldLeft = matchLeft3;
var matchRightW = function(onEmpty, onNonEmpty) {
  return function(as15) {
    return isNonEmpty4(as15) ? onNonEmpty(init(as15), last2(as15)) : onEmpty();
  };
};
var matchRight3 = matchRightW;
var foldRight = matchRight3;
var chainWithIndex3 = function(f) {
  return function(as15) {
    if (isEmpty(as15)) {
      return empty3;
    }
    var out = [];
    for (var i = 0; i < as15.length; i++) {
      var bs = f(i, as15[i]);
      for (var j = 0; j < bs.length; j++) {
        out.push(bs[j]);
      }
    }
    return out;
  };
};
var scanLeft = function(b, f) {
  return function(as15) {
    var len = as15.length;
    var out = new Array(len + 1);
    out[0] = b;
    for (var i = 0; i < len; i++) {
      out[i + 1] = f(out[i], as15[i]);
    }
    return out;
  };
};
var scanRight = function(b, f) {
  return function(as15) {
    var len = as15.length;
    var out = new Array(len + 1);
    out[len] = b;
    for (var i = len - 1; i >= 0; i--) {
      out[i] = f(as15[i], out[i + 1]);
    }
    return out;
  };
};
var size = function(as15) {
  return as15.length;
};
var isOutOfBound3 = isOutOfBound;
function lookup(i, as15) {
  return as15 === void 0 ? function(as16) {
    return lookup(i, as16);
  } : isOutOfBound3(i, as15) ? none : some(as15[i]);
}
var head4 = function(as15) {
  return isNonEmpty4(as15) ? some(head2(as15)) : none;
};
var last4 = function(as15) {
  return isNonEmpty4(as15) ? some(last2(as15)) : none;
};
var tail4 = function(as15) {
  return isNonEmpty4(as15) ? some(tail2(as15)) : none;
};
var init3 = function(as15) {
  return isNonEmpty4(as15) ? some(init(as15)) : none;
};
var takeLeft = function(n) {
  return function(as15) {
    return isOutOfBound3(n, as15) ? as15 : n === 0 ? empty3 : as15.slice(0, n);
  };
};
var takeRight = function(n) {
  return function(as15) {
    return isOutOfBound3(n, as15) ? as15 : n === 0 ? empty3 : as15.slice(-n);
  };
};
function takeLeftWhile(predicate) {
  return function(as15) {
    var out = [];
    for (var _i = 0, as_1 = as15; _i < as_1.length; _i++) {
      var a = as_1[_i];
      if (!predicate(a)) {
        break;
      }
      out.push(a);
    }
    var len = out.length;
    return len === as15.length ? as15 : len === 0 ? empty3 : out;
  };
}
var spanLeftIndex = function(as15, predicate) {
  var l = as15.length;
  var i = 0;
  for (; i < l; i++) {
    if (!predicate(as15[i])) {
      break;
    }
  }
  return i;
};
function spanLeft(predicate) {
  return function(as15) {
    var _a = splitAt3(spanLeftIndex(as15, predicate))(as15), init5 = _a[0], rest = _a[1];
    return { init: init5, rest };
  };
}
var dropLeft = function(n) {
  return function(as15) {
    return n <= 0 || isEmpty(as15) ? as15 : n >= as15.length ? empty3 : as15.slice(n, as15.length);
  };
};
var dropRight = function(n) {
  return function(as15) {
    return n <= 0 || isEmpty(as15) ? as15 : n >= as15.length ? empty3 : as15.slice(0, as15.length - n);
  };
};
function dropLeftWhile(predicate) {
  return function(as15) {
    var i = spanLeftIndex(as15, predicate);
    return i === 0 ? as15 : i === as15.length ? empty3 : as15.slice(i);
  };
}
var findIndex = function(predicate) {
  return function(as15) {
    for (var i = 0; i < as15.length; i++) {
      if (predicate(as15[i])) {
        return some(i);
      }
    }
    return none;
  };
};
function findFirst(predicate) {
  return function(as15) {
    for (var i = 0; i < as15.length; i++) {
      if (predicate(as15[i])) {
        return some(as15[i]);
      }
    }
    return none;
  };
}
var findFirstMap = function(f) {
  return function(as15) {
    for (var i = 0; i < as15.length; i++) {
      var out = f(as15[i]);
      if (isSome(out)) {
        return out;
      }
    }
    return none;
  };
};
function findLast(predicate) {
  return function(as15) {
    for (var i = as15.length - 1; i >= 0; i--) {
      if (predicate(as15[i])) {
        return some(as15[i]);
      }
    }
    return none;
  };
}
var findLastMap = function(f) {
  return function(as15) {
    for (var i = as15.length - 1; i >= 0; i--) {
      var out = f(as15[i]);
      if (isSome(out)) {
        return out;
      }
    }
    return none;
  };
};
var findLastIndex = function(predicate) {
  return function(as15) {
    for (var i = as15.length - 1; i >= 0; i--) {
      if (predicate(as15[i])) {
        return some(i);
      }
    }
    return none;
  };
};
var insertAt3 = function(i, a) {
  return function(as15) {
    return i < 0 || i > as15.length ? none : some(unsafeInsertAt(i, a, as15));
  };
};
var updateAt3 = function(i, a) {
  return modifyAt3(i, function() {
    return a;
  });
};
var deleteAt = function(i) {
  return function(as15) {
    return isOutOfBound3(i, as15) ? none : some(unsafeDeleteAt(i, as15));
  };
};
var modifyAt3 = function(i, f) {
  return function(as15) {
    return isOutOfBound3(i, as15) ? none : some(unsafeUpdateAt3(i, f(as15[i]), as15));
  };
};
var reverse6 = function(as15) {
  return as15.length <= 1 ? as15 : as15.slice().reverse();
};
var rights = function(as15) {
  var r = [];
  for (var i = 0; i < as15.length; i++) {
    var a = as15[i];
    if (a._tag === "Right") {
      r.push(a.right);
    }
  }
  return r;
};
var lefts = function(as15) {
  var r = [];
  for (var i = 0; i < as15.length; i++) {
    var a = as15[i];
    if (a._tag === "Left") {
      r.push(a.left);
    }
  }
  return r;
};
var sort3 = function(O) {
  return function(as15) {
    return as15.length <= 1 ? as15 : as15.slice().sort(O.compare);
  };
};
var zipWith3 = function(fa, fb, f) {
  var fc = [];
  var len = Math.min(fa.length, fb.length);
  for (var i = 0; i < len; i++) {
    fc[i] = f(fa[i], fb[i]);
  }
  return fc;
};
function zip3(as15, bs) {
  if (bs === void 0) {
    return function(bs2) {
      return zip3(bs2, as15);
    };
  }
  return zipWith3(as15, bs, function(a, b) {
    return [a, b];
  });
}
var unzip3 = function(as15) {
  var fa = [];
  var fb = [];
  for (var i = 0; i < as15.length; i++) {
    fa[i] = as15[i][0];
    fb[i] = as15[i][1];
  }
  return [fa, fb];
};
var prependAll3 = function(middle) {
  var f = prependAll(middle);
  return function(as15) {
    return isNonEmpty4(as15) ? f(as15) : as15;
  };
};
var intersperse3 = function(middle) {
  var f = intersperse(middle);
  return function(as15) {
    return isNonEmpty4(as15) ? f(as15) : as15;
  };
};
var rotate3 = function(n) {
  var f = rotate(n);
  return function(as15) {
    return isNonEmpty4(as15) ? f(as15) : as15;
  };
};
function elem(E) {
  return function(a, as15) {
    if (as15 === void 0) {
      var elemE_1 = elem(E);
      return function(as16) {
        return elemE_1(a, as16);
      };
    }
    var predicate = function(element) {
      return E.equals(element, a);
    };
    var i = 0;
    for (; i < as15.length; i++) {
      if (predicate(as15[i])) {
        return true;
      }
    }
    return false;
  };
}
var uniq3 = function(E) {
  var f = uniq(E);
  return function(as15) {
    return isNonEmpty4(as15) ? f(as15) : as15;
  };
};
var sortBy3 = function(ords) {
  var f = sortBy(ords);
  return function(as15) {
    return isNonEmpty4(as15) ? f(as15) : as15;
  };
};
var chop3 = function(f) {
  var g = chop(f);
  return function(as15) {
    return isNonEmpty4(as15) ? g(as15) : empty3;
  };
};
var splitAt3 = function(n) {
  return function(as15) {
    return n >= 1 && isNonEmpty4(as15) ? splitAt(n)(as15) : isEmpty(as15) ? [as15, empty3] : [empty3, as15];
  };
};
var chunksOf3 = function(n) {
  var f = chunksOf(n);
  return function(as15) {
    return isNonEmpty4(as15) ? f(as15) : empty3;
  };
};
var fromOptionK2 = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return fromOption2(f.apply(void 0, a));
  };
};
function comprehension(input, f, g) {
  if (g === void 0) {
    g = function() {
      return true;
    };
  }
  var go = function(scope, input2) {
    return isNonEmpty4(input2) ? flatMap3(head2(input2), function(a) {
      return go(pipe(scope, append3(a)), tail2(input2));
    }) : g.apply(void 0, scope) ? [f.apply(void 0, scope)] : empty3;
  };
  return go(empty3, input);
}
var concatW3 = function(second2) {
  return function(first3) {
    return isEmpty(first3) ? second2 : isEmpty(second2) ? first3 : first3.concat(second2);
  };
};
var concat3 = concatW3;
function union3(E) {
  var unionE = union(E);
  return function(first3, second2) {
    if (second2 === void 0) {
      var unionE_1 = union3(E);
      return function(second3) {
        return unionE_1(second3, first3);
      };
    }
    return isNonEmpty4(first3) && isNonEmpty4(second2) ? unionE(second2)(first3) : isNonEmpty4(first3) ? first3 : second2;
  };
}
function intersection(E) {
  var elemE = elem(E);
  return function(xs, ys) {
    if (ys === void 0) {
      var intersectionE_1 = intersection(E);
      return function(ys2) {
        return intersectionE_1(ys2, xs);
      };
    }
    return xs.filter(function(a) {
      return elemE(a, ys);
    });
  };
}
function difference(E) {
  var elemE = elem(E);
  return function(xs, ys) {
    if (ys === void 0) {
      var differenceE_1 = difference(E);
      return function(ys2) {
        return differenceE_1(ys2, xs);
      };
    }
    return xs.filter(function(a) {
      return !elemE(a, ys);
    });
  };
}
var _map4 = function(fa, f) {
  return pipe(fa, map5(f));
};
var _mapWithIndex3 = function(fa, f) {
  return pipe(fa, mapWithIndex3(f));
};
var _ap3 = function(fab, fa) {
  return pipe(fab, ap4(fa));
};
var _filter = function(fa, predicate) {
  return pipe(fa, filter3(predicate));
};
var _filterMap = function(fa, f) {
  return pipe(fa, filterMap(f));
};
var _partition = function(fa, predicate) {
  return pipe(fa, partition(predicate));
};
var _partitionMap = function(fa, f) {
  return pipe(fa, partitionMap(f));
};
var _partitionWithIndex = function(fa, predicateWithIndex) {
  return pipe(fa, partitionWithIndex(predicateWithIndex));
};
var _partitionMapWithIndex = function(fa, f) {
  return pipe(fa, partitionMapWithIndex(f));
};
var _alt3 = function(fa, that) {
  return pipe(fa, alt3(that));
};
var _reduce3 = function(fa, b, f) {
  return pipe(fa, reduce3(b, f));
};
var _foldMap3 = function(M) {
  var foldMapM = foldMap3(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight3 = function(fa, b, f) {
  return pipe(fa, reduceRight3(b, f));
};
var _reduceWithIndex3 = function(fa, b, f) {
  return pipe(fa, reduceWithIndex3(b, f));
};
var _foldMapWithIndex3 = function(M) {
  var foldMapWithIndexM = foldMapWithIndex3(M);
  return function(fa, f) {
    return pipe(fa, foldMapWithIndexM(f));
  };
};
var _reduceRightWithIndex3 = function(fa, b, f) {
  return pipe(fa, reduceRightWithIndex3(b, f));
};
var _filterMapWithIndex = function(fa, f) {
  return pipe(fa, filterMapWithIndex(f));
};
var _filterWithIndex = function(fa, predicateWithIndex) {
  return pipe(fa, filterWithIndex3(predicateWithIndex));
};
var _extend3 = function(fa, f) {
  return pipe(fa, extend3(f));
};
var _traverse3 = function(F) {
  var traverseF = traverse3(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _traverseWithIndex3 = function(F) {
  var traverseWithIndexF = traverseWithIndex3(F);
  return function(ta, f) {
    return pipe(ta, traverseWithIndexF(f));
  };
};
var _chainRecDepthFirst = function(a, f) {
  return pipe(a, chainRecDepthFirst(f));
};
var _chainRecBreadthFirst = function(a, f) {
  return pipe(a, chainRecBreadthFirst(f));
};
var of3 = of;
var zero = function() {
  return empty3;
};
var altW3 = function(that) {
  return function(fa) {
    return fa.concat(that());
  };
};
var alt3 = altW3;
var ap4 = function(fa) {
  return flatMap3(function(f) {
    return pipe(fa, map5(f));
  });
};
var flatMap3 = dual(2, function(ma, f) {
  return pipe(ma, chainWithIndex3(function(i, a) {
    return f(a, i);
  }));
});
var flatten3 = flatMap3(identity);
var map5 = function(f) {
  return function(fa) {
    return fa.map(function(a) {
      return f(a);
    });
  };
};
var mapWithIndex3 = function(f) {
  return function(fa) {
    return fa.map(function(a, i) {
      return f(i, a);
    });
  };
};
var separate = function(fa) {
  var left14 = [];
  var right14 = [];
  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
    var e = fa_1[_i];
    if (e._tag === "Left") {
      left14.push(e.left);
    } else {
      right14.push(e.right);
    }
  }
  return separated(left14, right14);
};
var filter3 = function(predicate) {
  return function(as15) {
    return as15.filter(predicate);
  };
};
var filterMapWithIndex = function(f) {
  return function(fa) {
    var out = [];
    for (var i = 0; i < fa.length; i++) {
      var optionB = f(i, fa[i]);
      if (isSome(optionB)) {
        out.push(optionB.value);
      }
    }
    return out;
  };
};
var filterMap = function(f) {
  return filterMapWithIndex(function(_, a) {
    return f(a);
  });
};
var compact = filterMap(identity);
var partition = function(predicate) {
  return partitionWithIndex(function(_, a) {
    return predicate(a);
  });
};
var partitionWithIndex = function(predicateWithIndex) {
  return function(as15) {
    var left14 = [];
    var right14 = [];
    for (var i = 0; i < as15.length; i++) {
      var a = as15[i];
      if (predicateWithIndex(i, a)) {
        right14.push(a);
      } else {
        left14.push(a);
      }
    }
    return separated(left14, right14);
  };
};
var partitionMap = function(f) {
  return partitionMapWithIndex(function(_, a) {
    return f(a);
  });
};
var partitionMapWithIndex = function(f) {
  return function(fa) {
    var left14 = [];
    var right14 = [];
    for (var i = 0; i < fa.length; i++) {
      var e = f(i, fa[i]);
      if (e._tag === "Left") {
        left14.push(e.left);
      } else {
        right14.push(e.right);
      }
    }
    return separated(left14, right14);
  };
};
var filterWithIndex3 = function(predicateWithIndex) {
  return function(as15) {
    return as15.filter(function(a, i) {
      return predicateWithIndex(i, a);
    });
  };
};
var extend3 = function(f) {
  return function(wa) {
    return wa.map(function(_, i) {
      return f(wa.slice(i));
    });
  };
};
var duplicate3 = extend3(identity);
var foldMapWithIndex3 = function(M) {
  return function(f) {
    return function(fa) {
      return fa.reduce(function(b, a, i) {
        return M.concat(b, f(i, a));
      }, M.empty);
    };
  };
};
var reduce3 = function(b, f) {
  return reduceWithIndex3(b, function(_, b2, a) {
    return f(b2, a);
  });
};
var foldMap3 = function(M) {
  var foldMapWithIndexM = foldMapWithIndex3(M);
  return function(f) {
    return foldMapWithIndexM(function(_, a) {
      return f(a);
    });
  };
};
var reduceWithIndex3 = function(b, f) {
  return function(fa) {
    var len = fa.length;
    var out = b;
    for (var i = 0; i < len; i++) {
      out = f(i, out, fa[i]);
    }
    return out;
  };
};
var reduceRight3 = function(b, f) {
  return reduceRightWithIndex3(b, function(_, a, b2) {
    return f(a, b2);
  });
};
var reduceRightWithIndex3 = function(b, f) {
  return function(fa) {
    return fa.reduceRight(function(b2, a, i) {
      return f(i, a, b2);
    }, b);
  };
};
var traverse3 = function(F) {
  var traverseWithIndexF = traverseWithIndex3(F);
  return function(f) {
    return traverseWithIndexF(function(_, a) {
      return f(a);
    });
  };
};
var sequence3 = function(F) {
  return function(ta) {
    return _reduce3(ta, F.of(zero()), function(fas, fa) {
      return F.ap(F.map(fas, function(as15) {
        return function(a) {
          return pipe(as15, append3(a));
        };
      }), fa);
    });
  };
};
var traverseWithIndex3 = function(F) {
  return function(f) {
    return reduceWithIndex3(F.of(zero()), function(i, fbs, a) {
      return F.ap(F.map(fbs, function(bs) {
        return function(b) {
          return pipe(bs, append3(b));
        };
      }), f(i, a));
    });
  };
};
var wither = function(F) {
  var _witherF = _wither(F);
  return function(f) {
    return function(fa) {
      return _witherF(fa, f);
    };
  };
};
var wilt = function(F) {
  var _wiltF = _wilt(F);
  return function(f) {
    return function(fa) {
      return _wiltF(fa, f);
    };
  };
};
var unfold = function(b, f) {
  var out = [];
  var bb = b;
  while (true) {
    var mt = f(bb);
    if (isSome(mt)) {
      var _a = mt.value, a = _a[0], b_1 = _a[1];
      out.push(a);
      bb = b_1;
    } else {
      break;
    }
  }
  return out;
};
var URI6 = "ReadonlyArray";
var getShow3 = function(S) {
  return {
    show: function(as15) {
      return "[".concat(as15.map(S.show).join(", "), "]");
    }
  };
};
var getSemigroup6 = function() {
  return {
    concat: function(first3, second2) {
      return isEmpty(first3) ? second2 : isEmpty(second2) ? first3 : first3.concat(second2);
    }
  };
};
var getMonoid4 = function() {
  return {
    concat: getSemigroup6().concat,
    empty: empty3
  };
};
var getEq3 = function(E) {
  return fromEquals(function(xs, ys) {
    return xs.length === ys.length && xs.every(function(x, i) {
      return E.equals(x, ys[i]);
    });
  });
};
var getOrd = function(O) {
  return fromCompare(function(a, b) {
    var aLen = a.length;
    var bLen = b.length;
    var len = Math.min(aLen, bLen);
    for (var i = 0; i < len; i++) {
      var ordering = O.compare(a[i], b[i]);
      if (ordering !== 0) {
        return ordering;
      }
    }
    return Ord.compare(aLen, bLen);
  });
};
var getUnionSemigroup3 = function(E) {
  var unionE = union3(E);
  return {
    concat: function(first3, second2) {
      return unionE(second2)(first3);
    }
  };
};
var getUnionMonoid = function(E) {
  return {
    concat: getUnionSemigroup3(E).concat,
    empty: empty3
  };
};
var getIntersectionSemigroup = function(E) {
  var intersectionE = intersection(E);
  return {
    concat: function(first3, second2) {
      return intersectionE(second2)(first3);
    }
  };
};
var getDifferenceMagma = function(E) {
  var differenceE = difference(E);
  return {
    concat: function(first3, second2) {
      return differenceE(second2)(first3);
    }
  };
};
var Functor4 = {
  URI: URI6,
  map: _map4
};
var flap5 = flap(Functor4);
var Pointed3 = {
  URI: URI6,
  of: of3
};
var FunctorWithIndex3 = {
  URI: URI6,
  map: _map4,
  mapWithIndex: _mapWithIndex3
};
var Apply3 = {
  URI: URI6,
  map: _map4,
  ap: _ap3
};
var apFirst4 = apFirst(Apply3);
var apSecond4 = apSecond(Apply3);
var Applicative3 = {
  URI: URI6,
  map: _map4,
  ap: _ap3,
  of: of3
};
var Chain3 = {
  URI: URI6,
  map: _map4,
  ap: _ap3,
  chain: flatMap3
};
var Monad3 = {
  URI: URI6,
  map: _map4,
  ap: _ap3,
  of: of3,
  chain: flatMap3
};
var chainFirst4 = chainFirst(Chain3);
var Unfoldable = {
  URI: URI6,
  unfold
};
var Alt3 = {
  URI: URI6,
  map: _map4,
  alt: _alt3
};
var Zero = {
  URI: URI6,
  zero
};
var guard2 = guard(Zero, Pointed3);
var Alternative = {
  URI: URI6,
  map: _map4,
  ap: _ap3,
  of: of3,
  alt: _alt3,
  zero
};
var Extend = {
  URI: URI6,
  map: _map4,
  extend: _extend3
};
var Compactable = {
  URI: URI6,
  compact,
  separate
};
var Filterable = {
  URI: URI6,
  map: _map4,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap
};
var FilterableWithIndex = {
  URI: URI6,
  map: _map4,
  mapWithIndex: _mapWithIndex3,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  partitionMapWithIndex: _partitionMapWithIndex,
  partitionWithIndex: _partitionWithIndex,
  filterMapWithIndex: _filterMapWithIndex,
  filterWithIndex: _filterWithIndex
};
var Foldable3 = {
  URI: URI6,
  reduce: _reduce3,
  foldMap: _foldMap3,
  reduceRight: _reduceRight3
};
var FoldableWithIndex3 = {
  URI: URI6,
  reduce: _reduce3,
  foldMap: _foldMap3,
  reduceRight: _reduceRight3,
  reduceWithIndex: _reduceWithIndex3,
  foldMapWithIndex: _foldMapWithIndex3,
  reduceRightWithIndex: _reduceRightWithIndex3
};
var Traversable3 = {
  URI: URI6,
  map: _map4,
  reduce: _reduce3,
  foldMap: _foldMap3,
  reduceRight: _reduceRight3,
  traverse: _traverse3,
  sequence: sequence3
};
var TraversableWithIndex3 = {
  URI: URI6,
  map: _map4,
  mapWithIndex: _mapWithIndex3,
  reduce: _reduce3,
  foldMap: _foldMap3,
  reduceRight: _reduceRight3,
  reduceWithIndex: _reduceWithIndex3,
  foldMapWithIndex: _foldMapWithIndex3,
  reduceRightWithIndex: _reduceRightWithIndex3,
  traverse: _traverse3,
  sequence: sequence3,
  traverseWithIndex: _traverseWithIndex3
};
var chainRecDepthFirst = function(f) {
  return function(a) {
    var todo = __spreadArray5([], f(a), true);
    var out = [];
    while (todo.length > 0) {
      var e = todo.shift();
      if (isLeft(e)) {
        todo.unshift.apply(todo, f(e.left));
      } else {
        out.push(e.right);
      }
    }
    return out;
  };
};
var ChainRecDepthFirst = {
  URI: URI6,
  map: _map4,
  ap: _ap3,
  chain: flatMap3,
  chainRec: _chainRecDepthFirst
};
var chainRecBreadthFirst = function(f) {
  return function(a) {
    var initial = f(a);
    var todo = [];
    var out = [];
    function go(e2) {
      if (isLeft(e2)) {
        f(e2.left).forEach(function(v) {
          return todo.push(v);
        });
      } else {
        out.push(e2.right);
      }
    }
    for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {
      var e = initial_1[_i];
      go(e);
    }
    while (todo.length > 0) {
      go(todo.shift());
    }
    return out;
  };
};
var ChainRecBreadthFirst = {
  URI: URI6,
  map: _map4,
  ap: _ap3,
  chain: flatMap3,
  chainRec: _chainRecBreadthFirst
};
var _wither = witherDefault(Traversable3, Compactable);
var _wilt = wiltDefault(Traversable3, Compactable);
var Witherable = {
  URI: URI6,
  map: _map4,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  reduce: _reduce3,
  foldMap: _foldMap3,
  reduceRight: _reduceRight3,
  traverse: _traverse3,
  sequence: sequence3,
  wither: _wither,
  wilt: _wilt
};
var filterE2 = filterE(Witherable);
var FromEither = {
  URI: URI6,
  fromEither
};
var fromEitherK2 = fromEitherK(FromEither);
var unsafeInsertAt3 = unsafeInsertAt;
var unsafeUpdateAt3 = function(i, a, as15) {
  return isNonEmpty4(as15) ? unsafeUpdateAt(i, a, as15) : as15;
};
var unsafeDeleteAt = function(i, as15) {
  var xs = as15.slice();
  xs.splice(i, 1);
  return xs;
};
var toArray = function(as15) {
  return as15.slice();
};
var fromArray3 = function(as15) {
  return isEmpty(as15) ? empty3 : as15.slice();
};
var empty3 = empty2;
function every(predicate) {
  return function(as15) {
    return as15.every(predicate);
  };
}
var some2 = function(predicate) {
  return function(as15) {
    return as15.some(predicate);
  };
};
var exists = some2;
var intercalate4 = function(M) {
  var intercalateM = intercalate2(M);
  return function(middle) {
    return match(function() {
      return M.empty;
    }, intercalateM(middle));
  };
};
var Do3 = of3(emptyRecord);
var bindTo4 = bindTo(Functor4);
var let_4 = let_(Functor4);
var bind4 = bind(Chain3);
var apS4 = apS(Apply3);
var chain3 = flatMap3;
var range3 = range;
var cons3 = cons;
var snoc3 = snoc;
var prependToAll3 = prependAll3;
var readonlyArray = {
  URI: URI6,
  compact,
  separate,
  map: _map4,
  ap: _ap3,
  of: of3,
  chain: flatMap3,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  mapWithIndex: _mapWithIndex3,
  partitionMapWithIndex: _partitionMapWithIndex,
  partitionWithIndex: _partitionWithIndex,
  filterMapWithIndex: _filterMapWithIndex,
  filterWithIndex: _filterWithIndex,
  alt: _alt3,
  zero,
  unfold,
  reduce: _reduce3,
  foldMap: _foldMap3,
  reduceRight: _reduceRight3,
  traverse: _traverse3,
  sequence: sequence3,
  reduceWithIndex: _reduceWithIndex3,
  foldMapWithIndex: _foldMapWithIndex3,
  reduceRightWithIndex: _reduceRightWithIndex3,
  traverseWithIndex: _traverseWithIndex3,
  extend: _extend3,
  wither: _wither,
  wilt: _wilt
};

// node_modules/fp-ts/es6/Array.js
var isEmpty2 = function(as15) {
  return as15.length === 0;
};
var isNonEmpty5 = isNonEmpty3;
var prepend4 = prepend2;
var prependW4 = prependW2;
var append4 = append2;
var appendW4 = appendW2;
var makeBy4 = function(n, f) {
  return n <= 0 ? [] : makeBy2(f)(n);
};
var replicate4 = function(n, a) {
  return makeBy4(n, function() {
    return a;
  });
};
function fromPredicate3(predicate) {
  return function(a) {
    return predicate(a) ? [a] : [];
  };
}
var fromOption3 = function(ma) {
  return isNone(ma) ? [] : [ma.value];
};
var fromEither2 = function(e) {
  return isLeft(e) ? [] : [e.right];
};
var matchW2 = function(onEmpty, onNonEmpty) {
  return function(as15) {
    return isNonEmpty5(as15) ? onNonEmpty(as15) : onEmpty();
  };
};
var match2 = matchW2;
var matchLeftW2 = function(onEmpty, onNonEmpty) {
  return function(as15) {
    return isNonEmpty5(as15) ? onNonEmpty(head3(as15), tail3(as15)) : onEmpty();
  };
};
var matchLeft4 = matchLeftW2;
var foldLeft2 = matchLeft4;
var matchRightW2 = function(onEmpty, onNonEmpty) {
  return function(as15) {
    return isNonEmpty5(as15) ? onNonEmpty(init2(as15), last3(as15)) : onEmpty();
  };
};
var matchRight4 = matchRightW2;
var foldRight2 = matchRight4;
var chainWithIndex4 = function(f) {
  return function(as15) {
    var out = [];
    for (var i = 0; i < as15.length; i++) {
      var bs = f(i, as15[i]);
      for (var j = 0; j < bs.length; j++) {
        out.push(bs[j]);
      }
    }
    return out;
  };
};
var scanLeft2 = function(b, f) {
  return function(as15) {
    var len = as15.length;
    var out = new Array(len + 1);
    out[0] = b;
    for (var i = 0; i < len; i++) {
      out[i + 1] = f(out[i], as15[i]);
    }
    return out;
  };
};
var scanRight2 = function(b, f) {
  return function(as15) {
    var len = as15.length;
    var out = new Array(len + 1);
    out[len] = b;
    for (var i = len - 1; i >= 0; i--) {
      out[i] = f(as15[i], out[i + 1]);
    }
    return out;
  };
};
var size2 = function(as15) {
  return as15.length;
};
var isOutOfBound4 = isOutOfBound2;
var lookup2 = lookup;
var head5 = head4;
var last5 = last4;
var tail5 = function(as15) {
  return isNonEmpty5(as15) ? some(tail3(as15)) : none;
};
var init4 = function(as15) {
  return isNonEmpty5(as15) ? some(init2(as15)) : none;
};
var takeLeft2 = function(n) {
  return function(as15) {
    return isOutOfBound4(n, as15) ? copy2(as15) : as15.slice(0, n);
  };
};
var takeRight2 = function(n) {
  return function(as15) {
    return isOutOfBound4(n, as15) ? copy2(as15) : n === 0 ? [] : as15.slice(-n);
  };
};
function takeLeftWhile2(predicate) {
  return function(as15) {
    var out = [];
    for (var _i = 0, as_1 = as15; _i < as_1.length; _i++) {
      var a = as_1[_i];
      if (!predicate(a)) {
        break;
      }
      out.push(a);
    }
    return out;
  };
}
var spanLeftIndex2 = function(as15, predicate) {
  var l = as15.length;
  var i = 0;
  for (; i < l; i++) {
    if (!predicate(as15[i])) {
      break;
    }
  }
  return i;
};
function spanLeft2(predicate) {
  return function(as15) {
    var _a = splitAt4(spanLeftIndex2(as15, predicate))(as15), init5 = _a[0], rest = _a[1];
    return { init: init5, rest };
  };
}
var dropLeft2 = function(n) {
  return function(as15) {
    return n <= 0 || isEmpty2(as15) ? copy2(as15) : n >= as15.length ? [] : as15.slice(n, as15.length);
  };
};
var dropRight2 = function(n) {
  return function(as15) {
    return n <= 0 || isEmpty2(as15) ? copy2(as15) : n >= as15.length ? [] : as15.slice(0, as15.length - n);
  };
};
function dropLeftWhile2(predicate) {
  return function(as15) {
    return as15.slice(spanLeftIndex2(as15, predicate));
  };
}
var findIndex2 = findIndex;
function findFirst2(predicate) {
  return findFirst(predicate);
}
var findFirstMap2 = findFirstMap;
function findLast2(predicate) {
  return findLast(predicate);
}
var findLastMap2 = findLastMap;
var findLastIndex2 = findLastIndex;
var copy2 = function(as15) {
  return as15.slice();
};
var insertAt4 = function(i, a) {
  return function(as15) {
    return i < 0 || i > as15.length ? none : some(unsafeInsertAt4(i, a, as15));
  };
};
var updateAt4 = function(i, a) {
  return modifyAt4(i, function() {
    return a;
  });
};
var deleteAt2 = function(i) {
  return function(as15) {
    return isOutOfBound4(i, as15) ? none : some(unsafeDeleteAt2(i, as15));
  };
};
var modifyAt4 = function(i, f) {
  return function(as15) {
    return isOutOfBound4(i, as15) ? none : some(unsafeUpdateAt4(i, f(as15[i]), as15));
  };
};
var reverse7 = function(as15) {
  return isEmpty2(as15) ? [] : as15.slice().reverse();
};
var rights2 = function(as15) {
  var r = [];
  for (var i = 0; i < as15.length; i++) {
    var a = as15[i];
    if (a._tag === "Right") {
      r.push(a.right);
    }
  }
  return r;
};
var lefts2 = function(as15) {
  var r = [];
  for (var i = 0; i < as15.length; i++) {
    var a = as15[i];
    if (a._tag === "Left") {
      r.push(a.left);
    }
  }
  return r;
};
var sort4 = function(O) {
  return function(as15) {
    return as15.length <= 1 ? copy2(as15) : as15.slice().sort(O.compare);
  };
};
var zipWith4 = function(fa, fb, f) {
  var fc = [];
  var len = Math.min(fa.length, fb.length);
  for (var i = 0; i < len; i++) {
    fc[i] = f(fa[i], fb[i]);
  }
  return fc;
};
function zip4(as15, bs) {
  if (bs === void 0) {
    return function(bs2) {
      return zip4(bs2, as15);
    };
  }
  return zipWith4(as15, bs, function(a, b) {
    return [a, b];
  });
}
var unzip4 = function(as15) {
  var fa = [];
  var fb = [];
  for (var i = 0; i < as15.length; i++) {
    fa[i] = as15[i][0];
    fb[i] = as15[i][1];
  }
  return [fa, fb];
};
var prependAll4 = function(middle) {
  var f = prependAll2(middle);
  return function(as15) {
    return isNonEmpty5(as15) ? f(as15) : [];
  };
};
var intersperse4 = function(middle) {
  var f = intersperse2(middle);
  return function(as15) {
    return isNonEmpty5(as15) ? f(as15) : copy2(as15);
  };
};
var rotate4 = function(n) {
  var f = rotate2(n);
  return function(as15) {
    return isNonEmpty5(as15) ? f(as15) : copy2(as15);
  };
};
var elem2 = elem;
var uniq4 = function(E) {
  var f = uniq2(E);
  return function(as15) {
    return isNonEmpty5(as15) ? f(as15) : copy2(as15);
  };
};
var sortBy4 = function(ords) {
  var f = sortBy2(ords);
  return function(as15) {
    return isNonEmpty5(as15) ? f(as15) : copy2(as15);
  };
};
var chop4 = function(f) {
  var g = chop2(f);
  return function(as15) {
    return isNonEmpty5(as15) ? g(as15) : [];
  };
};
var splitAt4 = function(n) {
  return function(as15) {
    return n >= 1 && isNonEmpty5(as15) ? splitAt2(n)(as15) : isEmpty2(as15) ? [copy2(as15), []] : [[], copy2(as15)];
  };
};
var chunksOf4 = function(n) {
  var f = chunksOf2(n);
  return function(as15) {
    return isNonEmpty5(as15) ? f(as15) : [];
  };
};
var fromOptionK3 = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return fromOption3(f.apply(void 0, a));
  };
};
function comprehension2(input, f, g) {
  if (g === void 0) {
    g = function() {
      return true;
    };
  }
  var go = function(scope, input2) {
    return isNonEmpty5(input2) ? flatMap4(head3(input2), function(a) {
      return go(pipe(scope, append4(a)), tail3(input2));
    }) : g.apply(void 0, scope) ? [f.apply(void 0, scope)] : [];
  };
  return go([], input);
}
var concatW4 = function(second2) {
  return function(first3) {
    return isEmpty2(first3) ? copy2(second2) : isEmpty2(second2) ? copy2(first3) : first3.concat(second2);
  };
};
var concat4 = concatW4;
function union4(E) {
  var unionE = union2(E);
  return function(first3, second2) {
    if (second2 === void 0) {
      var unionE_1 = union4(E);
      return function(second3) {
        return unionE_1(second3, first3);
      };
    }
    return isNonEmpty5(first3) && isNonEmpty5(second2) ? unionE(second2)(first3) : isNonEmpty5(first3) ? copy2(first3) : copy2(second2);
  };
}
function intersection2(E) {
  var elemE = elem2(E);
  return function(xs, ys) {
    if (ys === void 0) {
      var intersectionE_1 = intersection2(E);
      return function(ys2) {
        return intersectionE_1(ys2, xs);
      };
    }
    return xs.filter(function(a) {
      return elemE(a, ys);
    });
  };
}
function difference2(E) {
  var elemE = elem2(E);
  return function(xs, ys) {
    if (ys === void 0) {
      var differenceE_1 = difference2(E);
      return function(ys2) {
        return differenceE_1(ys2, xs);
      };
    }
    return xs.filter(function(a) {
      return !elemE(a, ys);
    });
  };
}
var _map5 = function(fa, f) {
  return pipe(fa, map6(f));
};
var _mapWithIndex4 = function(fa, f) {
  return pipe(fa, mapWithIndex4(f));
};
var _ap4 = function(fab, fa) {
  return pipe(fab, ap5(fa));
};
var _filter2 = function(fa, predicate) {
  return pipe(fa, filter4(predicate));
};
var _filterMap2 = function(fa, f) {
  return pipe(fa, filterMap2(f));
};
var _partition2 = function(fa, predicate) {
  return pipe(fa, partition2(predicate));
};
var _partitionMap2 = function(fa, f) {
  return pipe(fa, partitionMap2(f));
};
var _partitionWithIndex2 = function(fa, predicateWithIndex) {
  return pipe(fa, partitionWithIndex2(predicateWithIndex));
};
var _partitionMapWithIndex2 = function(fa, f) {
  return pipe(fa, partitionMapWithIndex2(f));
};
var _alt4 = function(fa, that) {
  return pipe(fa, alt4(that));
};
var _reduce4 = function(fa, b, f) {
  return pipe(fa, reduce4(b, f));
};
var _foldMap4 = function(M) {
  var foldMapM = foldMap4(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight4 = function(fa, b, f) {
  return pipe(fa, reduceRight4(b, f));
};
var _reduceWithIndex4 = function(fa, b, f) {
  return pipe(fa, reduceWithIndex4(b, f));
};
var _foldMapWithIndex4 = function(M) {
  var foldMapWithIndexM = foldMapWithIndex4(M);
  return function(fa, f) {
    return pipe(fa, foldMapWithIndexM(f));
  };
};
var _reduceRightWithIndex4 = function(fa, b, f) {
  return pipe(fa, reduceRightWithIndex4(b, f));
};
var _filterMapWithIndex2 = function(fa, f) {
  return pipe(fa, filterMapWithIndex2(f));
};
var _filterWithIndex2 = function(fa, predicateWithIndex) {
  return pipe(fa, filterWithIndex4(predicateWithIndex));
};
var _extend4 = function(fa, f) {
  return pipe(fa, extend4(f));
};
var _traverse4 = function(F) {
  var traverseF = traverse4(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _traverseWithIndex4 = function(F) {
  var traverseWithIndexF = traverseWithIndex4(F);
  return function(ta, f) {
    return pipe(ta, traverseWithIndexF(f));
  };
};
var _chainRecDepthFirst2 = _chainRecDepthFirst;
var _chainRecBreadthFirst2 = _chainRecBreadthFirst;
var of4 = of2;
var zero2 = function() {
  return [];
};
var map6 = function(f) {
  return function(fa) {
    return fa.map(function(a) {
      return f(a);
    });
  };
};
var ap5 = function(fa) {
  return flatMap4(function(f) {
    return pipe(fa, map6(f));
  });
};
var flatMap4 = dual(2, function(ma, f) {
  return pipe(ma, chainWithIndex4(function(i, a) {
    return f(a, i);
  }));
});
var flatten4 = flatMap4(identity);
var mapWithIndex4 = function(f) {
  return function(fa) {
    return fa.map(function(a, i) {
      return f(i, a);
    });
  };
};
var filterMapWithIndex2 = function(f) {
  return function(fa) {
    var out = [];
    for (var i = 0; i < fa.length; i++) {
      var optionB = f(i, fa[i]);
      if (isSome(optionB)) {
        out.push(optionB.value);
      }
    }
    return out;
  };
};
var filterMap2 = function(f) {
  return filterMapWithIndex2(function(_, a) {
    return f(a);
  });
};
var compact2 = filterMap2(identity);
var separate2 = function(fa) {
  var left14 = [];
  var right14 = [];
  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
    var e = fa_1[_i];
    if (e._tag === "Left") {
      left14.push(e.left);
    } else {
      right14.push(e.right);
    }
  }
  return separated(left14, right14);
};
var filter4 = function(predicate) {
  return function(as15) {
    return as15.filter(predicate);
  };
};
var partition2 = function(predicate) {
  return partitionWithIndex2(function(_, a) {
    return predicate(a);
  });
};
var partitionWithIndex2 = function(predicateWithIndex) {
  return function(as15) {
    var left14 = [];
    var right14 = [];
    for (var i = 0; i < as15.length; i++) {
      var b = as15[i];
      if (predicateWithIndex(i, b)) {
        right14.push(b);
      } else {
        left14.push(b);
      }
    }
    return separated(left14, right14);
  };
};
var partitionMap2 = function(f) {
  return partitionMapWithIndex2(function(_, a) {
    return f(a);
  });
};
var partitionMapWithIndex2 = function(f) {
  return function(fa) {
    var left14 = [];
    var right14 = [];
    for (var i = 0; i < fa.length; i++) {
      var e = f(i, fa[i]);
      if (e._tag === "Left") {
        left14.push(e.left);
      } else {
        right14.push(e.right);
      }
    }
    return separated(left14, right14);
  };
};
var altW4 = function(that) {
  return function(fa) {
    return fa.concat(that());
  };
};
var alt4 = altW4;
var filterWithIndex4 = function(predicateWithIndex) {
  return function(as15) {
    return as15.filter(function(b, i) {
      return predicateWithIndex(i, b);
    });
  };
};
var extend4 = function(f) {
  return function(wa) {
    return wa.map(function(_, i) {
      return f(wa.slice(i));
    });
  };
};
var duplicate4 = extend4(identity);
var foldMap4 = foldMap3;
var foldMapWithIndex4 = foldMapWithIndex3;
var reduce4 = reduce3;
var reduceWithIndex4 = reduceWithIndex3;
var reduceRight4 = reduceRight3;
var reduceRightWithIndex4 = reduceRightWithIndex3;
var traverse4 = function(F) {
  var traverseWithIndexF = traverseWithIndex4(F);
  return function(f) {
    return traverseWithIndexF(function(_, a) {
      return f(a);
    });
  };
};
var sequence4 = function(F) {
  return function(ta) {
    return _reduce4(ta, F.of(zero2()), function(fas, fa) {
      return F.ap(F.map(fas, function(as15) {
        return function(a) {
          return pipe(as15, append4(a));
        };
      }), fa);
    });
  };
};
var traverseWithIndex4 = function(F) {
  return function(f) {
    return reduceWithIndex4(F.of(zero2()), function(i, fbs, a) {
      return F.ap(F.map(fbs, function(bs) {
        return function(b) {
          return pipe(bs, append4(b));
        };
      }), f(i, a));
    });
  };
};
var wither2 = function(F) {
  var _witherF = _wither2(F);
  return function(f) {
    return function(fa) {
      return _witherF(fa, f);
    };
  };
};
var wilt2 = function(F) {
  var _wiltF = _wilt2(F);
  return function(f) {
    return function(fa) {
      return _wiltF(fa, f);
    };
  };
};
var unfold2 = function(b, f) {
  var out = [];
  var bb = b;
  while (true) {
    var mt = f(bb);
    if (isSome(mt)) {
      var _a = mt.value, a = _a[0], b_1 = _a[1];
      out.push(a);
      bb = b_1;
    } else {
      break;
    }
  }
  return out;
};
var URI7 = "Array";
var getShow4 = getShow3;
var getSemigroup7 = function() {
  return {
    concat: function(first3, second2) {
      return first3.concat(second2);
    }
  };
};
var getMonoid5 = function() {
  return {
    concat: getSemigroup7().concat,
    empty: []
  };
};
var getEq4 = getEq3;
var getOrd2 = getOrd;
var getUnionSemigroup4 = function(E) {
  var unionE = union4(E);
  return {
    concat: function(first3, second2) {
      return unionE(second2)(first3);
    }
  };
};
var getUnionMonoid2 = function(E) {
  return {
    concat: getUnionSemigroup4(E).concat,
    empty: []
  };
};
var getIntersectionSemigroup2 = function(E) {
  var intersectionE = intersection2(E);
  return {
    concat: function(first3, second2) {
      return intersectionE(second2)(first3);
    }
  };
};
var getDifferenceMagma2 = function(E) {
  var differenceE = difference2(E);
  return {
    concat: function(first3, second2) {
      return differenceE(second2)(first3);
    }
  };
};
var Functor5 = {
  URI: URI7,
  map: _map5
};
var flap6 = flap(Functor5);
var Pointed4 = {
  URI: URI7,
  of: of4
};
var FunctorWithIndex4 = {
  URI: URI7,
  map: _map5,
  mapWithIndex: _mapWithIndex4
};
var Apply4 = {
  URI: URI7,
  map: _map5,
  ap: _ap4
};
var apFirst5 = apFirst(Apply4);
var apSecond5 = apSecond(Apply4);
var Applicative4 = {
  URI: URI7,
  map: _map5,
  ap: _ap4,
  of: of4
};
var Chain4 = {
  URI: URI7,
  map: _map5,
  ap: _ap4,
  chain: flatMap4
};
var chainFirst5 = chainFirst(Chain4);
var Monad4 = {
  URI: URI7,
  map: _map5,
  ap: _ap4,
  of: of4,
  chain: flatMap4
};
var Unfoldable2 = {
  URI: URI7,
  unfold: unfold2
};
var Alt4 = {
  URI: URI7,
  map: _map5,
  alt: _alt4
};
var Zero2 = {
  URI: URI7,
  zero: zero2
};
var guard3 = guard(Zero2, Pointed4);
var Alternative2 = {
  URI: URI7,
  map: _map5,
  ap: _ap4,
  of: of4,
  alt: _alt4,
  zero: zero2
};
var Extend2 = {
  URI: URI7,
  map: _map5,
  extend: _extend4
};
var Compactable2 = {
  URI: URI7,
  compact: compact2,
  separate: separate2
};
var Filterable2 = {
  URI: URI7,
  map: _map5,
  compact: compact2,
  separate: separate2,
  filter: _filter2,
  filterMap: _filterMap2,
  partition: _partition2,
  partitionMap: _partitionMap2
};
var FilterableWithIndex2 = {
  URI: URI7,
  map: _map5,
  mapWithIndex: _mapWithIndex4,
  compact: compact2,
  separate: separate2,
  filter: _filter2,
  filterMap: _filterMap2,
  partition: _partition2,
  partitionMap: _partitionMap2,
  partitionMapWithIndex: _partitionMapWithIndex2,
  partitionWithIndex: _partitionWithIndex2,
  filterMapWithIndex: _filterMapWithIndex2,
  filterWithIndex: _filterWithIndex2
};
var Foldable4 = {
  URI: URI7,
  reduce: _reduce4,
  foldMap: _foldMap4,
  reduceRight: _reduceRight4
};
var FoldableWithIndex4 = {
  URI: URI7,
  reduce: _reduce4,
  foldMap: _foldMap4,
  reduceRight: _reduceRight4,
  reduceWithIndex: _reduceWithIndex4,
  foldMapWithIndex: _foldMapWithIndex4,
  reduceRightWithIndex: _reduceRightWithIndex4
};
var Traversable4 = {
  URI: URI7,
  map: _map5,
  reduce: _reduce4,
  foldMap: _foldMap4,
  reduceRight: _reduceRight4,
  traverse: _traverse4,
  sequence: sequence4
};
var TraversableWithIndex4 = {
  URI: URI7,
  map: _map5,
  mapWithIndex: _mapWithIndex4,
  reduce: _reduce4,
  foldMap: _foldMap4,
  reduceRight: _reduceRight4,
  reduceWithIndex: _reduceWithIndex4,
  foldMapWithIndex: _foldMapWithIndex4,
  reduceRightWithIndex: _reduceRightWithIndex4,
  traverse: _traverse4,
  sequence: sequence4,
  traverseWithIndex: _traverseWithIndex4
};
var _wither2 = witherDefault(Traversable4, Compactable2);
var _wilt2 = wiltDefault(Traversable4, Compactable2);
var Witherable2 = {
  URI: URI7,
  map: _map5,
  compact: compact2,
  separate: separate2,
  filter: _filter2,
  filterMap: _filterMap2,
  partition: _partition2,
  partitionMap: _partitionMap2,
  reduce: _reduce4,
  foldMap: _foldMap4,
  reduceRight: _reduceRight4,
  traverse: _traverse4,
  sequence: sequence4,
  wither: _wither2,
  wilt: _wilt2
};
var chainRecDepthFirst2 = chainRecDepthFirst;
var ChainRecDepthFirst2 = {
  URI: URI7,
  map: _map5,
  ap: _ap4,
  chain: flatMap4,
  chainRec: _chainRecDepthFirst2
};
var chainRecBreadthFirst2 = chainRecBreadthFirst;
var ChainRecBreadthFirst2 = {
  URI: URI7,
  map: _map5,
  ap: _ap4,
  chain: flatMap4,
  chainRec: _chainRecBreadthFirst2
};
var filterE3 = filterE(Witherable2);
var FromEither2 = {
  URI: URI7,
  fromEither: fromEither2
};
var fromEitherK3 = fromEitherK(FromEither2);
var unsafeInsertAt4 = unsafeInsertAt2;
var unsafeUpdateAt4 = function(i, a, as15) {
  return isNonEmpty5(as15) ? unsafeUpdateAt2(i, a, as15) : [];
};
var unsafeDeleteAt2 = function(i, as15) {
  var xs = as15.slice();
  xs.splice(i, 1);
  return xs;
};
var every2 = every;
var some3 = function(predicate) {
  return function(as15) {
    return as15.some(predicate);
  };
};
var exists2 = some3;
var intercalate5 = intercalate4;
var Do4 = of4(emptyRecord);
var bindTo5 = bindTo(Functor5);
var let_5 = let_(Functor5);
var bind5 = bind(Chain4);
var apS5 = apS(Apply4);
var chain4 = flatMap4;
var range4 = range2;
var empty4 = [];
var cons4 = cons2;
var snoc4 = snoc2;
var prependToAll4 = prependAll4;
var array = {
  URI: URI7,
  compact: compact2,
  separate: separate2,
  map: _map5,
  ap: _ap4,
  of: of4,
  chain: flatMap4,
  filter: _filter2,
  filterMap: _filterMap2,
  partition: _partition2,
  partitionMap: _partitionMap2,
  mapWithIndex: _mapWithIndex4,
  partitionMapWithIndex: _partitionMapWithIndex2,
  partitionWithIndex: _partitionWithIndex2,
  filterMapWithIndex: _filterMapWithIndex2,
  filterWithIndex: _filterWithIndex2,
  alt: _alt4,
  zero: zero2,
  unfold: unfold2,
  reduce: _reduce4,
  foldMap: _foldMap4,
  reduceRight: _reduceRight4,
  traverse: _traverse4,
  sequence: sequence4,
  reduceWithIndex: _reduceWithIndex4,
  foldMapWithIndex: _foldMapWithIndex4,
  reduceRightWithIndex: _reduceRightWithIndex4,
  traverseWithIndex: _traverseWithIndex4,
  extend: _extend4,
  wither: _wither2,
  wilt: _wilt2
};

// node_modules/fp-ts/es6/Bifunctor.js
var Bifunctor_exports = {};

// node_modules/fp-ts/es6/boolean.js
var boolean_exports = {};
__export(boolean_exports, {
  BooleanAlgebra: () => BooleanAlgebra,
  Eq: () => Eq2,
  MonoidAll: () => MonoidAll,
  MonoidAny: () => MonoidAny,
  Ord: () => Ord2,
  SemigroupAll: () => SemigroupAll,
  SemigroupAny: () => SemigroupAny,
  Show: () => Show2,
  fold: () => fold4,
  foldW: () => foldW,
  isBoolean: () => isBoolean,
  match: () => match3,
  matchW: () => matchW3
});
var isBoolean = function(u) {
  return typeof u === "boolean";
};
var matchW3 = function(onFalse, onTrue) {
  return function(value) {
    return value ? onTrue() : onFalse();
  };
};
var foldW = matchW3;
var match3 = foldW;
var fold4 = match3;
var Eq2 = {
  equals: function(first3, second2) {
    return first3 === second2;
  }
};
var BooleanAlgebra = {
  meet: function(first3, second2) {
    return first3 && second2;
  },
  join: function(first3, second2) {
    return first3 || second2;
  },
  zero: false,
  one: true,
  implies: function(first3, second2) {
    return !first3 || second2;
  },
  not: function(b) {
    return !b;
  }
};
var SemigroupAll = {
  concat: function(first3, second2) {
    return first3 && second2;
  }
};
var SemigroupAny = {
  concat: function(first3, second2) {
    return first3 || second2;
  }
};
var MonoidAll = {
  concat: SemigroupAll.concat,
  empty: true
};
var MonoidAny = {
  concat: SemigroupAny.concat,
  empty: false
};
var Ord2 = {
  equals: Eq2.equals,
  compare: function(first3, second2) {
    return first3 < second2 ? -1 : first3 > second2 ? 1 : 0;
  }
};
var Show2 = {
  show: function(b) {
    return JSON.stringify(b);
  }
};

// node_modules/fp-ts/es6/BooleanAlgebra.js
var BooleanAlgebra_exports = {};
__export(BooleanAlgebra_exports, {
  booleanAlgebraBoolean: () => booleanAlgebraBoolean,
  booleanAlgebraVoid: () => booleanAlgebraVoid,
  getDualBooleanAlgebra: () => getDualBooleanAlgebra,
  getFunctionBooleanAlgebra: () => getFunctionBooleanAlgebra,
  reverse: () => reverse8
});
var reverse8 = function(B) {
  return {
    meet: function(x, y) {
      return B.join(x, y);
    },
    join: function(x, y) {
      return B.meet(x, y);
    },
    zero: B.one,
    one: B.zero,
    implies: function(x, y) {
      return B.join(B.not(x), y);
    },
    not: B.not
  };
};
var booleanAlgebraVoid = {
  meet: function() {
    return void 0;
  },
  join: function() {
    return void 0;
  },
  zero: void 0,
  one: void 0,
  implies: function() {
    return void 0;
  },
  not: function() {
    return void 0;
  }
};
var getDualBooleanAlgebra = reverse8;
var booleanAlgebraBoolean = {
  meet: function(x, y) {
    return x && y;
  },
  join: function(x, y) {
    return x || y;
  },
  zero: false,
  one: true,
  implies: function(x, y) {
    return !x || y;
  },
  not: function(x) {
    return !x;
  }
};
var getFunctionBooleanAlgebra = getBooleanAlgebra;

// node_modules/fp-ts/es6/Bounded.js
var Bounded_exports = {};
__export(Bounded_exports, {
  boundedNumber: () => boundedNumber,
  clamp: () => clamp2,
  reverse: () => reverse9
});
var clamp2 = function(B) {
  return clamp(B)(B.bottom, B.top);
};
var reverse9 = function(B) {
  var R = reverse(B);
  return {
    equals: R.equals,
    compare: R.compare,
    top: B.bottom,
    bottom: B.top
  };
};
var boundedNumber = {
  equals: ordNumber.equals,
  compare: ordNumber.compare,
  top: Infinity,
  bottom: -Infinity
};

// node_modules/fp-ts/es6/BoundedDistributiveLattice.js
var BoundedDistributiveLattice_exports = {};
__export(BoundedDistributiveLattice_exports, {
  getMinMaxBoundedDistributiveLattice: () => getMinMaxBoundedDistributiveLattice
});

// node_modules/fp-ts/es6/DistributiveLattice.js
var DistributiveLattice_exports = {};
__export(DistributiveLattice_exports, {
  getMinMaxDistributiveLattice: () => getMinMaxDistributiveLattice
});
function getMinMaxDistributiveLattice(O) {
  return {
    meet: min(O),
    join: max(O)
  };
}

// node_modules/fp-ts/es6/BoundedDistributiveLattice.js
function getMinMaxBoundedDistributiveLattice(O) {
  var L = getMinMaxDistributiveLattice(O);
  return function(min6, max6) {
    return {
      join: L.join,
      meet: L.meet,
      zero: min6,
      one: max6
    };
  };
}

// node_modules/fp-ts/es6/BoundedJoinSemilattice.js
var BoundedJoinSemilattice_exports = {};

// node_modules/fp-ts/es6/BoundedLattice.js
var BoundedLattice_exports = {};

// node_modules/fp-ts/es6/BoundedMeetSemilattice.js
var BoundedMeetSemilattice_exports = {};

// node_modules/fp-ts/es6/Category.js
var Category_exports = {};

// node_modules/fp-ts/es6/ChainRec.js
var ChainRec_exports = {};
__export(ChainRec_exports, {
  tailRec: () => tailRec
});
var tailRec = function(startWith, f) {
  var ab = f(startWith);
  while (ab._tag === "Left") {
    ab = f(ab.left);
  }
  return ab.right;
};

// node_modules/fp-ts/es6/Choice.js
var Choice_exports = {};
__export(Choice_exports, {
  fanIn: () => fanIn,
  fanin: () => fanin,
  split: () => split,
  splitChoice: () => splitChoice
});
function split(P, C) {
  return function(pab, pcd) {
    return C.compose(P.right(pcd), P.left(pab));
  };
}
function fanIn(P, C) {
  var splitPC = split(P, C);
  return function(pac, pbc) {
    return C.compose(P.promap(C.id(), function(cc) {
      return cc._tag === "Left" ? cc.left : cc.right;
    }, identity), splitPC(pac, pbc));
  };
}
function splitChoice(F) {
  return split(F, F);
}
function fanin(F) {
  return fanIn(F, F);
}

// node_modules/fp-ts/es6/Comonad.js
var Comonad_exports = {};

// node_modules/fp-ts/es6/Compactable.js
var Compactable_exports = {};
__export(Compactable_exports, {
  compact: () => compact4,
  getCompactableComposition: () => getCompactableComposition,
  separate: () => separate4
});

// node_modules/fp-ts/es6/Option.js
var Option_exports = {};
__export(Option_exports, {
  Alt: () => Alt5,
  Alternative: () => Alternative3,
  ApT: () => ApT,
  Applicative: () => Applicative5,
  Apply: () => Apply5,
  Chain: () => Chain5,
  Compactable: () => Compactable3,
  Do: () => Do5,
  Extend: () => Extend3,
  Filterable: () => Filterable3,
  Foldable: () => Foldable5,
  FromEither: () => FromEither3,
  Functor: () => Functor6,
  Monad: () => Monad5,
  MonadThrow: () => MonadThrow,
  Pointed: () => Pointed5,
  Traversable: () => Traversable5,
  URI: () => URI9,
  Witherable: () => Witherable3,
  Zero: () => Zero3,
  alt: () => alt5,
  altW: () => altW5,
  ap: () => ap6,
  apFirst: () => apFirst6,
  apS: () => apS6,
  apSecond: () => apSecond6,
  as: () => as2,
  asUnit: () => asUnit2,
  bind: () => bind6,
  bindTo: () => bindTo6,
  chain: () => chain5,
  chainEitherK: () => chainEitherK2,
  chainFirst: () => chainFirst6,
  chainFirstEitherK: () => chainFirstEitherK2,
  chainNullableK: () => chainNullableK,
  compact: () => compact3,
  duplicate: () => duplicate5,
  elem: () => elem3,
  exists: () => exists3,
  extend: () => extend5,
  filter: () => filter5,
  filterMap: () => filterMap3,
  flap: () => flap7,
  flatMap: () => flatMap5,
  flatten: () => flatten5,
  fold: () => fold5,
  foldMap: () => foldMap5,
  foldW: () => foldW2,
  fromEither: () => fromEither3,
  fromEitherK: () => fromEitherK4,
  fromNullable: () => fromNullable,
  fromNullableK: () => fromNullableK,
  fromPredicate: () => fromPredicate4,
  getApplyMonoid: () => getApplyMonoid,
  getApplySemigroup: () => getApplySemigroup2,
  getEq: () => getEq5,
  getFirstMonoid: () => getFirstMonoid,
  getLastMonoid: () => getLastMonoid,
  getLeft: () => getLeft,
  getMonoid: () => getMonoid6,
  getOrElse: () => getOrElse,
  getOrElseW: () => getOrElseW,
  getOrd: () => getOrd3,
  getRefinement: () => getRefinement,
  getRight: () => getRight,
  getShow: () => getShow5,
  guard: () => guard4,
  isNone: () => isNone2,
  isSome: () => isSome2,
  let: () => let_6,
  map: () => map7,
  mapNullable: () => mapNullable,
  match: () => match4,
  matchW: () => matchW4,
  none: () => none2,
  of: () => of5,
  option: () => option,
  orElse: () => orElse,
  partition: () => partition3,
  partitionMap: () => partitionMap3,
  reduce: () => reduce5,
  reduceRight: () => reduceRight5,
  separate: () => separate3,
  sequence: () => sequence5,
  sequenceArray: () => sequenceArray,
  some: () => some4,
  tap: () => tap2,
  tapEither: () => tapEither2,
  throwError: () => throwError,
  toNullable: () => toNullable,
  toUndefined: () => toUndefined,
  traverse: () => traverse5,
  traverseArray: () => traverseArray,
  traverseArrayWithIndex: () => traverseArrayWithIndex,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex,
  tryCatch: () => tryCatch,
  tryCatchK: () => tryCatchK,
  wilt: () => wilt3,
  wither: () => wither3,
  zero: () => zero3
});

// node_modules/fp-ts/es6/Predicate.js
var Predicate_exports = {};
__export(Predicate_exports, {
  Contravariant: () => Contravariant3,
  URI: () => URI8,
  and: () => and,
  contramap: () => contramap3,
  getMonoidAll: () => getMonoidAll,
  getMonoidAny: () => getMonoidAny,
  getSemigroupAll: () => getSemigroupAll,
  getSemigroupAny: () => getSemigroupAny,
  not: () => not2,
  or: () => or
});
var contramap_3 = function(predicate, f) {
  return pipe(predicate, contramap3(f));
};
var contramap3 = function(f) {
  return function(predicate) {
    return flow(f, predicate);
  };
};
var URI8 = "Predicate";
var getSemigroupAny = function() {
  return {
    concat: function(first3, second2) {
      return pipe(first3, or(second2));
    }
  };
};
var getMonoidAny = function() {
  return {
    concat: getSemigroupAny().concat,
    empty: constFalse
  };
};
var getSemigroupAll = function() {
  return {
    concat: function(first3, second2) {
      return pipe(first3, and(second2));
    }
  };
};
var getMonoidAll = function() {
  return {
    concat: getSemigroupAll().concat,
    empty: constTrue
  };
};
var Contravariant3 = {
  URI: URI8,
  contramap: contramap_3
};
var not2 = function(predicate) {
  return function(a) {
    return !predicate(a);
  };
};
var or = function(second2) {
  return function(first3) {
    return function(a) {
      return first3(a) || second2(a);
    };
  };
};
var and = function(second2) {
  return function(first3) {
    return function(a) {
      return first3(a) && second2(a);
    };
  };
};

// node_modules/fp-ts/es6/Option.js
var none2 = none;
var some4 = some;
function fromPredicate4(predicate) {
  return function(a) {
    return predicate(a) ? some4(a) : none2;
  };
}
var getLeft = function(ma) {
  return ma._tag === "Right" ? none2 : some4(ma.left);
};
var getRight = function(ma) {
  return ma._tag === "Left" ? none2 : some4(ma.right);
};
var _map6 = function(fa, f) {
  return pipe(fa, map7(f));
};
var _ap5 = function(fab, fa) {
  return pipe(fab, ap6(fa));
};
var _reduce5 = function(fa, b, f) {
  return pipe(fa, reduce5(b, f));
};
var _foldMap5 = function(M) {
  var foldMapM = foldMap5(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight5 = function(fa, b, f) {
  return pipe(fa, reduceRight5(b, f));
};
var _traverse5 = function(F) {
  var traverseF = traverse5(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _alt5 = function(fa, that) {
  return pipe(fa, alt5(that));
};
var _filter3 = function(fa, predicate) {
  return pipe(fa, filter5(predicate));
};
var _filterMap3 = function(fa, f) {
  return pipe(fa, filterMap3(f));
};
var _extend5 = function(wa, f) {
  return pipe(wa, extend5(f));
};
var _partition3 = function(fa, predicate) {
  return pipe(fa, partition3(predicate));
};
var _partitionMap3 = function(fa, f) {
  return pipe(fa, partitionMap3(f));
};
var URI9 = "Option";
var getShow5 = function(S) {
  return {
    show: function(ma) {
      return isNone2(ma) ? "none" : "some(".concat(S.show(ma.value), ")");
    }
  };
};
var getEq5 = function(E) {
  return {
    equals: function(x, y) {
      return x === y || (isNone2(x) ? isNone2(y) : isNone2(y) ? false : E.equals(x.value, y.value));
    }
  };
};
var getOrd3 = function(O) {
  return {
    equals: getEq5(O).equals,
    compare: function(x, y) {
      return x === y ? 0 : isSome2(x) ? isSome2(y) ? O.compare(x.value, y.value) : 1 : -1;
    }
  };
};
var getMonoid6 = function(S) {
  return {
    concat: function(x, y) {
      return isNone2(x) ? y : isNone2(y) ? x : some4(S.concat(x.value, y.value));
    },
    empty: none2
  };
};
var map7 = function(f) {
  return function(fa) {
    return isNone2(fa) ? none2 : some4(f(fa.value));
  };
};
var Functor6 = {
  URI: URI9,
  map: _map6
};
var as2 = dual(2, as(Functor6));
var asUnit2 = asUnit(Functor6);
var of5 = some4;
var Pointed5 = {
  URI: URI9,
  of: of5
};
var ap6 = function(fa) {
  return function(fab) {
    return isNone2(fab) ? none2 : isNone2(fa) ? none2 : some4(fab.value(fa.value));
  };
};
var Apply5 = {
  URI: URI9,
  map: _map6,
  ap: _ap5
};
var Applicative5 = {
  URI: URI9,
  map: _map6,
  ap: _ap5,
  of: of5
};
var flatMap5 = dual(2, function(ma, f) {
  return isNone2(ma) ? none2 : f(ma.value);
});
var Chain5 = {
  URI: URI9,
  map: _map6,
  ap: _ap5,
  chain: flatMap5
};
var Monad5 = {
  URI: URI9,
  map: _map6,
  ap: _ap5,
  of: of5,
  chain: flatMap5
};
var reduce5 = function(b, f) {
  return function(fa) {
    return isNone2(fa) ? b : f(b, fa.value);
  };
};
var foldMap5 = function(M) {
  return function(f) {
    return function(fa) {
      return isNone2(fa) ? M.empty : f(fa.value);
    };
  };
};
var reduceRight5 = function(b, f) {
  return function(fa) {
    return isNone2(fa) ? b : f(fa.value, b);
  };
};
var Foldable5 = {
  URI: URI9,
  reduce: _reduce5,
  foldMap: _foldMap5,
  reduceRight: _reduceRight5
};
var orElse = dual(2, function(self, that) {
  return isNone2(self) ? that() : self;
});
var altW5 = orElse;
var alt5 = orElse;
var Alt5 = {
  URI: URI9,
  map: _map6,
  alt: _alt5
};
var zero3 = function() {
  return none2;
};
var Zero3 = {
  URI: URI9,
  zero: zero3
};
var guard4 = guard(Zero3, Pointed5);
var Alternative3 = {
  URI: URI9,
  map: _map6,
  ap: _ap5,
  of: of5,
  alt: _alt5,
  zero: zero3
};
var extend5 = function(f) {
  return function(wa) {
    return isNone2(wa) ? none2 : some4(f(wa));
  };
};
var Extend3 = {
  URI: URI9,
  map: _map6,
  extend: _extend5
};
var compact3 = flatMap5(identity);
var defaultSeparated = separated(none2, none2);
var separate3 = function(ma) {
  return isNone2(ma) ? defaultSeparated : separated(getLeft(ma.value), getRight(ma.value));
};
var Compactable3 = {
  URI: URI9,
  compact: compact3,
  separate: separate3
};
var filter5 = function(predicate) {
  return function(fa) {
    return isNone2(fa) ? none2 : predicate(fa.value) ? fa : none2;
  };
};
var filterMap3 = function(f) {
  return function(fa) {
    return isNone2(fa) ? none2 : f(fa.value);
  };
};
var partition3 = function(predicate) {
  return function(fa) {
    return separated(_filter3(fa, not2(predicate)), _filter3(fa, predicate));
  };
};
var partitionMap3 = function(f) {
  return flow(map7(f), separate3);
};
var Filterable3 = {
  URI: URI9,
  map: _map6,
  compact: compact3,
  separate: separate3,
  filter: _filter3,
  filterMap: _filterMap3,
  partition: _partition3,
  partitionMap: _partitionMap3
};
var traverse5 = function(F) {
  return function(f) {
    return function(ta) {
      return isNone2(ta) ? F.of(none2) : F.map(f(ta.value), some4);
    };
  };
};
var sequence5 = function(F) {
  return function(ta) {
    return isNone2(ta) ? F.of(none2) : F.map(ta.value, some4);
  };
};
var Traversable5 = {
  URI: URI9,
  map: _map6,
  reduce: _reduce5,
  foldMap: _foldMap5,
  reduceRight: _reduceRight5,
  traverse: _traverse5,
  sequence: sequence5
};
var _wither3 = witherDefault(Traversable5, Compactable3);
var _wilt3 = wiltDefault(Traversable5, Compactable3);
var wither3 = function(F) {
  var _witherF = _wither3(F);
  return function(f) {
    return function(fa) {
      return _witherF(fa, f);
    };
  };
};
var wilt3 = function(F) {
  var _wiltF = _wilt3(F);
  return function(f) {
    return function(fa) {
      return _wiltF(fa, f);
    };
  };
};
var Witherable3 = {
  URI: URI9,
  map: _map6,
  reduce: _reduce5,
  foldMap: _foldMap5,
  reduceRight: _reduceRight5,
  traverse: _traverse5,
  sequence: sequence5,
  compact: compact3,
  separate: separate3,
  filter: _filter3,
  filterMap: _filterMap3,
  partition: _partition3,
  partitionMap: _partitionMap3,
  wither: _wither3,
  wilt: _wilt3
};
var throwError = function() {
  return none2;
};
var MonadThrow = {
  URI: URI9,
  map: _map6,
  ap: _ap5,
  of: of5,
  chain: flatMap5,
  throwError
};
var fromEither3 = getRight;
var FromEither3 = {
  URI: URI9,
  fromEither: fromEither3
};
var isSome2 = isSome;
var isNone2 = function(fa) {
  return fa._tag === "None";
};
var matchW4 = function(onNone, onSome) {
  return function(ma) {
    return isNone2(ma) ? onNone() : onSome(ma.value);
  };
};
var foldW2 = matchW4;
var match4 = matchW4;
var fold5 = match4;
var getOrElseW = function(onNone) {
  return function(ma) {
    return isNone2(ma) ? onNone() : ma.value;
  };
};
var getOrElse = getOrElseW;
var flap7 = flap(Functor6);
var apFirst6 = apFirst(Apply5);
var apSecond6 = apSecond(Apply5);
var flatten5 = compact3;
var tap2 = dual(2, tap(Chain5));
var tapEither2 = dual(2, tapEither(FromEither3, Chain5));
var duplicate5 = extend5(identity);
var fromEitherK4 = fromEitherK(FromEither3);
var chainEitherK2 = chainEitherK(FromEither3, Chain5);
var chainFirstEitherK2 = tapEither2;
var fromNullable = function(a) {
  return a == null ? none2 : some4(a);
};
var tryCatch = function(f) {
  try {
    return some4(f());
  } catch (e) {
    return none2;
  }
};
var tryCatchK = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return tryCatch(function() {
      return f.apply(void 0, a);
    });
  };
};
var fromNullableK = function(f) {
  return flow(f, fromNullable);
};
var chainNullableK = function(f) {
  return function(ma) {
    return isNone2(ma) ? none2 : fromNullable(f(ma.value));
  };
};
var toNullable = match4(constNull, identity);
var toUndefined = match4(constUndefined, identity);
function elem3(E) {
  return function(a, ma) {
    if (ma === void 0) {
      var elemE_1 = elem3(E);
      return function(ma2) {
        return elemE_1(a, ma2);
      };
    }
    return isNone2(ma) ? false : E.equals(a, ma.value);
  };
}
var exists3 = function(predicate) {
  return function(ma) {
    return isNone2(ma) ? false : predicate(ma.value);
  };
};
var Do5 = of5(emptyRecord);
var bindTo6 = bindTo(Functor6);
var let_6 = let_(Functor6);
var bind6 = bind(Chain5);
var apS6 = apS(Apply5);
var ApT = of5(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex = function(f) {
  return function(as15) {
    var o = f(0, head(as15));
    if (isNone2(o)) {
      return none2;
    }
    var out = [o.value];
    for (var i = 1; i < as15.length; i++) {
      var o_1 = f(i, as15[i]);
      if (isNone2(o_1)) {
        return none2;
      }
      out.push(o_1.value);
    }
    return some4(out);
  };
};
var traverseReadonlyArrayWithIndex = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT;
  };
};
var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;
var traverseArray = function(f) {
  return traverseReadonlyArrayWithIndex(function(_, a) {
    return f(a);
  });
};
var sequenceArray = traverseArray(identity);
var chain5 = flatMap5;
var chainFirst6 = tap2;
function getRefinement(getOption) {
  return function(a) {
    return isSome2(getOption(a));
  };
}
var mapNullable = chainNullableK;
var option = {
  URI: URI9,
  map: _map6,
  of: of5,
  ap: _ap5,
  chain: flatMap5,
  reduce: _reduce5,
  foldMap: _foldMap5,
  reduceRight: _reduceRight5,
  traverse: _traverse5,
  sequence: sequence5,
  zero: zero3,
  alt: _alt5,
  extend: _extend5,
  compact: compact3,
  separate: separate3,
  filter: _filter3,
  filterMap: _filterMap3,
  partition: _partition3,
  partitionMap: _partitionMap3,
  wither: _wither3,
  wilt: _wilt3,
  throwError
};
var getApplySemigroup2 = getApplySemigroup(Apply5);
var getApplyMonoid = getApplicativeMonoid(Applicative5);
var getFirstMonoid = function() {
  return getMonoid6(first());
};
var getLastMonoid = function() {
  return getMonoid6(last());
};

// node_modules/fp-ts/es6/Compactable.js
function compact4(F, G) {
  return function(fga) {
    return F.map(fga, G.compact);
  };
}
function separate4(F, C, G) {
  var _compact = compact4(F, C);
  var _map35 = map(F, G);
  return function(fge) {
    return separated(_compact(pipe(fge, _map35(getLeft))), _compact(pipe(fge, _map35(getRight))));
  };
}
function getCompactableComposition(F, G) {
  var map44 = getFunctorComposition(F, G).map;
  return {
    map: map44,
    compact: compact4(F, G),
    separate: separate4(F, G, G)
  };
}

// node_modules/fp-ts/es6/Console.js
var Console_exports = {};
__export(Console_exports, {
  error: () => error,
  info: () => info,
  log: () => log,
  warn: () => warn
});
var log = function(a) {
  return function() {
    return console.log(a);
  };
};
var warn = function(a) {
  return function() {
    return console.warn(a);
  };
};
var error = function(a) {
  return function() {
    return console.error(a);
  };
};
var info = function(a) {
  return function() {
    return console.info(a);
  };
};

// node_modules/fp-ts/es6/Const.js
var Const_exports = {};
__export(Const_exports, {
  Bifunctor: () => Bifunctor2,
  Contravariant: () => Contravariant4,
  Functor: () => Functor7,
  URI: () => URI10,
  bimap: () => bimap2,
  const_: () => const_,
  contramap: () => contramap4,
  flap: () => flap8,
  getApplicative: () => getApplicative,
  getApply: () => getApply,
  getBooleanAlgebra: () => getBooleanAlgebra2,
  getBounded: () => getBounded,
  getEq: () => getEq6,
  getHeytingAlgebra: () => getHeytingAlgebra,
  getMonoid: () => getMonoid7,
  getOrd: () => getOrd4,
  getRing: () => getRing2,
  getSemigroup: () => getSemigroup8,
  getSemiring: () => getSemiring2,
  getShow: () => getShow6,
  make: () => make,
  map: () => map8,
  mapLeft: () => mapLeft2
});
var make = unsafeCoerce;
function getShow6(S) {
  return {
    show: function(c) {
      return "make(".concat(S.show(c), ")");
    }
  };
}
var getEq6 = identity;
var getOrd4 = identity;
var getBounded = identity;
var getSemigroup8 = identity;
var getMonoid7 = identity;
var getSemiring2 = identity;
var getRing2 = identity;
var getHeytingAlgebra = identity;
var getBooleanAlgebra2 = identity;
function getApply(S) {
  return {
    URI: URI10,
    _E: void 0,
    map: _map7,
    ap: function(fab, fa) {
      return make(S.concat(fab, fa));
    }
  };
}
function getApplicative(M) {
  var A = getApply(M);
  return {
    URI: URI10,
    _E: void 0,
    map: A.map,
    ap: A.ap,
    of: function() {
      return make(M.empty);
    }
  };
}
var _contramap = function(fa, f) {
  return pipe(fa, contramap4(f));
};
var _map7 = function(fa, f) {
  return pipe(fa, map8(f));
};
var _bimap2 = function(fa, f, g) {
  return pipe(fa, bimap2(f, g));
};
var _mapLeft2 = function(fa, f) {
  return pipe(fa, mapLeft2(f));
};
var contramap4 = function() {
  return unsafeCoerce;
};
var map8 = function() {
  return unsafeCoerce;
};
var bimap2 = function(f) {
  return function(fa) {
    return make(f(fa));
  };
};
var mapLeft2 = function(f) {
  return function(fa) {
    return make(f(fa));
  };
};
var URI10 = "Const";
var Functor7 = {
  URI: URI10,
  map: _map7
};
var flap8 = flap(Functor7);
var Contravariant4 = {
  URI: URI10,
  contramap: _contramap
};
var Bifunctor2 = {
  URI: URI10,
  bimap: _bimap2,
  mapLeft: _mapLeft2
};
var const_ = {
  URI: URI10,
  map: _map7,
  contramap: _contramap,
  bimap: _bimap2,
  mapLeft: _mapLeft2
};

// node_modules/fp-ts/es6/Contravariant.js
var Contravariant_exports = {};

// node_modules/fp-ts/es6/Date.js
var Date_exports = {};
__export(Date_exports, {
  Eq: () => Eq3,
  Ord: () => Ord3,
  create: () => create,
  eqDate: () => eqDate2,
  eqMonth: () => eqMonth,
  eqYear: () => eqYear,
  now: () => now
});
var Eq3 = {
  equals: function(first3, second2) {
    return first3.valueOf() === second2.valueOf();
  }
};
var eqDate2 = {
  equals: function(x, y) {
    return x.getDate() === y.getDate();
  }
};
var eqMonth = {
  equals: function(x, y) {
    return x.getMonth() === y.getMonth();
  }
};
var eqYear = {
  equals: function(x, y) {
    return x.getFullYear() === y.getFullYear();
  }
};
var Ord3 = pipe(
  Ord,
  contramap2(function(date) {
    return date.valueOf();
  })
);
var create = function() {
  return /* @__PURE__ */ new Date();
};
var now = function() {
  return (/* @__PURE__ */ new Date()).getTime();
};

// node_modules/fp-ts/es6/Either.js
var Either_exports = {};
__export(Either_exports, {
  Alt: () => Alt6,
  ApT: () => ApT2,
  Applicative: () => Applicative6,
  Apply: () => Apply6,
  Bifunctor: () => Bifunctor3,
  Chain: () => Chain6,
  ChainRec: () => ChainRec,
  Do: () => Do6,
  Extend: () => Extend4,
  Foldable: () => Foldable6,
  FromEither: () => FromEither4,
  Functor: () => Functor8,
  Monad: () => Monad6,
  MonadThrow: () => MonadThrow2,
  Pointed: () => Pointed6,
  Traversable: () => Traversable6,
  URI: () => URI11,
  alt: () => alt6,
  altW: () => altW6,
  ap: () => ap7,
  apFirst: () => apFirst7,
  apFirstW: () => apFirstW,
  apS: () => apS7,
  apSW: () => apSW,
  apSecond: () => apSecond7,
  apSecondW: () => apSecondW,
  apW: () => apW,
  as: () => as3,
  asUnit: () => asUnit3,
  bimap: () => bimap3,
  bind: () => bind7,
  bindTo: () => bindTo7,
  bindW: () => bindW,
  chain: () => chain6,
  chainFirst: () => chainFirst7,
  chainFirstW: () => chainFirstW,
  chainNullableK: () => chainNullableK2,
  chainOptionK: () => chainOptionK2,
  chainOptionKW: () => chainOptionKW,
  chainW: () => chainW,
  duplicate: () => duplicate6,
  either: () => either,
  elem: () => elem4,
  exists: () => exists4,
  extend: () => extend6,
  filterOrElse: () => filterOrElse2,
  filterOrElseW: () => filterOrElseW,
  flap: () => flap9,
  flatMap: () => flatMap6,
  flatMapNullable: () => flatMapNullable2,
  flatMapOption: () => flatMapOption2,
  flatten: () => flatten6,
  flattenW: () => flattenW,
  fold: () => fold6,
  foldMap: () => foldMap6,
  foldW: () => foldW3,
  fromNullable: () => fromNullable2,
  fromNullableK: () => fromNullableK2,
  fromOption: () => fromOption4,
  fromOptionK: () => fromOptionK4,
  fromPredicate: () => fromPredicate5,
  getAltValidation: () => getAltValidation,
  getApplicativeValidation: () => getApplicativeValidation,
  getApplyMonoid: () => getApplyMonoid2,
  getApplySemigroup: () => getApplySemigroup3,
  getCompactable: () => getCompactable,
  getEq: () => getEq7,
  getFilterable: () => getFilterable,
  getOrElse: () => getOrElse2,
  getOrElseW: () => getOrElseW2,
  getSemigroup: () => getSemigroup9,
  getShow: () => getShow7,
  getValidation: () => getValidation,
  getValidationMonoid: () => getValidationMonoid,
  getValidationSemigroup: () => getValidationSemigroup,
  getWitherable: () => getWitherable,
  isLeft: () => isLeft2,
  isRight: () => isRight2,
  left: () => left3,
  let: () => let_7,
  liftNullable: () => liftNullable2,
  liftOption: () => liftOption2,
  map: () => map9,
  mapLeft: () => mapLeft3,
  match: () => match5,
  matchW: () => matchW5,
  of: () => of6,
  orElse: () => orElse2,
  orElseW: () => orElseW,
  parseJSON: () => parseJSON,
  reduce: () => reduce6,
  reduceRight: () => reduceRight6,
  right: () => right3,
  sequence: () => sequence6,
  sequenceArray: () => sequenceArray2,
  stringifyJSON: () => stringifyJSON,
  swap: () => swap,
  tap: () => tap3,
  throwError: () => throwError2,
  toError: () => toError,
  toUnion: () => toUnion,
  traverse: () => traverse6,
  traverseArray: () => traverseArray2,
  traverseArrayWithIndex: () => traverseArrayWithIndex2,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex2,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex2,
  tryCatch: () => tryCatch2,
  tryCatchK: () => tryCatchK2
});
var left3 = left;
var right3 = right;
var flatMap6 = dual(2, function(ma, f) {
  return isLeft2(ma) ? ma : f(ma.right);
});
var _map8 = function(fa, f) {
  return pipe(fa, map9(f));
};
var _ap6 = function(fab, fa) {
  return pipe(fab, ap7(fa));
};
var _reduce6 = function(fa, b, f) {
  return pipe(fa, reduce6(b, f));
};
var _foldMap6 = function(M) {
  return function(fa, f) {
    var foldMapM = foldMap6(M);
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight6 = function(fa, b, f) {
  return pipe(fa, reduceRight6(b, f));
};
var _traverse6 = function(F) {
  var traverseF = traverse6(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _bimap3 = function(fa, f, g) {
  return pipe(fa, bimap3(f, g));
};
var _mapLeft3 = function(fa, f) {
  return pipe(fa, mapLeft3(f));
};
var _alt6 = function(fa, that) {
  return pipe(fa, alt6(that));
};
var _extend6 = function(wa, f) {
  return pipe(wa, extend6(f));
};
var _chainRec = function(a, f) {
  return tailRec(f(a), function(e) {
    return isLeft2(e) ? right3(left3(e.left)) : isLeft2(e.right) ? left3(f(e.right.left)) : right3(right3(e.right.right));
  });
};
var URI11 = "Either";
var getShow7 = function(SE, SA) {
  return {
    show: function(ma) {
      return isLeft2(ma) ? "left(".concat(SE.show(ma.left), ")") : "right(".concat(SA.show(ma.right), ")");
    }
  };
};
var getEq7 = function(EL, EA) {
  return {
    equals: function(x, y) {
      return x === y || (isLeft2(x) ? isLeft2(y) && EL.equals(x.left, y.left) : isRight2(y) && EA.equals(x.right, y.right));
    }
  };
};
var getSemigroup9 = function(S) {
  return {
    concat: function(x, y) {
      return isLeft2(y) ? x : isLeft2(x) ? y : right3(S.concat(x.right, y.right));
    }
  };
};
var getCompactable = function(M) {
  var empty12 = left3(M.empty);
  return {
    URI: URI11,
    _E: void 0,
    compact: function(ma) {
      return isLeft2(ma) ? ma : ma.right._tag === "None" ? empty12 : right3(ma.right.value);
    },
    separate: function(ma) {
      return isLeft2(ma) ? separated(ma, ma) : isLeft2(ma.right) ? separated(right3(ma.right.left), empty12) : separated(empty12, right3(ma.right.right));
    }
  };
};
var getFilterable = function(M) {
  var empty12 = left3(M.empty);
  var _a = getCompactable(M), compact13 = _a.compact, separate13 = _a.separate;
  var filter16 = function(ma, predicate) {
    return isLeft2(ma) ? ma : predicate(ma.right) ? ma : empty12;
  };
  var partition14 = function(ma, p) {
    return isLeft2(ma) ? separated(ma, ma) : p(ma.right) ? separated(empty12, right3(ma.right)) : separated(right3(ma.right), empty12);
  };
  return {
    URI: URI11,
    _E: void 0,
    map: _map8,
    compact: compact13,
    separate: separate13,
    filter: filter16,
    filterMap: function(ma, f) {
      if (isLeft2(ma)) {
        return ma;
      }
      var ob = f(ma.right);
      return ob._tag === "None" ? empty12 : right3(ob.value);
    },
    partition: partition14,
    partitionMap: function(ma, f) {
      if (isLeft2(ma)) {
        return separated(ma, ma);
      }
      var e = f(ma.right);
      return isLeft2(e) ? separated(right3(e.left), empty12) : separated(empty12, right3(e.right));
    }
  };
};
var getWitherable = function(M) {
  var F_ = getFilterable(M);
  var C = getCompactable(M);
  return {
    URI: URI11,
    _E: void 0,
    map: _map8,
    compact: F_.compact,
    separate: F_.separate,
    filter: F_.filter,
    filterMap: F_.filterMap,
    partition: F_.partition,
    partitionMap: F_.partitionMap,
    traverse: _traverse6,
    sequence: sequence6,
    reduce: _reduce6,
    foldMap: _foldMap6,
    reduceRight: _reduceRight6,
    wither: witherDefault(Traversable6, C),
    wilt: wiltDefault(Traversable6, C)
  };
};
var getApplicativeValidation = function(SE) {
  return {
    URI: URI11,
    _E: void 0,
    map: _map8,
    ap: function(fab, fa) {
      return isLeft2(fab) ? isLeft2(fa) ? left3(SE.concat(fab.left, fa.left)) : fab : isLeft2(fa) ? fa : right3(fab.right(fa.right));
    },
    of: of6
  };
};
var getAltValidation = function(SE) {
  return {
    URI: URI11,
    _E: void 0,
    map: _map8,
    alt: function(me, that) {
      if (isRight2(me)) {
        return me;
      }
      var ea = that();
      return isLeft2(ea) ? left3(SE.concat(me.left, ea.left)) : ea;
    }
  };
};
var map9 = function(f) {
  return function(fa) {
    return isLeft2(fa) ? fa : right3(f(fa.right));
  };
};
var Functor8 = {
  URI: URI11,
  map: _map8
};
var as3 = dual(2, as(Functor8));
var asUnit3 = asUnit(Functor8);
var of6 = right3;
var Pointed6 = {
  URI: URI11,
  of: of6
};
var apW = function(fa) {
  return function(fab) {
    return isLeft2(fab) ? fab : isLeft2(fa) ? fa : right3(fab.right(fa.right));
  };
};
var ap7 = apW;
var Apply6 = {
  URI: URI11,
  map: _map8,
  ap: _ap6
};
var Applicative6 = {
  URI: URI11,
  map: _map8,
  ap: _ap6,
  of: of6
};
var Chain6 = {
  URI: URI11,
  map: _map8,
  ap: _ap6,
  chain: flatMap6
};
var Monad6 = {
  URI: URI11,
  map: _map8,
  ap: _ap6,
  of: of6,
  chain: flatMap6
};
var reduce6 = function(b, f) {
  return function(fa) {
    return isLeft2(fa) ? b : f(b, fa.right);
  };
};
var foldMap6 = function(M) {
  return function(f) {
    return function(fa) {
      return isLeft2(fa) ? M.empty : f(fa.right);
    };
  };
};
var reduceRight6 = function(b, f) {
  return function(fa) {
    return isLeft2(fa) ? b : f(fa.right, b);
  };
};
var Foldable6 = {
  URI: URI11,
  reduce: _reduce6,
  foldMap: _foldMap6,
  reduceRight: _reduceRight6
};
var traverse6 = function(F) {
  return function(f) {
    return function(ta) {
      return isLeft2(ta) ? F.of(left3(ta.left)) : F.map(f(ta.right), right3);
    };
  };
};
var sequence6 = function(F) {
  return function(ma) {
    return isLeft2(ma) ? F.of(left3(ma.left)) : F.map(ma.right, right3);
  };
};
var Traversable6 = {
  URI: URI11,
  map: _map8,
  reduce: _reduce6,
  foldMap: _foldMap6,
  reduceRight: _reduceRight6,
  traverse: _traverse6,
  sequence: sequence6
};
var bimap3 = function(f, g) {
  return function(fa) {
    return isLeft2(fa) ? left3(f(fa.left)) : right3(g(fa.right));
  };
};
var mapLeft3 = function(f) {
  return function(fa) {
    return isLeft2(fa) ? left3(f(fa.left)) : fa;
  };
};
var Bifunctor3 = {
  URI: URI11,
  bimap: _bimap3,
  mapLeft: _mapLeft3
};
var altW6 = function(that) {
  return function(fa) {
    return isLeft2(fa) ? that() : fa;
  };
};
var alt6 = altW6;
var Alt6 = {
  URI: URI11,
  map: _map8,
  alt: _alt6
};
var extend6 = function(f) {
  return function(wa) {
    return isLeft2(wa) ? wa : right3(f(wa));
  };
};
var Extend4 = {
  URI: URI11,
  map: _map8,
  extend: _extend6
};
var ChainRec = {
  URI: URI11,
  map: _map8,
  ap: _ap6,
  chain: flatMap6,
  chainRec: _chainRec
};
var throwError2 = left3;
var MonadThrow2 = {
  URI: URI11,
  map: _map8,
  ap: _ap6,
  of: of6,
  chain: flatMap6,
  throwError: throwError2
};
var FromEither4 = {
  URI: URI11,
  fromEither: identity
};
var fromPredicate5 = fromPredicate(FromEither4);
var fromOption4 = fromOption(FromEither4);
var isLeft2 = isLeft;
var isRight2 = isRight;
var matchW5 = function(onLeft, onRight) {
  return function(ma) {
    return isLeft2(ma) ? onLeft(ma.left) : onRight(ma.right);
  };
};
var foldW3 = matchW5;
var match5 = matchW5;
var fold6 = match5;
var getOrElseW2 = function(onLeft) {
  return function(ma) {
    return isLeft2(ma) ? onLeft(ma.left) : ma.right;
  };
};
var getOrElse2 = getOrElseW2;
var flap9 = flap(Functor8);
var apFirst7 = apFirst(Apply6);
var apFirstW = apFirst7;
var apSecond7 = apSecond(Apply6);
var apSecondW = apSecond7;
var tap3 = dual(2, tap(Chain6));
var flattenW = flatMap6(identity);
var flatten6 = flattenW;
var duplicate6 = extend6(identity);
var fromOptionK4 = fromOptionK(FromEither4);
var chainOptionK2 = chainOptionK(FromEither4, Chain6);
var chainOptionKW = chainOptionK2;
var _FromEither = {
  fromEither: FromEither4.fromEither
};
var liftNullable2 = liftNullable(_FromEither);
var liftOption2 = liftOption(_FromEither);
var _FlatMap = {
  flatMap: flatMap6
};
var flatMapNullable2 = flatMapNullable(_FromEither, _FlatMap);
var flatMapOption2 = flatMapOption(_FromEither, _FlatMap);
var filterOrElse2 = filterOrElse(FromEither4, Chain6);
var filterOrElseW = filterOrElse2;
var swap = function(ma) {
  return isLeft2(ma) ? right3(ma.left) : left3(ma.right);
};
var orElseW = function(onLeft) {
  return function(ma) {
    return isLeft2(ma) ? onLeft(ma.left) : ma;
  };
};
var orElse2 = orElseW;
var fromNullable2 = function(e) {
  return function(a) {
    return a == null ? left3(e) : right3(a);
  };
};
var tryCatch2 = function(f, onThrow) {
  try {
    return right3(f());
  } catch (e) {
    return left3(onThrow(e));
  }
};
var tryCatchK2 = function(f, onThrow) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return tryCatch2(function() {
      return f.apply(void 0, a);
    }, onThrow);
  };
};
var fromNullableK2 = function(e) {
  var from = fromNullable2(e);
  return function(f) {
    return flow(f, from);
  };
};
var chainNullableK2 = function(e) {
  var from = fromNullableK2(e);
  return function(f) {
    return flatMap6(from(f));
  };
};
var toUnion = foldW3(identity, identity);
function toError(e) {
  try {
    return e instanceof Error ? e : new Error(String(e));
  } catch (error2) {
    return new Error();
  }
}
function elem4(E) {
  return function(a, ma) {
    if (ma === void 0) {
      var elemE_1 = elem4(E);
      return function(ma2) {
        return elemE_1(a, ma2);
      };
    }
    return isLeft2(ma) ? false : E.equals(a, ma.right);
  };
}
var exists4 = function(predicate) {
  return function(ma) {
    return isLeft2(ma) ? false : predicate(ma.right);
  };
};
var Do6 = of6(emptyRecord);
var bindTo7 = bindTo(Functor8);
var let_7 = let_(Functor8);
var bind7 = bind(Chain6);
var bindW = bind7;
var apS7 = apS(Apply6);
var apSW = apS7;
var ApT2 = of6(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex2 = function(f) {
  return function(as15) {
    var e = f(0, head(as15));
    if (isLeft2(e)) {
      return e;
    }
    var out = [e.right];
    for (var i = 1; i < as15.length; i++) {
      var e_1 = f(i, as15[i]);
      if (isLeft2(e_1)) {
        return e_1;
      }
      out.push(e_1.right);
    }
    return right3(out);
  };
};
var traverseReadonlyArrayWithIndex2 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex2(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT2;
  };
};
var traverseArrayWithIndex2 = traverseReadonlyArrayWithIndex2;
var traverseArray2 = function(f) {
  return traverseReadonlyArrayWithIndex2(function(_, a) {
    return f(a);
  });
};
var sequenceArray2 = traverseArray2(identity);
var chainW = flatMap6;
var chain6 = flatMap6;
var chainFirst7 = tap3;
var chainFirstW = tap3;
function parseJSON(s, onError) {
  return tryCatch2(function() {
    return JSON.parse(s);
  }, onError);
}
var stringifyJSON = function(u, onError) {
  return tryCatch2(function() {
    var s = JSON.stringify(u);
    if (typeof s !== "string") {
      throw new Error("Converting unsupported structure to JSON");
    }
    return s;
  }, onError);
};
var either = {
  URI: URI11,
  map: _map8,
  of: of6,
  ap: _ap6,
  chain: flatMap6,
  reduce: _reduce6,
  foldMap: _foldMap6,
  reduceRight: _reduceRight6,
  traverse: _traverse6,
  sequence: sequence6,
  bimap: _bimap3,
  mapLeft: _mapLeft3,
  alt: _alt6,
  extend: _extend6,
  chainRec: _chainRec,
  throwError: throwError2
};
var getApplySemigroup3 = getApplySemigroup(Apply6);
var getApplyMonoid2 = getApplicativeMonoid(Applicative6);
var getValidationSemigroup = function(SE, SA) {
  return getApplySemigroup(getApplicativeValidation(SE))(SA);
};
var getValidationMonoid = function(SE, MA) {
  return getApplicativeMonoid(getApplicativeValidation(SE))(MA);
};
function getValidation(SE) {
  var ap29 = getApplicativeValidation(SE).ap;
  var alt18 = getAltValidation(SE).alt;
  return {
    URI: URI11,
    _E: void 0,
    map: _map8,
    of: of6,
    chain: flatMap6,
    bimap: _bimap3,
    mapLeft: _mapLeft3,
    reduce: _reduce6,
    foldMap: _foldMap6,
    reduceRight: _reduceRight6,
    extend: _extend6,
    traverse: _traverse6,
    sequence: sequence6,
    chainRec: _chainRec,
    throwError: throwError2,
    ap: ap29,
    alt: alt18
  };
}

// node_modules/fp-ts/es6/EitherT.js
var EitherT_exports = {};
__export(EitherT_exports, {
  alt: () => alt7,
  altValidation: () => altValidation,
  ap: () => ap8,
  bimap: () => bimap4,
  chain: () => chain7,
  chainNullableK: () => chainNullableK3,
  flatMap: () => flatMap7,
  fromNullable: () => fromNullable3,
  fromNullableK: () => fromNullableK3,
  getEitherM: () => getEitherM,
  getOrElse: () => getOrElse3,
  left: () => left4,
  leftF: () => leftF,
  map: () => map10,
  mapBoth: () => mapBoth,
  mapError: () => mapError,
  mapLeft: () => mapLeft4,
  match: () => match6,
  matchE: () => matchE,
  orElse: () => orElse3,
  orElseFirst: () => orElseFirst,
  orLeft: () => orLeft,
  right: () => right4,
  rightF: () => rightF,
  swap: () => swap2,
  tapError: () => tapError,
  toUnion: () => toUnion2
});
function right4(F) {
  return flow(right3, F.of);
}
function left4(F) {
  return flow(left3, F.of);
}
function rightF(F) {
  return function(fa) {
    return F.map(fa, right3);
  };
}
function leftF(F) {
  return function(fe) {
    return F.map(fe, left3);
  };
}
function fromNullable3(F) {
  return function(e) {
    return flow(fromNullable2(e), F.of);
  };
}
function fromNullableK3(F) {
  var fromNullableF = fromNullable3(F);
  return function(e) {
    var fromNullableFE = fromNullableF(e);
    return function(f) {
      return flow(f, fromNullableFE);
    };
  };
}
function chainNullableK3(M) {
  var chainM = chain7(M);
  var fromNullableKM = fromNullableK3(M);
  return function(e) {
    var fromNullableKMe = fromNullableKM(e);
    return function(f) {
      return chainM(fromNullableKMe(f));
    };
  };
}
function map10(F) {
  return map(F, Functor8);
}
function ap8(F) {
  return ap(F, Apply6);
}
function chain7(M) {
  var flatMapM = flatMap7(M);
  return function(f) {
    return function(ma) {
      return flatMapM(ma, f);
    };
  };
}
function flatMap7(M) {
  return function(ma, f) {
    return M.chain(ma, function(e) {
      return isLeft2(e) ? M.of(e) : f(e.right);
    });
  };
}
function alt7(M) {
  return function(second2) {
    return function(first3) {
      return M.chain(first3, function(e) {
        return isLeft2(e) ? second2() : M.of(e);
      });
    };
  };
}
function bimap4(F) {
  var mapBothF = mapBoth(F);
  return function(f, g) {
    return function(self) {
      return mapBothF(self, f, g);
    };
  };
}
function mapBoth(F) {
  return function(self, f, g) {
    return F.map(self, bimap3(f, g));
  };
}
function mapLeft4(F) {
  var mapErrorF = mapError(F);
  return function(f) {
    return function(self) {
      return mapErrorF(self, f);
    };
  };
}
function mapError(F) {
  return function(self, f) {
    return F.map(self, mapLeft3(f));
  };
}
function altValidation(M, S) {
  return function(second2) {
    return function(first3) {
      return M.chain(first3, match5(function(e1) {
        return M.map(second2(), mapLeft3(function(e2) {
          return S.concat(e1, e2);
        }));
      }, right4(M)));
    };
  };
}
function match6(F) {
  return function(onLeft, onRight) {
    return function(ma) {
      return F.map(ma, match5(onLeft, onRight));
    };
  };
}
function matchE(M) {
  return function(onLeft, onRight) {
    return function(ma) {
      return M.chain(ma, match5(onLeft, onRight));
    };
  };
}
function getOrElse3(M) {
  return function(onLeft) {
    return function(ma) {
      return M.chain(ma, match5(onLeft, M.of));
    };
  };
}
function orElse3(M) {
  return function(onLeft) {
    return function(ma) {
      return M.chain(ma, function(e) {
        return isLeft2(e) ? onLeft(e.left) : M.of(e);
      });
    };
  };
}
function orElseFirst(M) {
  var tapErrorM = tapError(M);
  return function(onLeft) {
    return function(ma) {
      return tapErrorM(ma, onLeft);
    };
  };
}
function tapError(M) {
  var orElseM = orElse3(M);
  return function(ma, onLeft) {
    return pipe(ma, orElseM(function(e) {
      return M.map(onLeft(e), function(eb) {
        return isLeft2(eb) ? eb : left3(e);
      });
    }));
  };
}
function orLeft(M) {
  return function(onLeft) {
    return function(ma) {
      return M.chain(ma, match5(function(e) {
        return M.map(onLeft(e), left3);
      }, function(a) {
        return M.of(right3(a));
      }));
    };
  };
}
function swap2(F) {
  return function(ma) {
    return F.map(ma, swap);
  };
}
function toUnion2(F) {
  return function(fa) {
    return F.map(fa, toUnion);
  };
}
function getEitherM(M) {
  var _ap18 = ap8(M);
  var _map35 = map10(M);
  var _chain = chain7(M);
  var _alt15 = alt7(M);
  var _bimap9 = bimap4(M);
  var _mapLeft9 = mapLeft4(M);
  var _fold = matchE(M);
  var _getOrElse = getOrElse3(M);
  var _orElse = orElse3(M);
  return {
    map: function(fa, f) {
      return pipe(fa, _map35(f));
    },
    ap: function(fab, fa) {
      return pipe(fab, _ap18(fa));
    },
    of: right4(M),
    chain: function(ma, f) {
      return pipe(ma, _chain(f));
    },
    alt: function(fa, that) {
      return pipe(fa, _alt15(that));
    },
    bimap: function(fea, f, g) {
      return pipe(fea, _bimap9(f, g));
    },
    mapLeft: function(fea, f) {
      return pipe(fea, _mapLeft9(f));
    },
    fold: function(fa, onLeft, onRight) {
      return pipe(fa, _fold(onLeft, onRight));
    },
    getOrElse: function(fa, onLeft) {
      return pipe(fa, _getOrElse(onLeft));
    },
    orElse: function(fa, f) {
      return pipe(fa, _orElse(f));
    },
    swap: swap2(M),
    rightM: rightF(M),
    leftM: leftF(M),
    left: left4(M)
  };
}

// node_modules/fp-ts/es6/Endomorphism.js
var Endomorphism_exports = {};
__export(Endomorphism_exports, {
  URI: () => URI12,
  getMonoid: () => getMonoid8,
  getSemigroup: () => getSemigroup10
});
var URI12 = "Endomorphism";
var getSemigroup10 = function() {
  return {
    concat: function(first3, second2) {
      return flow(first3, second2);
    }
  };
};
var getMonoid8 = function() {
  return {
    concat: getSemigroup10().concat,
    empty: identity
  };
};

// node_modules/fp-ts/es6/Extend.js
var Extend_exports = {};

// node_modules/fp-ts/es6/Field.js
var Field_exports = {};
__export(Field_exports, {
  fieldNumber: () => fieldNumber,
  gcd: () => gcd,
  lcm: () => lcm
});
function gcd(E, field) {
  var zero8 = field.zero;
  var f = function(x, y) {
    return E.equals(y, zero8) ? x : f(y, field.mod(x, y));
  };
  return f;
}
function lcm(E, F) {
  var zero8 = F.zero;
  var gcdSF = gcd(E, F);
  return function(x, y) {
    return E.equals(x, zero8) || E.equals(y, zero8) ? zero8 : F.div(F.mul(x, y), gcdSF(x, y));
  };
}
var fieldNumber = {
  add: function(x, y) {
    return x + y;
  },
  zero: 0,
  mul: function(x, y) {
    return x * y;
  },
  one: 1,
  sub: function(x, y) {
    return x - y;
  },
  degree: function(_) {
    return 1;
  },
  div: function(x, y) {
    return x / y;
  },
  mod: function(x, y) {
    return x % y;
  }
};

// node_modules/fp-ts/es6/Filterable.js
var Filterable_exports = {};
__export(Filterable_exports, {
  filter: () => filter6,
  filterMap: () => filterMap4,
  getFilterableComposition: () => getFilterableComposition,
  partition: () => partition4,
  partitionMap: () => partitionMap4
});
function filter6(F, G) {
  return function(predicate) {
    return function(fga) {
      return F.map(fga, function(ga) {
        return G.filter(ga, predicate);
      });
    };
  };
}
function filterMap4(F, G) {
  return function(f) {
    return function(fga) {
      return F.map(fga, function(ga) {
        return G.filterMap(ga, f);
      });
    };
  };
}
function partition4(F, G) {
  var _filter10 = filter6(F, G);
  return function(predicate) {
    var left14 = _filter10(not2(predicate));
    var right14 = _filter10(predicate);
    return function(fgb) {
      return separated(left14(fgb), right14(fgb));
    };
  };
}
function partitionMap4(F, G) {
  var _filterMap10 = filterMap4(F, G);
  return function(f) {
    return function(fga) {
      return separated(pipe(fga, _filterMap10(function(a) {
        return getLeft(f(a));
      })), pipe(fga, _filterMap10(function(a) {
        return getRight(f(a));
      })));
    };
  };
}
function getFilterableComposition(F, G) {
  var map44 = getFunctorComposition(F, G).map;
  var _compact = compact4(F, G);
  var _separate = separate4(F, G, G);
  var _filter10 = filter6(F, G);
  var _filterMap10 = filterMap4(F, G);
  var _partition10 = partition4(F, G);
  var _partitionMap10 = partitionMap4(F, G);
  return {
    map: map44,
    compact: _compact,
    separate: _separate,
    filter: function(fga, f) {
      return pipe(fga, _filter10(f));
    },
    filterMap: function(fga, f) {
      return pipe(fga, _filterMap10(f));
    },
    partition: function(fga, p) {
      return pipe(fga, _partition10(p));
    },
    partitionMap: function(fga, f) {
      return pipe(fga, _partitionMap10(f));
    }
  };
}

// node_modules/fp-ts/es6/FilterableWithIndex.js
var FilterableWithIndex_exports = {};

// node_modules/fp-ts/es6/Foldable.js
var Foldable_exports = {};
__export(Foldable_exports, {
  foldM: () => foldM,
  foldMap: () => foldMap7,
  getFoldableComposition: () => getFoldableComposition,
  intercalate: () => intercalate6,
  reduce: () => reduce7,
  reduceM: () => reduceM,
  reduceRight: () => reduceRight7,
  toArray: () => toArray2,
  toReadonlyArray: () => toReadonlyArray,
  traverse_: () => traverse_
});
function reduce7(F, G) {
  return function(b, f) {
    return function(fga) {
      return F.reduce(fga, b, function(b2, ga) {
        return G.reduce(ga, b2, f);
      });
    };
  };
}
function foldMap7(F, G) {
  return function(M) {
    var foldMapF = F.foldMap(M);
    var foldMapG = G.foldMap(M);
    return function(f) {
      return function(fga) {
        return foldMapF(fga, function(ga) {
          return foldMapG(ga, f);
        });
      };
    };
  };
}
function reduceRight7(F, G) {
  return function(b, f) {
    return function(fga) {
      return F.reduceRight(fga, b, function(ga, b2) {
        return G.reduceRight(ga, b2, f);
      });
    };
  };
}
function reduceM(M, F) {
  return function(b, f) {
    return function(fa) {
      return F.reduce(fa, M.of(b), function(mb, a) {
        return M.chain(mb, function(b2) {
          return f(b2, a);
        });
      });
    };
  };
}
function intercalate6(M, F) {
  return function(middle, fm) {
    var go = function(_a, x) {
      var init5 = _a.init, acc = _a.acc;
      return init5 ? { init: false, acc: x } : { init: false, acc: M.concat(M.concat(acc, middle), x) };
    };
    return F.reduce(fm, { init: true, acc: M.empty }, go).acc;
  };
}
function toReadonlyArray(F) {
  return function(fa) {
    return F.reduce(fa, [], function(acc, a) {
      acc.push(a);
      return acc;
    });
  };
}
function traverse_(M, F) {
  var applyFirst = function(mu2, mb) {
    return M.ap(M.map(mu2, constant), mb);
  };
  var mu = M.of(void 0);
  return function(fa, f) {
    return F.reduce(fa, mu, function(mu2, a) {
      return applyFirst(mu2, f(a));
    });
  };
}
function foldM(M, F) {
  return function(fa, b, f) {
    return F.reduce(fa, M.of(b), function(mb, a) {
      return M.chain(mb, function(b2) {
        return f(b2, a);
      });
    });
  };
}
var toArray2 = toReadonlyArray;
function getFoldableComposition(F, G) {
  var _reduce14 = reduce7(F, G);
  var _foldMap14 = foldMap7(F, G);
  var _reduceRight14 = reduceRight7(F, G);
  return {
    reduce: function(fga, b, f) {
      return pipe(fga, _reduce14(b, f));
    },
    foldMap: function(M) {
      var foldMapM = _foldMap14(M);
      return function(fga, f) {
        return pipe(fga, foldMapM(f));
      };
    },
    reduceRight: function(fga, b, f) {
      return pipe(fga, _reduceRight14(b, f));
    }
  };
}

// node_modules/fp-ts/es6/FoldableWithIndex.js
var FoldableWithIndex_exports = {};
__export(FoldableWithIndex_exports, {
  foldMapWithIndex: () => foldMapWithIndex5,
  getFoldableWithIndexComposition: () => getFoldableWithIndexComposition,
  reduceRightWithIndex: () => reduceRightWithIndex5,
  reduceWithIndex: () => reduceWithIndex5
});
function reduceWithIndex5(F, G) {
  return function(b, f) {
    return function(fga) {
      return F.reduceWithIndex(fga, b, function(i, b2, ga) {
        return G.reduceWithIndex(ga, b2, function(j, b3, a) {
          return f([i, j], b3, a);
        });
      });
    };
  };
}
function foldMapWithIndex5(F, G) {
  return function(M) {
    var foldMapWithIndexF = F.foldMapWithIndex(M);
    var foldMapWithIndexG = G.foldMapWithIndex(M);
    return function(f) {
      return function(fga) {
        return foldMapWithIndexF(fga, function(i, ga) {
          return foldMapWithIndexG(ga, function(j, a) {
            return f([i, j], a);
          });
        });
      };
    };
  };
}
function reduceRightWithIndex5(F, G) {
  return function(b, f) {
    return function(fga) {
      return F.reduceRightWithIndex(fga, b, function(i, ga, b2) {
        return G.reduceRightWithIndex(ga, b2, function(j, a, b3) {
          return f([i, j], a, b3);
        });
      });
    };
  };
}
function getFoldableWithIndexComposition(F, G) {
  var FC = getFoldableComposition(F, G);
  var _reduceWithIndex7 = reduceWithIndex5(F, G);
  var _foldMapWithIndex7 = foldMapWithIndex5(F, G);
  var _reduceRightWithIndex7 = reduceRightWithIndex5(F, G);
  return {
    reduce: FC.reduce,
    foldMap: FC.foldMap,
    reduceRight: FC.reduceRight,
    reduceWithIndex: function(fga, b, f) {
      return pipe(fga, _reduceWithIndex7(b, f));
    },
    foldMapWithIndex: function(M) {
      var foldMapWithIndexM = _foldMapWithIndex7(M);
      return function(fga, f) {
        return pipe(fga, foldMapWithIndexM(f));
      };
    },
    reduceRightWithIndex: function(fga, b, f) {
      return pipe(fga, _reduceRightWithIndex7(b, f));
    }
  };
}

// node_modules/fp-ts/es6/FromIO.js
var FromIO_exports = {};
__export(FromIO_exports, {
  chainFirstIOK: () => chainFirstIOK,
  chainIOK: () => chainIOK,
  fromIOK: () => fromIOK,
  tapIO: () => tapIO
});
function fromIOK(F) {
  return function(f) {
    return flow(f, F.fromIO);
  };
}
function chainIOK(F, M) {
  return function(f) {
    var g = flow(f, F.fromIO);
    return function(first3) {
      return M.chain(first3, g);
    };
  };
}
function chainFirstIOK(F, M) {
  var tapIOM = tapIO(F, M);
  return function(f) {
    return function(first3) {
      return tapIOM(first3, f);
    };
  };
}
function tapIO(F, M) {
  var chainFirstM = tap(M);
  return function(self, f) {
    return chainFirstM(self, flow(f, F.fromIO));
  };
}

// node_modules/fp-ts/es6/FromReader.js
var FromReader_exports = {};
__export(FromReader_exports, {
  ask: () => ask2,
  asks: () => asks2,
  chainFirstReaderK: () => chainFirstReaderK,
  chainReaderK: () => chainReaderK,
  fromReaderK: () => fromReaderK,
  tapReader: () => tapReader
});

// node_modules/fp-ts/es6/Reader.js
var Reader_exports = {};
__export(Reader_exports, {
  ApT: () => ApT3,
  Applicative: () => Applicative7,
  Apply: () => Apply7,
  Category: () => Category,
  Chain: () => Chain7,
  Choice: () => Choice,
  Do: () => Do7,
  Functor: () => Functor9,
  Monad: () => Monad7,
  Pointed: () => Pointed7,
  Profunctor: () => Profunctor,
  Strong: () => Strong,
  URI: () => URI13,
  ap: () => ap9,
  apFirst: () => apFirst8,
  apFirstW: () => apFirstW2,
  apS: () => apS8,
  apSW: () => apSW2,
  apSecond: () => apSecond8,
  apSecondW: () => apSecondW2,
  apW: () => apW2,
  ask: () => ask,
  asks: () => asks,
  asksReader: () => asksReader,
  asksReaderW: () => asksReaderW,
  bind: () => bind8,
  bindTo: () => bindTo8,
  bindW: () => bindW2,
  chain: () => chain8,
  chainFirst: () => chainFirst8,
  chainFirstW: () => chainFirstW2,
  chainW: () => chainW2,
  compose: () => compose,
  first: () => first2,
  flap: () => flap10,
  flatMap: () => flatMap8,
  flatten: () => flatten7,
  flattenW: () => flattenW2,
  getMonoid: () => getMonoid9,
  getSemigroup: () => getSemigroup11,
  id: () => id,
  left: () => left5,
  let: () => let_8,
  local: () => local,
  map: () => map11,
  of: () => of7,
  promap: () => promap,
  reader: () => reader,
  right: () => right5,
  second: () => second,
  sequenceArray: () => sequenceArray3,
  tap: () => tap4,
  traverseArray: () => traverseArray3,
  traverseArrayWithIndex: () => traverseArrayWithIndex3,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex3,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex3
});
var ask = function() {
  return identity;
};
var asks = identity;
var local = function(f) {
  return function(ma) {
    return function(r2) {
      return ma(f(r2));
    };
  };
};
var asksReaderW = function(f) {
  return function(r) {
    return f(r)(r);
  };
};
var asksReader = asksReaderW;
var _map9 = function(fa, f) {
  return pipe(fa, map11(f));
};
var _ap7 = function(fab, fa) {
  return pipe(fab, ap9(fa));
};
var _compose = function(bc, ab) {
  return pipe(bc, compose(ab));
};
var _promap = function(fea, f, g) {
  return pipe(fea, promap(f, g));
};
var map11 = function(f) {
  return function(fa) {
    return function(r) {
      return f(fa(r));
    };
  };
};
var apW2 = function(fa) {
  return function(fab) {
    return function(r) {
      return fab(r)(fa(r));
    };
  };
};
var ap9 = apW2;
var of7 = constant;
var flatMap8 = dual(2, function(ma, f) {
  return function(r) {
    return f(ma(r))(r);
  };
});
var flattenW2 = flatMap8(identity);
var flatten7 = flattenW2;
var compose = function(ab) {
  return function(bc) {
    return flow(ab, bc);
  };
};
var promap = function(f, g) {
  return function(fea) {
    return function(a) {
      return g(fea(f(a)));
    };
  };
};
var id = function() {
  return identity;
};
var first2 = function(pab) {
  return function(_a) {
    var a = _a[0], c = _a[1];
    return [pab(a), c];
  };
};
var second = function(pbc) {
  return function(_a) {
    var a = _a[0], b = _a[1];
    return [a, pbc(b)];
  };
};
var left5 = function(pab) {
  return fold6(function(a) {
    return left(pab(a));
  }, right3);
};
var right5 = function(pbc) {
  return fold6(left3, function(b) {
    return right(pbc(b));
  });
};
var URI13 = "Reader";
var Functor9 = {
  URI: URI13,
  map: _map9
};
var flap10 = flap(Functor9);
var Pointed7 = {
  URI: URI13,
  of: of7
};
var Apply7 = {
  URI: URI13,
  map: _map9,
  ap: _ap7
};
var apFirst8 = apFirst(Apply7);
var apFirstW2 = apFirst8;
var apSecond8 = apSecond(Apply7);
var apSecondW2 = apSecond8;
var Applicative7 = {
  URI: URI13,
  map: _map9,
  ap: _ap7,
  of: of7
};
var Chain7 = {
  URI: URI13,
  map: _map9,
  ap: _ap7,
  chain: flatMap8
};
var Monad7 = {
  URI: URI13,
  map: _map9,
  of: of7,
  ap: _ap7,
  chain: flatMap8
};
var tap4 = dual(2, tap(Chain7));
var Profunctor = {
  URI: URI13,
  map: _map9,
  promap: _promap
};
var Category = {
  URI: URI13,
  compose: _compose,
  id
};
var Strong = {
  URI: URI13,
  map: _map9,
  promap: _promap,
  first: first2,
  second
};
var Choice = {
  URI: URI13,
  map: _map9,
  promap: _promap,
  left: left5,
  right: right5
};
var bindTo8 = bindTo(Functor9);
var let_8 = let_(Functor9);
var bind8 = bind(Chain7);
var bindW2 = bind8;
var Do7 = of7(emptyRecord);
var apS8 = apS(Apply7);
var apSW2 = apS8;
var ApT3 = of7(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex3 = function(f) {
  return function(as15) {
    return function(r) {
      var out = [f(0, head(as15))(r)];
      for (var i = 1; i < as15.length; i++) {
        out.push(f(i, as15[i])(r));
      }
      return out;
    };
  };
};
var traverseReadonlyArrayWithIndex3 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex3(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT3;
  };
};
var traverseArrayWithIndex3 = traverseReadonlyArrayWithIndex3;
var traverseArray3 = function(f) {
  return traverseReadonlyArrayWithIndex3(function(_, a) {
    return f(a);
  });
};
var sequenceArray3 = traverseArray3(identity);
var chainW2 = flatMap8;
var chain8 = flatMap8;
var chainFirst8 = tap4;
var chainFirstW2 = tap4;
var reader = {
  URI: URI13,
  map: _map9,
  of: of7,
  ap: _ap7,
  chain: flatMap8,
  promap: _promap,
  compose: _compose,
  id,
  first: first2,
  second,
  left: left5,
  right: right5
};
var getSemigroup11 = getApplySemigroup(Apply7);
var getMonoid9 = getApplicativeMonoid(Applicative7);

// node_modules/fp-ts/es6/FromReader.js
function ask2(F) {
  return function() {
    return F.fromReader(ask());
  };
}
function asks2(F) {
  return F.fromReader;
}
function fromReaderK(F) {
  return function(f) {
    return flow(f, F.fromReader);
  };
}
function chainReaderK(F, M) {
  var fromReaderKF = fromReaderK(F);
  return function(f) {
    return function(ma) {
      return M.chain(ma, fromReaderKF(f));
    };
  };
}
function chainFirstReaderK(F, M) {
  var tapM = tapReader(F, M);
  return function(f) {
    return function(self) {
      return tapM(self, f);
    };
  };
}
function tapReader(F, M) {
  var tapM = tap(M);
  return function(self, f) {
    return tapM(self, flow(f, F.fromReader));
  };
}

// node_modules/fp-ts/es6/FromState.js
var FromState_exports = {};
__export(FromState_exports, {
  chainStateK: () => chainStateK,
  fromStateK: () => fromStateK,
  get: () => get2,
  gets: () => gets2,
  modify: () => modify2,
  put: () => put2
});

// node_modules/fp-ts/es6/State.js
var State_exports = {};
__export(State_exports, {
  Applicative: () => Applicative8,
  Apply: () => Apply8,
  Chain: () => Chain8,
  FromState: () => FromState,
  Functor: () => Functor10,
  Monad: () => Monad8,
  Pointed: () => Pointed8,
  URI: () => URI14,
  ap: () => ap10,
  apFirst: () => apFirst9,
  apS: () => apS9,
  apSecond: () => apSecond9,
  bind: () => bind9,
  bindTo: () => bindTo9,
  chain: () => chain9,
  chainFirst: () => chainFirst9,
  evalState: () => evalState,
  evaluate: () => evaluate,
  execState: () => execState,
  execute: () => execute,
  flap: () => flap11,
  flatMap: () => flatMap9,
  flatten: () => flatten8,
  get: () => get,
  gets: () => gets,
  let: () => let_9,
  map: () => map12,
  modify: () => modify,
  of: () => of8,
  put: () => put,
  sequenceArray: () => sequenceArray4,
  state: () => state,
  tap: () => tap5,
  traverseArray: () => traverseArray4,
  traverseArrayWithIndex: () => traverseArrayWithIndex4,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex4,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex4
});
var get = function() {
  return function(s) {
    return [s, s];
  };
};
var put = function(s) {
  return function() {
    return [void 0, s];
  };
};
var modify = function(f) {
  return function(s) {
    return [void 0, f(s)];
  };
};
var gets = function(f) {
  return function(s) {
    return [f(s), s];
  };
};
var _map10 = function(fa, f) {
  return pipe(fa, map12(f));
};
var _ap8 = function(fab, fa) {
  return pipe(fab, ap10(fa));
};
var map12 = function(f) {
  return function(fa) {
    return function(s1) {
      var _a = fa(s1), a = _a[0], s2 = _a[1];
      return [f(a), s2];
    };
  };
};
var ap10 = function(fa) {
  return function(fab) {
    return function(s1) {
      var _a = fab(s1), f = _a[0], s2 = _a[1];
      var _b = fa(s2), a = _b[0], s3 = _b[1];
      return [f(a), s3];
    };
  };
};
var of8 = function(a) {
  return function(s) {
    return [a, s];
  };
};
var flatMap9 = dual(2, function(ma, f) {
  return function(s1) {
    var _a = ma(s1), a = _a[0], s2 = _a[1];
    return f(a)(s2);
  };
});
var flatten8 = flatMap9(identity);
var URI14 = "State";
var Functor10 = {
  URI: URI14,
  map: _map10
};
var flap11 = flap(Functor10);
var Pointed8 = {
  URI: URI14,
  of: of8
};
var Apply8 = {
  URI: URI14,
  map: _map10,
  ap: _ap8
};
var apFirst9 = apFirst(Apply8);
var apSecond9 = apSecond(Apply8);
var Applicative8 = {
  URI: URI14,
  map: _map10,
  ap: _ap8,
  of: of8
};
var Chain8 = {
  URI: URI14,
  map: _map10,
  ap: _ap8,
  chain: flatMap9
};
var Monad8 = {
  URI: URI14,
  map: _map10,
  ap: _ap8,
  of: of8,
  chain: flatMap9
};
var tap5 = dual(2, tap(Chain8));
var FromState = {
  URI: URI14,
  fromState: identity
};
var evaluate = function(s) {
  return function(ma) {
    return ma(s)[0];
  };
};
var execute = function(s) {
  return function(ma) {
    return ma(s)[1];
  };
};
var bindTo9 = bindTo(Functor10);
var let_9 = let_(Functor10);
var bind9 = bind(Chain8);
var apS9 = apS(Apply8);
var traverseReadonlyNonEmptyArrayWithIndex4 = function(f) {
  return function(as15) {
    return function(s) {
      var _a = f(0, head(as15))(s), b = _a[0], s2 = _a[1];
      var bs = [b];
      var out = s2;
      for (var i = 1; i < as15.length; i++) {
        var _b = f(i, as15[i])(out), b_1 = _b[0], s2_1 = _b[1];
        bs.push(b_1);
        out = s2_1;
      }
      return [bs, out];
    };
  };
};
var traverseReadonlyArrayWithIndex4 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex4(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : of8(emptyReadonlyArray);
  };
};
var traverseArrayWithIndex4 = traverseReadonlyArrayWithIndex4;
var traverseArray4 = function(f) {
  return traverseReadonlyArrayWithIndex4(function(_, a) {
    return f(a);
  });
};
var sequenceArray4 = traverseArray4(identity);
var chain9 = flatMap9;
var chainFirst9 = tap5;
var evalState = function(ma, s) {
  return ma(s)[0];
};
var execState = function(ma, s) {
  return ma(s)[1];
};
var state = Monad8;

// node_modules/fp-ts/es6/FromState.js
function get2(F) {
  return function() {
    return F.fromState(get());
  };
}
function put2(F) {
  return function(s) {
    return F.fromState(put(s));
  };
}
function modify2(F) {
  return flow(modify, F.fromState);
}
function gets2(F) {
  return flow(gets, F.fromState);
}
function fromStateK(F) {
  return function(f) {
    return flow(f, F.fromState);
  };
}
function chainStateK(F, M) {
  var fromStateKF = fromStateK(F);
  return function(f) {
    return function(ma) {
      return M.chain(ma, fromStateKF(f));
    };
  };
}

// node_modules/fp-ts/es6/FromTask.js
var FromTask_exports = {};
__export(FromTask_exports, {
  chainFirstTaskK: () => chainFirstTaskK,
  chainTaskK: () => chainTaskK,
  fromTaskK: () => fromTaskK,
  tapTask: () => tapTask
});
function fromTaskK(F) {
  return function(f) {
    return flow(f, F.fromTask);
  };
}
function chainTaskK(F, M) {
  return function(f) {
    var g = flow(f, F.fromTask);
    return function(first3) {
      return M.chain(first3, g);
    };
  };
}
function chainFirstTaskK(F, M) {
  var tapTaskM = tapTask(F, M);
  return function(f) {
    return function(first3) {
      return tapTaskM(first3, f);
    };
  };
}
function tapTask(F, M) {
  var tapM = tap(M);
  return function(self, f) {
    return tapM(self, flow(f, F.fromTask));
  };
}

// node_modules/fp-ts/es6/FromThese.js
var FromThese_exports = {};
__export(FromThese_exports, {
  fromTheseK: () => fromTheseK
});
function fromTheseK(F) {
  return function(f) {
    return flow(f, F.fromThese);
  };
}

// node_modules/fp-ts/es6/FunctorWithIndex.js
var FunctorWithIndex_exports = {};
__export(FunctorWithIndex_exports, {
  getFunctorWithIndexComposition: () => getFunctorWithIndexComposition,
  mapWithIndex: () => mapWithIndex5
});
function mapWithIndex5(F, G) {
  return function(f) {
    return function(fa) {
      return F.mapWithIndex(fa, function(i, ga) {
        return G.mapWithIndex(ga, function(j, a) {
          return f([i, j], a);
        });
      });
    };
  };
}
function getFunctorWithIndexComposition(F, G) {
  var map44 = getFunctorComposition(F, G).map;
  var _mapWithIndex9 = mapWithIndex5(F, G);
  return {
    map: map44,
    mapWithIndex: function(fga, f) {
      return pipe(fga, _mapWithIndex9(f));
    }
  };
}

// node_modules/fp-ts/es6/Group.js
var Group_exports = {};

// node_modules/fp-ts/es6/HeytingAlgebra.js
var HeytingAlgebra_exports = {};

// node_modules/fp-ts/es6/HKT/index.js
var HKT_exports = {};

// node_modules/fp-ts/es6/Identity.js
var Identity_exports = {};
__export(Identity_exports, {
  Alt: () => Alt7,
  Applicative: () => Applicative9,
  Apply: () => Apply9,
  Chain: () => Chain9,
  ChainRec: () => ChainRec2,
  Comonad: () => Comonad3,
  Do: () => Do8,
  Foldable: () => Foldable7,
  Functor: () => Functor11,
  Monad: () => Monad9,
  Pointed: () => Pointed9,
  Traversable: () => Traversable7,
  URI: () => URI15,
  alt: () => alt8,
  altW: () => altW7,
  ap: () => ap11,
  apFirst: () => apFirst10,
  apS: () => apS10,
  apSecond: () => apSecond10,
  bind: () => bind10,
  bindTo: () => bindTo10,
  chain: () => chain10,
  chainFirst: () => chainFirst10,
  duplicate: () => duplicate7,
  extend: () => extend7,
  extract: () => extract3,
  flap: () => flap12,
  flatMap: () => flatMap10,
  flatten: () => flatten9,
  foldMap: () => foldMap8,
  getEq: () => getEq8,
  getShow: () => getShow8,
  identity: () => identity2,
  let: () => let_10,
  map: () => map13,
  of: () => of9,
  reduce: () => reduce8,
  reduceRight: () => reduceRight8,
  sequence: () => sequence7,
  tap: () => tap6,
  traverse: () => traverse7
});
var _map11 = function(fa, f) {
  return pipe(fa, map13(f));
};
var _ap9 = function(fab, fa) {
  return pipe(fab, ap11(fa));
};
var _reduce7 = function(fa, b, f) {
  return pipe(fa, reduce8(b, f));
};
var _foldMap7 = function(M) {
  return function(fa, f) {
    return pipe(fa, foldMap8(M)(f));
  };
};
var _reduceRight7 = function(fa, b, f) {
  return pipe(fa, reduceRight8(b, f));
};
var _alt7 = function(fa, that) {
  return pipe(fa, alt8(that));
};
var _extend7 = function(wa, f) {
  return pipe(wa, extend7(f));
};
var _traverse7 = function(F) {
  var traverseF = traverse7(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _chainRec2 = tailRec;
var map13 = function(f) {
  return function(fa) {
    return f(fa);
  };
};
var ap11 = function(fa) {
  return function(fab) {
    return fab(fa);
  };
};
var of9 = identity;
var flatMap10 = dual(2, function(ma, f) {
  return f(ma);
});
var extend7 = function(f) {
  return function(wa) {
    return f(wa);
  };
};
var extract3 = identity;
var duplicate7 = extend7(identity);
var flatten9 = flatMap10(identity);
var reduce8 = function(b, f) {
  return function(fa) {
    return f(b, fa);
  };
};
var foldMap8 = function() {
  return function(f) {
    return function(fa) {
      return f(fa);
    };
  };
};
var reduceRight8 = function(b, f) {
  return function(fa) {
    return f(fa, b);
  };
};
var traverse7 = function(F) {
  return function(f) {
    return function(ta) {
      return F.map(f(ta), identity);
    };
  };
};
var sequence7 = function(F) {
  return function(ta) {
    return F.map(ta, identity);
  };
};
var altW7 = function() {
  return identity;
};
var alt8 = altW7;
var URI15 = "Identity";
var getShow8 = identity;
var getEq8 = identity;
var Functor11 = {
  URI: URI15,
  map: _map11
};
var flap12 = flap(Functor11);
var Pointed9 = {
  URI: URI15,
  of: of9
};
var Apply9 = {
  URI: URI15,
  map: _map11,
  ap: _ap9
};
var apFirst10 = apFirst(Apply9);
var apSecond10 = apSecond(Apply9);
var Applicative9 = {
  URI: URI15,
  map: _map11,
  ap: _ap9,
  of: of9
};
var Chain9 = {
  URI: URI15,
  map: _map11,
  ap: _ap9,
  chain: flatMap10
};
var Monad9 = {
  URI: URI15,
  map: _map11,
  ap: _ap9,
  of: of9,
  chain: flatMap10
};
var tap6 = dual(2, tap(Chain9));
var chainFirst10 = tap6;
var Foldable7 = {
  URI: URI15,
  reduce: _reduce7,
  foldMap: _foldMap7,
  reduceRight: _reduceRight7
};
var Traversable7 = {
  URI: URI15,
  map: _map11,
  reduce: _reduce7,
  foldMap: _foldMap7,
  reduceRight: _reduceRight7,
  traverse: _traverse7,
  sequence: sequence7
};
var Alt7 = {
  URI: URI15,
  map: _map11,
  alt: _alt7
};
var Comonad3 = {
  URI: URI15,
  map: _map11,
  extend: _extend7,
  extract: extract3
};
var ChainRec2 = {
  URI: URI15,
  map: _map11,
  ap: _ap9,
  chain: flatMap10,
  chainRec: _chainRec2
};
var Do8 = of9(emptyRecord);
var bindTo10 = bindTo(Functor11);
var let_10 = let_(Functor11);
var bind10 = bind(Chain9);
var apS10 = apS(Apply9);
var chain10 = flatMap10;
var identity2 = {
  URI: URI15,
  map: _map11,
  ap: _ap9,
  of: of9,
  chain: flatMap10,
  reduce: _reduce7,
  foldMap: _foldMap7,
  reduceRight: _reduceRight7,
  traverse: _traverse7,
  sequence: sequence7,
  alt: _alt7,
  extract: extract3,
  extend: _extend7,
  chainRec: _chainRec2
};

// node_modules/fp-ts/es6/Invariant.js
var Invariant_exports = {};

// node_modules/fp-ts/es6/IO.js
var IO_exports = {};
__export(IO_exports, {
  ApT: () => ApT4,
  Applicative: () => Applicative10,
  Apply: () => Apply10,
  Chain: () => Chain10,
  ChainRec: () => ChainRec3,
  Do: () => Do9,
  FromIO: () => FromIO,
  Functor: () => Functor12,
  Monad: () => Monad10,
  MonadIO: () => MonadIO,
  Pointed: () => Pointed10,
  URI: () => URI16,
  ap: () => ap12,
  apFirst: () => apFirst11,
  apS: () => apS11,
  apSecond: () => apSecond11,
  as: () => as4,
  asUnit: () => asUnit4,
  bind: () => bind11,
  bindTo: () => bindTo11,
  chain: () => chain11,
  chainFirst: () => chainFirst11,
  flap: () => flap13,
  flatMap: () => flatMap11,
  flatten: () => flatten10,
  fromIO: () => fromIO,
  getMonoid: () => getMonoid10,
  getSemigroup: () => getSemigroup12,
  io: () => io,
  let: () => let_11,
  map: () => map14,
  of: () => of10,
  sequenceArray: () => sequenceArray5,
  tap: () => tap7,
  traverseArray: () => traverseArray5,
  traverseArrayWithIndex: () => traverseArrayWithIndex5,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex5,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex5
});
var _map12 = function(ma, f) {
  return function() {
    return f(ma());
  };
};
var _ap10 = function(mab, ma) {
  return function() {
    return mab()(ma());
  };
};
var _chainRec3 = function(a, f) {
  return function() {
    var e = f(a)();
    while (e._tag === "Left") {
      e = f(e.left)();
    }
    return e.right;
  };
};
var map14 = function(f) {
  return function(fa) {
    return _map12(fa, f);
  };
};
var ap12 = function(fa) {
  return function(fab) {
    return _ap10(fab, fa);
  };
};
var of10 = constant;
var flatMap11 = dual(2, function(ma, f) {
  return function() {
    return f(ma())();
  };
});
var flatten10 = flatMap11(identity);
var URI16 = "IO";
var Functor12 = {
  URI: URI16,
  map: _map12
};
var as4 = dual(2, as(Functor12));
var asUnit4 = asUnit(Functor12);
var flap13 = flap(Functor12);
var Pointed10 = {
  URI: URI16,
  of: of10
};
var Apply10 = {
  URI: URI16,
  map: _map12,
  ap: _ap10
};
var apFirst11 = apFirst(Apply10);
var apSecond11 = apSecond(Apply10);
var Applicative10 = {
  URI: URI16,
  map: _map12,
  ap: _ap10,
  of: of10
};
var Chain10 = {
  URI: URI16,
  map: _map12,
  ap: _ap10,
  chain: flatMap11
};
var Monad10 = {
  URI: URI16,
  map: _map12,
  ap: _ap10,
  of: of10,
  chain: flatMap11
};
var tap7 = dual(2, tap(Chain10));
var fromIO = identity;
var MonadIO = {
  URI: URI16,
  map: _map12,
  ap: _ap10,
  of: of10,
  chain: flatMap11,
  fromIO
};
var ChainRec3 = {
  URI: URI16,
  map: _map12,
  ap: _ap10,
  chain: flatMap11,
  chainRec: _chainRec3
};
var FromIO = {
  URI: URI16,
  fromIO: identity
};
var Do9 = of10(emptyRecord);
var bindTo11 = bindTo(Functor12);
var let_11 = let_(Functor12);
var bind11 = bind(Chain10);
var apS11 = apS(Apply10);
var ApT4 = of10(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex5 = function(f) {
  return function(as15) {
    return function() {
      var out = [f(0, head(as15))()];
      for (var i = 1; i < as15.length; i++) {
        out.push(f(i, as15[i])());
      }
      return out;
    };
  };
};
var traverseReadonlyArrayWithIndex5 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex5(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT4;
  };
};
var traverseArrayWithIndex5 = traverseReadonlyArrayWithIndex5;
var traverseArray5 = function(f) {
  return traverseReadonlyArrayWithIndex5(function(_, a) {
    return f(a);
  });
};
var sequenceArray5 = traverseArray5(identity);
var chain11 = flatMap11;
var chainFirst11 = tap7;
var io = {
  URI: URI16,
  map: _map12,
  of: of10,
  ap: _ap10,
  chain: flatMap11,
  fromIO,
  chainRec: _chainRec3
};
var getSemigroup12 = getApplySemigroup(Apply10);
var getMonoid10 = getApplicativeMonoid(Applicative10);

// node_modules/fp-ts/es6/IOEither.js
var IOEither_exports = {};
__export(IOEither_exports, {
  Alt: () => Alt8,
  ApT: () => ApT5,
  Applicative: () => Applicative11,
  ApplicativePar: () => ApplicativePar,
  ApplicativeSeq: () => ApplicativeSeq,
  ApplyPar: () => ApplyPar,
  Bifunctor: () => Bifunctor4,
  Chain: () => Chain11,
  Do: () => Do10,
  FromEither: () => FromEither5,
  FromIO: () => FromIO2,
  Functor: () => Functor13,
  Monad: () => Monad11,
  MonadIO: () => MonadIO2,
  MonadThrow: () => MonadThrow3,
  Pointed: () => Pointed11,
  URI: () => URI17,
  alt: () => alt9,
  altW: () => altW8,
  ap: () => ap13,
  apFirst: () => apFirst12,
  apFirstW: () => apFirstW3,
  apS: () => apS12,
  apSW: () => apSW3,
  apSecond: () => apSecond12,
  apSecondW: () => apSecondW3,
  apW: () => apW3,
  as: () => as5,
  asUnit: () => asUnit5,
  bimap: () => bimap5,
  bind: () => bind12,
  bindTo: () => bindTo12,
  bindW: () => bindW3,
  bracket: () => bracket,
  bracketW: () => bracketW,
  chain: () => chain12,
  chainEitherK: () => chainEitherK3,
  chainEitherKW: () => chainEitherKW,
  chainFirst: () => chainFirst12,
  chainFirstEitherK: () => chainFirstEitherK3,
  chainFirstEitherKW: () => chainFirstEitherKW,
  chainFirstIOK: () => chainFirstIOK2,
  chainFirstW: () => chainFirstW3,
  chainIOK: () => chainIOK2,
  chainOptionK: () => chainOptionK3,
  chainOptionKW: () => chainOptionKW2,
  chainW: () => chainW3,
  filterOrElse: () => filterOrElse3,
  filterOrElseW: () => filterOrElseW2,
  flap: () => flap14,
  flatMap: () => flatMap12,
  flatMapEither: () => flatMapEither2,
  flatMapIO: () => flatMapIO2,
  flatMapNullable: () => flatMapNullable3,
  flatMapOption: () => flatMapOption3,
  flatten: () => flatten11,
  flattenW: () => flattenW3,
  fold: () => fold7,
  foldW: () => foldW4,
  fromEither: () => fromEither4,
  fromEitherK: () => fromEitherK5,
  fromIO: () => fromIO2,
  fromIOK: () => fromIOK2,
  fromOption: () => fromOption5,
  fromOptionK: () => fromOptionK5,
  fromPredicate: () => fromPredicate6,
  getAltIOValidation: () => getAltIOValidation,
  getApplicativeIOValidation: () => getApplicativeIOValidation,
  getApplyMonoid: () => getApplyMonoid3,
  getApplySemigroup: () => getApplySemigroup4,
  getCompactable: () => getCompactable2,
  getFilterable: () => getFilterable2,
  getIOValidation: () => getIOValidation,
  getOrElse: () => getOrElse4,
  getOrElseW: () => getOrElseW3,
  getSemigroup: () => getSemigroup13,
  ioEither: () => ioEither,
  left: () => left6,
  leftIO: () => leftIO,
  let: () => let_12,
  liftNullable: () => liftNullable3,
  liftOption: () => liftOption3,
  map: () => map15,
  mapBoth: () => mapBoth2,
  mapError: () => mapError2,
  mapLeft: () => mapLeft5,
  match: () => match7,
  matchE: () => matchE2,
  matchEW: () => matchEW,
  matchW: () => matchW6,
  of: () => of11,
  orElse: () => orElse4,
  orElseFirst: () => orElseFirst2,
  orElseFirstIOK: () => orElseFirstIOK,
  orElseFirstW: () => orElseFirstW,
  orElseW: () => orElseW2,
  orLeft: () => orLeft2,
  right: () => right6,
  rightIO: () => rightIO,
  sequenceArray: () => sequenceArray6,
  sequenceSeqArray: () => sequenceSeqArray,
  swap: () => swap3,
  tap: () => tap8,
  tapEither: () => tapEither3,
  tapError: () => tapError2,
  tapIO: () => tapIO2,
  throwError: () => throwError3,
  toUnion: () => toUnion3,
  traverseArray: () => traverseArray6,
  traverseArrayWithIndex: () => traverseArrayWithIndex6,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex6,
  traverseReadonlyArrayWithIndexSeq: () => traverseReadonlyArrayWithIndexSeq,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex6,
  traverseReadonlyNonEmptyArrayWithIndexSeq: () => traverseReadonlyNonEmptyArrayWithIndexSeq,
  traverseSeqArray: () => traverseSeqArray,
  traverseSeqArrayWithIndex: () => traverseSeqArrayWithIndex,
  tryCatch: () => tryCatch3,
  tryCatchK: () => tryCatchK3
});
var left6 = left4(Pointed10);
var right6 = right4(Pointed10);
var rightIO = rightF(Functor12);
var leftIO = leftF(Functor12);
var fromEither4 = of10;
var fromIO2 = rightIO;
var match7 = match6(Functor12);
var matchW6 = match7;
var matchE2 = matchE(Monad10);
var fold7 = matchE2;
var matchEW = matchE2;
var foldW4 = matchEW;
var getOrElse4 = getOrElse3(Monad10);
var getOrElseW3 = getOrElse4;
var tryCatch3 = function(f, onThrow) {
  return function() {
    return tryCatch2(f, onThrow);
  };
};
var tryCatchK3 = function(f, onThrow) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return tryCatch3(function() {
      return f.apply(void 0, a);
    }, onThrow);
  };
};
var toUnion3 = toUnion2(Functor12);
var orElse4 = orElse3(Monad10);
var orElseW2 = orElse4;
var tapError2 = dual(2, tapError(Monad10));
var orElseFirstIOK = function(onLeft) {
  return tapError2(fromIOK2(onLeft));
};
var orLeft2 = orLeft(Monad10);
var swap3 = swap2(Functor12);
var _map13 = function(fa, f) {
  return pipe(fa, map15(f));
};
var _ap11 = function(fab, fa) {
  return pipe(fab, ap13(fa));
};
var _apSeq = function(fab, fa) {
  return flatMap12(fab, function(f) {
    return pipe(fa, map15(f));
  });
};
var _alt8 = function(fa, that) {
  return pipe(fa, alt9(that));
};
var map15 = map10(Functor12);
var mapBoth2 = dual(3, mapBoth(Functor12));
var bimap5 = mapBoth2;
var mapError2 = dual(2, mapError(Functor12));
var mapLeft5 = mapError2;
var ap13 = ap8(Apply10);
var apW3 = ap13;
var of11 = right6;
var flatMap12 = dual(2, flatMap7(Monad10));
var flattenW3 = flatMap12(identity);
var flatten11 = flattenW3;
var alt9 = alt7(Monad10);
var altW8 = alt9;
var throwError3 = left6;
var URI17 = "IOEither";
function getApplicativeIOValidation(S) {
  var ap29 = ap(Apply10, getApplicativeValidation(S));
  return {
    URI: URI17,
    _E: void 0,
    map: _map13,
    ap: function(fab, fa) {
      return pipe(fab, ap29(fa));
    },
    of: of11
  };
}
function getAltIOValidation(S) {
  var alt18 = altValidation(Monad10, S);
  return {
    URI: URI17,
    _E: void 0,
    map: _map13,
    alt: function(fa, that) {
      return pipe(fa, alt18(that));
    }
  };
}
var getCompactable2 = function(M) {
  var C = getCompactable(M);
  return {
    URI: URI17,
    _E: void 0,
    compact: compact4(Functor12, C),
    separate: separate4(Functor12, C, Functor8)
  };
};
function getFilterable2(M) {
  var F = getFilterable(M);
  var C = getCompactable2(M);
  var filter16 = filter6(Functor12, F);
  var filterMap14 = filterMap4(Functor12, F);
  var partition14 = partition4(Functor12, F);
  var partitionMap14 = partitionMap4(Functor12, F);
  return {
    URI: URI17,
    _E: void 0,
    map: _map13,
    compact: C.compact,
    separate: C.separate,
    filter: function(fa, predicate) {
      return pipe(fa, filter16(predicate));
    },
    filterMap: function(fa, f) {
      return pipe(fa, filterMap14(f));
    },
    partition: function(fa, predicate) {
      return pipe(fa, partition14(predicate));
    },
    partitionMap: function(fa, f) {
      return pipe(fa, partitionMap14(f));
    }
  };
}
var Functor13 = {
  URI: URI17,
  map: _map13
};
var as5 = dual(2, as(Functor13));
var asUnit5 = asUnit(Functor13);
var flap14 = flap(Functor13);
var Pointed11 = {
  URI: URI17,
  of: of11
};
var Bifunctor4 = {
  URI: URI17,
  bimap: mapBoth2,
  mapLeft: mapError2
};
var ApplyPar = {
  URI: URI17,
  map: _map13,
  ap: _ap11
};
var apFirst12 = apFirst(ApplyPar);
var apFirstW3 = apFirst12;
var apSecond12 = apSecond(ApplyPar);
var apSecondW3 = apSecond12;
var ApplicativePar = {
  URI: URI17,
  map: _map13,
  ap: _ap11,
  of: of11
};
var ApplicativeSeq = {
  URI: URI17,
  map: _map13,
  ap: _apSeq,
  of: of11
};
var Chain11 = {
  URI: URI17,
  map: _map13,
  ap: _ap11,
  chain: flatMap12
};
var Monad11 = {
  URI: URI17,
  map: _map13,
  ap: _ap11,
  of: of11,
  chain: flatMap12
};
var FromEither5 = {
  URI: URI17,
  fromEither: fromEither4
};
var FromIO2 = {
  URI: URI17,
  fromIO: fromIO2
};
var tap8 = dual(2, tap(Chain11));
var tapEither3 = dual(2, tapEither(FromEither5, Chain11));
var tapIO2 = dual(2, tapIO(FromIO2, Chain11));
var Alt8 = {
  URI: URI17,
  map: _map13,
  alt: _alt8
};
var MonadIO2 = {
  URI: URI17,
  map: _map13,
  ap: _ap11,
  of: of11,
  chain: flatMap12,
  fromIO: fromIO2
};
var MonadThrow3 = {
  URI: URI17,
  map: _map13,
  ap: _ap11,
  of: of11,
  chain: flatMap12,
  throwError: throwError3
};
var fromIOK2 = fromIOK(FromIO2);
var chainFirstIOK2 = tapIO2;
var fromOption5 = fromOption(FromEither5);
var fromOptionK5 = fromOptionK(FromEither5);
var chainOptionK3 = chainOptionK(FromEither5, Chain11);
var chainOptionKW2 = chainOptionK3;
var _FromEither2 = {
  fromEither: FromEither5.fromEither
};
var _FromIO = {
  fromIO: fromIO2
};
var liftNullable3 = liftNullable(_FromEither2);
var liftOption3 = liftOption(_FromEither2);
var _FlatMap2 = {
  flatMap: flatMap12
};
var flatMapNullable3 = flatMapNullable(_FromEither2, _FlatMap2);
var flatMapOption3 = flatMapOption(_FromEither2, _FlatMap2);
var flatMapEither2 = flatMapEither(_FromEither2, _FlatMap2);
var flatMapIO2 = flatMapIO(_FromIO, _FlatMap2);
var chainIOK2 = flatMapIO2;
var chainEitherK3 = flatMapEither2;
var chainEitherKW = flatMapEither2;
var chainFirstEitherK3 = tapEither3;
var chainFirstEitherKW = tapEither3;
var fromPredicate6 = fromPredicate(FromEither5);
var filterOrElse3 = filterOrElse(FromEither5, Chain11);
var filterOrElseW2 = filterOrElse3;
var fromEitherK5 = fromEitherK(FromEither5);
var bracket = function(acquire, use, release) {
  return bracketW(acquire, use, release);
};
var bracketW = function(acquire, use, release) {
  return flatMap12(acquire, function(a) {
    return flatMap11(use(a), function(e) {
      return flatMap12(release(a, e), function() {
        return of10(e);
      });
    });
  });
};
var Do10 = of11(emptyRecord);
var bindTo12 = bindTo(Functor13);
var let_12 = let_(Functor13);
var bind12 = bind(Chain11);
var bindW3 = bind12;
var apS12 = apS(ApplyPar);
var apSW3 = apS12;
var ApT5 = of11(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex6 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex5(f), map14(traverseReadonlyNonEmptyArrayWithIndex2(SK)));
};
var traverseReadonlyArrayWithIndex6 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex6(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT5;
  };
};
var traverseReadonlyNonEmptyArrayWithIndexSeq = function(f) {
  return function(as15) {
    return function() {
      var e = f(0, head(as15))();
      if (isLeft(e)) {
        return e;
      }
      var out = [e.right];
      for (var i = 1; i < as15.length; i++) {
        var e_1 = f(i, as15[i])();
        if (isLeft(e_1)) {
          return e_1;
        }
        out.push(e_1.right);
      }
      return right(out);
    };
  };
};
var traverseReadonlyArrayWithIndexSeq = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT5;
  };
};
var traverseArrayWithIndex6 = traverseReadonlyArrayWithIndex6;
var traverseArray6 = function(f) {
  return traverseReadonlyArrayWithIndex6(function(_, a) {
    return f(a);
  });
};
var sequenceArray6 = traverseArray6(identity);
var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;
var traverseSeqArray = function(f) {
  return traverseReadonlyArrayWithIndexSeq(function(_, a) {
    return f(a);
  });
};
var sequenceSeqArray = traverseSeqArray(identity);
var Applicative11 = ApplicativePar;
var chain12 = flatMap12;
var chainW3 = flatMap12;
var chainFirst12 = tap8;
var chainFirstW3 = tap8;
var orElseFirst2 = tapError2;
var orElseFirstW = tapError2;
var ioEither = {
  URI: URI17,
  bimap: mapBoth2,
  mapLeft: mapError2,
  map: _map13,
  of: of11,
  ap: _ap11,
  chain: flatMap12,
  alt: _alt8,
  fromIO: fromIO2,
  throwError: throwError3
};
var getApplySemigroup4 = getApplySemigroup(ApplyPar);
var getApplyMonoid3 = getApplicativeMonoid(ApplicativePar);
var getSemigroup13 = function(S) {
  return getApplySemigroup(Apply10)(getSemigroup9(S));
};
function getIOValidation(SE) {
  var applicativeIOValidation = getApplicativeIOValidation(SE);
  var altIOValidation = getAltIOValidation(SE);
  return {
    URI: URI17,
    _E: void 0,
    map: _map13,
    ap: applicativeIOValidation.ap,
    of: of11,
    chain: flatMap12,
    bimap: mapBoth2,
    mapLeft: mapError2,
    alt: altIOValidation.alt,
    fromIO: fromIO2,
    throwError: throwError3
  };
}

// node_modules/fp-ts/es6/IOOption.js
var IOOption_exports = {};
__export(IOOption_exports, {
  Alt: () => Alt9,
  Alternative: () => Alternative4,
  ApT: () => ApT6,
  Applicative: () => Applicative12,
  Apply: () => Apply11,
  Chain: () => Chain12,
  Compactable: () => Compactable4,
  Do: () => Do11,
  Filterable: () => Filterable4,
  FromEither: () => FromEither6,
  FromIO: () => FromIO3,
  Functor: () => Functor14,
  Monad: () => Monad12,
  MonadIO: () => MonadIO3,
  Pointed: () => Pointed12,
  URI: () => URI18,
  Zero: () => Zero4,
  alt: () => alt11,
  altW: () => altW9,
  ap: () => ap15,
  apFirst: () => apFirst13,
  apS: () => apS13,
  apSecond: () => apSecond13,
  as: () => as6,
  asUnit: () => asUnit6,
  bind: () => bind13,
  bindTo: () => bindTo13,
  chain: () => chain14,
  chainEitherK: () => chainEitherK4,
  chainFirst: () => chainFirst13,
  chainFirstEitherK: () => chainFirstEitherK4,
  chainFirstIOK: () => chainFirstIOK3,
  chainIOK: () => chainIOK3,
  chainNullableK: () => chainNullableK5,
  chainOptionK: () => chainOptionK5,
  compact: () => compact5,
  filter: () => filter7,
  filterMap: () => filterMap5,
  flap: () => flap15,
  flatMap: () => flatMap14,
  flatMapEither: () => flatMapEither3,
  flatMapIO: () => flatMapIO3,
  flatMapNullable: () => flatMapNullable4,
  flatMapOption: () => flatMapOption4,
  flatten: () => flatten12,
  fold: () => fold8,
  fromEither: () => fromEither6,
  fromEitherK: () => fromEitherK6,
  fromIO: () => fromIO3,
  fromIOEither: () => fromIOEither,
  fromIOK: () => fromIOK3,
  fromNullable: () => fromNullable5,
  fromNullableK: () => fromNullableK5,
  fromOption: () => fromOption6,
  fromOptionK: () => fromOptionK7,
  fromPredicate: () => fromPredicate8,
  getOrElse: () => getOrElse6,
  getOrElseW: () => getOrElseW4,
  guard: () => guard5,
  let: () => let_13,
  map: () => map17,
  match: () => match9,
  matchE: () => matchE4,
  matchEW: () => matchEW2,
  matchW: () => matchW7,
  none: () => none3,
  of: () => of12,
  partition: () => partition5,
  partitionMap: () => partitionMap5,
  separate: () => separate5,
  some: () => some6,
  tap: () => tap9,
  tapEither: () => tapEither4,
  tapIO: () => tapIO3,
  toNullable: () => toNullable2,
  toUndefined: () => toUndefined2,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex7,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex7,
  zero: () => zero5
});

// node_modules/fp-ts/es6/OptionT.js
var OptionT_exports = {};
__export(OptionT_exports, {
  alt: () => alt10,
  ap: () => ap14,
  chain: () => chain13,
  chainNullableK: () => chainNullableK4,
  chainOptionK: () => chainOptionK4,
  flatMap: () => flatMap13,
  fromEither: () => fromEither5,
  fromF: () => fromF,
  fromNullable: () => fromNullable4,
  fromNullableK: () => fromNullableK4,
  fromOptionK: () => fromOptionK6,
  fromPredicate: () => fromPredicate7,
  getOptionM: () => getOptionM,
  getOrElse: () => getOrElse5,
  map: () => map16,
  match: () => match8,
  matchE: () => matchE3,
  some: () => some5,
  zero: () => zero4
});
function some5(F) {
  return flow(some4, F.of);
}
function zero4(F) {
  return constant(F.of(none2));
}
function fromF(F) {
  return function(ma) {
    return F.map(ma, some4);
  };
}
function fromNullable4(F) {
  return flow(fromNullable, F.of);
}
function fromNullableK4(F) {
  var fromNullableF = fromNullable4(F);
  return function(f) {
    return flow(f, fromNullableF);
  };
}
function chainNullableK4(M) {
  var chainM = chain13(M);
  var fromNullableKM = fromNullableK4(M);
  return function(f) {
    return chainM(fromNullableKM(f));
  };
}
function fromOptionK6(F) {
  return function(f) {
    return flow(f, F.of);
  };
}
function chainOptionK4(M) {
  var chainM = chain13(M);
  var fromOptionKM = fromOptionK6(M);
  return function(f) {
    return chainM(fromOptionKM(f));
  };
}
function fromPredicate7(F) {
  return function(predicate) {
    return function(a) {
      return F.of(fromPredicate4(predicate)(a));
    };
  };
}
function fromEither5(F) {
  return flow(fromEither3, F.of);
}
function match8(F) {
  return function(onNone, onSome) {
    return function(ma) {
      return F.map(ma, match4(onNone, onSome));
    };
  };
}
function matchE3(M) {
  return function(onNone, onSome) {
    return function(ma) {
      return M.chain(ma, match4(onNone, onSome));
    };
  };
}
function getOrElse5(M) {
  return function(onNone) {
    return function(fa) {
      return M.chain(fa, match4(onNone, M.of));
    };
  };
}
function map16(F) {
  return map(F, Functor6);
}
function ap14(F) {
  return ap(F, Apply5);
}
function chain13(M) {
  var flatMapM = flatMap13(M);
  return function(f) {
    return function(ma) {
      return flatMapM(ma, f);
    };
  };
}
function flatMap13(M) {
  var zeroM = zero4(M);
  return function(ma, f) {
    return M.chain(ma, match4(function() {
      return zeroM();
    }, f));
  };
}
function alt10(M) {
  var _some = some5(M);
  return function(second2) {
    return function(first3) {
      return M.chain(first3, match4(second2, _some));
    };
  };
}
function getOptionM(M) {
  var apM = ap14(M);
  var mapM = map16(M);
  var chainM = chain13(M);
  var altM = alt10(M);
  var foldM2 = matchE3(M);
  var getOrElseM = getOrElse5(M);
  var zeroM = zero4(M);
  return {
    map: function(fa, f) {
      return pipe(fa, mapM(f));
    },
    ap: function(fab, fa) {
      return pipe(fab, apM(fa));
    },
    of: some5(M),
    chain: function(ma, f) {
      return pipe(ma, chainM(f));
    },
    alt: function(fa, that) {
      return pipe(fa, altM(that));
    },
    fold: function(fa, onNone, onSome) {
      return pipe(fa, foldM2(onNone, onSome));
    },
    getOrElse: function(fa, onNone) {
      return pipe(fa, getOrElseM(onNone));
    },
    fromM: fromF(M),
    none: function() {
      return zeroM();
    }
  };
}

// node_modules/fp-ts/es6/IOOption.js
var some6 = some5(Pointed10);
var fromPredicate8 = fromPredicate7(Pointed10);
var fromOption6 = of10;
var fromEither6 = fromEither5(Pointed10);
var fromIO3 = fromF(Functor12);
var fromIOEither = map14(fromEither3);
var match9 = match8(Functor12);
var matchW7 = match9;
var matchE4 = matchE3(Chain10);
var fold8 = matchE4;
var matchEW2 = matchE4;
var getOrElse6 = getOrElse5(Monad10);
var getOrElseW4 = getOrElse6;
var toUndefined2 = map14(toUndefined);
var toNullable2 = map14(toNullable);
var fromNullable5 = fromNullable4(Pointed10);
var fromNullableK5 = fromNullableK4(Pointed10);
var chainNullableK5 = chainNullableK4(Monad10);
var fromOptionK7 = fromOptionK6(Pointed10);
var map17 = map16(Functor12);
var ap15 = ap14(Apply10);
var of12 = some6;
var flatMap14 = dual(2, flatMap13(Monad10));
var flatten12 = flatMap14(identity);
var alt11 = alt10(Monad10);
var altW9 = alt11;
var zero5 = zero4(Pointed10);
var none3 = zero5();
var compact5 = compact4(Functor12, Compactable3);
var separate5 = separate4(Functor12, Compactable3, Functor6);
var filter7 = filter6(Functor12, Filterable3);
var filterMap5 = filterMap4(Functor12, Filterable3);
var partition5 = partition4(Functor12, Filterable3);
var partitionMap5 = partitionMap4(Functor12, Filterable3);
var _map14 = function(fa, f) {
  return pipe(fa, map17(f));
};
var _ap12 = function(fab, fa) {
  return pipe(fab, ap15(fa));
};
var _alt9 = function(fa, that) {
  return pipe(fa, alt11(that));
};
var _filter4 = function(fa, predicate) {
  return pipe(fa, filter7(predicate));
};
var _filterMap4 = function(fa, f) {
  return pipe(fa, filterMap5(f));
};
var _partition4 = function(fa, predicate) {
  return pipe(fa, partition5(predicate));
};
var _partitionMap4 = function(fa, f) {
  return pipe(fa, partitionMap5(f));
};
var URI18 = "IOOption";
var Functor14 = {
  URI: URI18,
  map: _map14
};
var as6 = dual(2, as(Functor14));
var asUnit6 = asUnit(Functor14);
var flap15 = flap(Functor14);
var Pointed12 = {
  URI: URI18,
  of: of12
};
var Apply11 = {
  URI: URI18,
  map: _map14,
  ap: _ap12
};
var apFirst13 = apFirst(Apply11);
var apSecond13 = apSecond(Apply11);
var Applicative12 = {
  URI: URI18,
  map: _map14,
  ap: _ap12,
  of: of12
};
var Chain12 = {
  URI: URI18,
  map: _map14,
  ap: _ap12,
  chain: flatMap14
};
var FromEither6 = {
  URI: URI18,
  fromEither: fromEither6
};
var FromIO3 = {
  URI: URI18,
  fromIO: fromIO3
};
var tap9 = dual(2, tap(Chain12));
var tapEither4 = dual(2, tapEither(FromEither6, Chain12));
var tapIO3 = dual(2, tapIO(FromIO3, Chain12));
var Alt9 = {
  URI: URI18,
  map: _map14,
  alt: _alt9
};
var Zero4 = {
  URI: URI18,
  zero: zero5
};
var guard5 = guard(Zero4, Pointed12);
var Alternative4 = {
  URI: URI18,
  map: _map14,
  ap: _ap12,
  of: of12,
  alt: _alt9,
  zero: zero5
};
var Monad12 = {
  URI: URI18,
  map: _map14,
  ap: _ap12,
  of: of12,
  chain: flatMap14
};
var MonadIO3 = {
  URI: URI18,
  map: _map14,
  ap: _ap12,
  of: of12,
  chain: flatMap14,
  fromIO: fromIO3
};
var Compactable4 = {
  URI: URI18,
  compact: compact5,
  separate: separate5
};
var Filterable4 = {
  URI: URI18,
  map: _map14,
  compact: compact5,
  separate: separate5,
  filter: _filter4,
  filterMap: _filterMap4,
  partition: _partition4,
  partitionMap: _partitionMap4
};
var _FlatMap3 = {
  flatMap: flatMap14
};
var _FromIO2 = {
  fromIO: FromIO3.fromIO
};
var _FromEither3 = {
  fromEither: fromEither6
};
var flatMapIO3 = flatMapIO(_FromIO2, _FlatMap3);
var flatMapOption4 = dual(2, function(self, f) {
  return flatMap14(self, fromOptionK7(f));
});
var flatMapEither3 = flatMapEither(_FromEither3, _FlatMap3);
var flatMapNullable4 = dual(2, function(self, f) {
  return flatMap14(self, fromNullableK5(f));
});
var fromIOK3 = fromIOK(FromIO3);
var chainIOK3 = flatMapIO3;
var chainFirstIOK3 = tapIO3;
var fromEitherK6 = fromEitherK(FromEither6);
var chainEitherK4 = flatMapEither3;
var chainFirstEitherK4 = tapEither4;
var chainOptionK5 = flatMapOption4;
var Do11 = of12(emptyRecord);
var bindTo13 = bindTo(Functor14);
var let_13 = let_(Functor14);
var bind13 = bind(Chain12);
var apS13 = apS(Apply11);
var ApT6 = of12(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex7 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex5(f), map14(traverseReadonlyNonEmptyArrayWithIndex(SK)));
};
var traverseReadonlyArrayWithIndex7 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex7(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT6;
  };
};
var chain14 = flatMap14;
var chainFirst13 = tap9;

// node_modules/fp-ts/es6/IORef.js
var IORef_exports = {};
__export(IORef_exports, {
  IORef: () => IORef,
  newIORef: () => newIORef
});
var IORef = (
  /** @class */
  function() {
    function IORef2(value) {
      var _this = this;
      this.value = value;
      this.read = function() {
        return _this.value;
      };
      this.write = this.write.bind(this);
      this.modify = this.modify.bind(this);
    }
    IORef2.prototype.write = function(a) {
      var _this = this;
      return function() {
        _this.value = a;
      };
    };
    IORef2.prototype.modify = function(f) {
      var _this = this;
      return function() {
        _this.value = f(_this.value);
      };
    };
    return IORef2;
  }()
);
function newIORef(a) {
  return function() {
    return new IORef(a);
  };
}

// node_modules/fp-ts/es6/JoinSemilattice.js
var JoinSemilattice_exports = {};

// node_modules/fp-ts/es6/Json.js
var Json_exports = {};
__export(Json_exports, {
  parse: () => parse,
  stringify: () => stringify
});
var parse = function(s) {
  return tryCatch2(function() {
    return JSON.parse(s);
  }, identity);
};
var stringify = function(a) {
  return tryCatch2(function() {
    var s = JSON.stringify(a);
    if (typeof s !== "string") {
      throw new Error("Converting unsupported structure to JSON");
    }
    return s;
  }, identity);
};

// node_modules/fp-ts/es6/Lattice.js
var Lattice_exports = {};

// node_modules/fp-ts/es6/Map.js
var Map_exports = {};
__export(Map_exports, {
  Compactable: () => Compactable6,
  Filterable: () => Filterable6,
  Functor: () => Functor16,
  URI: () => URI20,
  collect: () => collect2,
  compact: () => compact7,
  deleteAt: () => deleteAt4,
  difference: () => difference4,
  elem: () => elem6,
  empty: () => empty6,
  filter: () => filter9,
  filterMap: () => filterMap7,
  filterMapWithIndex: () => filterMapWithIndex4,
  filterWithIndex: () => filterWithIndex6,
  flap: () => flap17,
  foldMap: () => foldMap10,
  foldMapWithIndex: () => foldMapWithIndex7,
  fromFoldable: () => fromFoldable2,
  getDifferenceMagma: () => getDifferenceMagma4,
  getEq: () => getEq10,
  getFilterableWithIndex: () => getFilterableWithIndex2,
  getFoldable: () => getFoldable2,
  getFoldableWithIndex: () => getFoldableWithIndex2,
  getIntersectionSemigroup: () => getIntersectionSemigroup4,
  getMonoid: () => getMonoid12,
  getShow: () => getShow10,
  getTraversableWithIndex: () => getTraversableWithIndex2,
  getUnionMonoid: () => getUnionMonoid4,
  getUnionSemigroup: () => getUnionSemigroup6,
  getWitherable: () => getWitherable3,
  insertAt: () => insertAt6,
  intersection: () => intersection4,
  isEmpty: () => isEmpty4,
  isSubmap: () => isSubmap2,
  keys: () => keys2,
  lookup: () => lookup4,
  lookupWithKey: () => lookupWithKey2,
  map: () => map19,
  mapWithIndex: () => mapWithIndex7,
  map_: () => map_,
  member: () => member2,
  modifyAt: () => modifyAt6,
  partition: () => partition7,
  partitionMap: () => partitionMap7,
  partitionMapWithIndex: () => partitionMapWithIndex4,
  partitionWithIndex: () => partitionWithIndex4,
  pop: () => pop2,
  reduce: () => reduce10,
  reduceRight: () => reduceRight10,
  reduceRightWithIndex: () => reduceRightWithIndex7,
  reduceWithIndex: () => reduceWithIndex7,
  separate: () => separate7,
  singleton: () => singleton3,
  size: () => size4,
  toArray: () => toArray3,
  toUnfoldable: () => toUnfoldable2,
  union: () => union6,
  updateAt: () => updateAt6,
  upsertAt: () => upsertAt2,
  values: () => values2
});

// node_modules/fp-ts/es6/ReadonlyMap.js
var ReadonlyMap_exports = {};
__export(ReadonlyMap_exports, {
  Compactable: () => Compactable5,
  Filterable: () => Filterable5,
  Functor: () => Functor15,
  URI: () => URI19,
  collect: () => collect,
  compact: () => compact6,
  deleteAt: () => deleteAt3,
  difference: () => difference3,
  elem: () => elem5,
  empty: () => empty5,
  filter: () => filter8,
  filterMap: () => filterMap6,
  filterMapWithIndex: () => filterMapWithIndex3,
  filterWithIndex: () => filterWithIndex5,
  flap: () => flap16,
  foldMap: () => foldMap9,
  foldMapWithIndex: () => foldMapWithIndex6,
  fromFoldable: () => fromFoldable,
  fromMap: () => fromMap,
  getDifferenceMagma: () => getDifferenceMagma3,
  getEq: () => getEq9,
  getFilterableWithIndex: () => getFilterableWithIndex,
  getFoldable: () => getFoldable,
  getFoldableWithIndex: () => getFoldableWithIndex,
  getFunctorWithIndex: () => getFunctorWithIndex,
  getIntersectionSemigroup: () => getIntersectionSemigroup3,
  getMonoid: () => getMonoid11,
  getShow: () => getShow9,
  getTraversable: () => getTraversable,
  getTraversableWithIndex: () => getTraversableWithIndex,
  getUnionMonoid: () => getUnionMonoid3,
  getUnionSemigroup: () => getUnionSemigroup5,
  getWitherable: () => getWitherable2,
  insertAt: () => insertAt5,
  intersection: () => intersection3,
  isEmpty: () => isEmpty3,
  isSubmap: () => isSubmap,
  keys: () => keys,
  lookup: () => lookup3,
  lookupWithKey: () => lookupWithKey,
  map: () => map18,
  mapWithIndex: () => mapWithIndex6,
  member: () => member,
  modifyAt: () => modifyAt5,
  partition: () => partition6,
  partitionMap: () => partitionMap6,
  partitionMapWithIndex: () => partitionMapWithIndex3,
  partitionWithIndex: () => partitionWithIndex3,
  pop: () => pop,
  readonlyMap: () => readonlyMap,
  reduce: () => reduce9,
  reduceRight: () => reduceRight9,
  reduceRightWithIndex: () => reduceRightWithIndex6,
  reduceWithIndex: () => reduceWithIndex6,
  separate: () => separate6,
  singleton: () => singleton2,
  size: () => size3,
  toMap: () => toMap,
  toReadonlyArray: () => toReadonlyArray2,
  toUnfoldable: () => toUnfoldable,
  union: () => union5,
  updateAt: () => updateAt5,
  upsertAt: () => upsertAt,
  values: () => values
});
var fromMap = function(m) {
  return new Map(m);
};
function toMap(m) {
  return new Map(m);
}
function getShow9(SK2, SA) {
  return {
    show: function(m) {
      var entries = [];
      m.forEach(function(a, k) {
        entries.push("[".concat(SK2.show(k), ", ").concat(SA.show(a), "]"));
      });
      return "new Map([".concat(entries.sort().join(", "), "])");
    }
  };
}
var size3 = function(m) {
  return m.size;
};
var isEmpty3 = function(m) {
  return m.size === 0;
};
function member(E) {
  var lookupE = lookup3(E);
  return function(k, m) {
    if (m === void 0) {
      var memberE_1 = member(E);
      return function(m2) {
        return memberE_1(k, m2);
      };
    }
    return isSome(lookupE(k, m));
  };
}
function elem5(E) {
  return function(a, m) {
    if (m === void 0) {
      var elemE_1 = elem5(E);
      return function(m2) {
        return elemE_1(a, m2);
      };
    }
    var values3 = m.values();
    var e;
    while (!(e = values3.next()).done) {
      var v = e.value;
      if (E.equals(a, v)) {
        return true;
      }
    }
    return false;
  };
}
var keys = function(O) {
  return function(m) {
    return Array.from(m.keys()).sort(O.compare);
  };
};
var values = function(O) {
  return function(m) {
    return Array.from(m.values()).sort(O.compare);
  };
};
function collect(O) {
  var keysO = keys(O);
  return function(f) {
    return function(m) {
      var out = [];
      var ks = keysO(m);
      for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
        var key = ks_1[_i];
        out.push(f(key, m.get(key)));
      }
      return out;
    };
  };
}
var toReadonlyArray2 = function(O) {
  return collect(O)(function(k, a) {
    return [k, a];
  });
};
function toUnfoldable(ord2, U) {
  var toReadonlyArrayO = toReadonlyArray2(ord2);
  return function(d) {
    var kas = toReadonlyArrayO(d);
    var len = kas.length;
    return U.unfold(0, function(b) {
      return b < len ? some([kas[b], b + 1]) : none;
    });
  };
}
var upsertAt = function(E) {
  var lookupWithKeyE = lookupWithKey(E);
  return function(k, a) {
    var lookupWithKeyEk = lookupWithKeyE(k);
    return function(m) {
      var found = lookupWithKeyEk(m);
      if (isNone(found)) {
        var out = new Map(m);
        out.set(k, a);
        return out;
      } else if (found.value[1] !== a) {
        var out = new Map(m);
        out.set(found.value[0], a);
        return out;
      }
      return m;
    };
  };
};
var deleteAt3 = function(E) {
  var lookupWithKeyE = lookupWithKey(E);
  return function(k) {
    return function(m) {
      var found = lookupWithKeyE(k, m);
      if (isSome(found)) {
        var r = new Map(m);
        r.delete(found.value[0]);
        return r;
      }
      return m;
    };
  };
};
var updateAt5 = function(E) {
  var modifyAtE = modifyAt5(E);
  return function(k, a) {
    return modifyAtE(k, function() {
      return a;
    });
  };
};
var modifyAt5 = function(E) {
  var lookupWithKeyE = lookupWithKey(E);
  return function(k, f) {
    return function(m) {
      var found = lookupWithKeyE(k, m);
      if (isNone(found)) {
        return none;
      }
      var _a = found.value, fk = _a[0], fv = _a[1];
      var next = f(fv);
      if (next === fv) {
        return some(m);
      }
      var r = new Map(m);
      r.set(fk, next);
      return some(r);
    };
  };
};
function pop(E) {
  var lookupE = lookup3(E);
  var deleteAtE = deleteAt3(E);
  return function(k) {
    var deleteAtEk = deleteAtE(k);
    return function(m) {
      return pipe(lookupE(k, m), map7(function(a) {
        return [a, deleteAtEk(m)];
      }));
    };
  };
}
function lookupWithKey(E) {
  return function(k, m) {
    if (m === void 0) {
      var lookupWithKeyE_1 = lookupWithKey(E);
      return function(m2) {
        return lookupWithKeyE_1(k, m2);
      };
    }
    var entries = m.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, ka = _a[0], a = _a[1];
      if (E.equals(ka, k)) {
        return some([ka, a]);
      }
    }
    return none;
  };
}
function lookup3(E) {
  var lookupWithKeyE = lookupWithKey(E);
  return function(k, m) {
    if (m === void 0) {
      var lookupE_1 = lookup3(E);
      return function(m2) {
        return lookupE_1(k, m2);
      };
    }
    return pipe(lookupWithKeyE(k, m), map7(function(_a) {
      var _ = _a[0], a = _a[1];
      return a;
    }));
  };
}
function isSubmap(SK2, SA) {
  var lookupWithKeyS = lookupWithKey(SK2);
  return function(me, that) {
    if (that === void 0) {
      var isSubmapSKSA_1 = isSubmap(SK2, SA);
      return function(that2) {
        return isSubmapSKSA_1(that2, me);
      };
    }
    var entries = me.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      var d2OptA = lookupWithKeyS(k, that);
      if (isNone(d2OptA) || !SK2.equals(k, d2OptA.value[0]) || !SA.equals(a, d2OptA.value[1])) {
        return false;
      }
    }
    return true;
  };
}
var empty5 = (
  // the type annotation here is intended (otherwise it doesn't type-check)
  /* @__PURE__ */ new Map()
);
function getEq9(SK2, SA) {
  var isSubmapSKSA = isSubmap(SK2, SA);
  return fromEquals(function(x, y) {
    return isSubmapSKSA(x, y) && isSubmapSKSA(y, x);
  });
}
function getMonoid11(SK2, SA) {
  var lookupWithKeyS = lookupWithKey(SK2);
  return {
    concat: function(mx, my) {
      if (isEmpty3(mx)) {
        return my;
      }
      if (isEmpty3(my)) {
        return mx;
      }
      var r = new Map(mx);
      var entries = my.entries();
      var e;
      while (!(e = entries.next()).done) {
        var _a = e.value, k = _a[0], a = _a[1];
        var mxOptA = lookupWithKeyS(k, mx);
        if (isSome(mxOptA)) {
          r.set(mxOptA.value[0], SA.concat(mxOptA.value[1], a));
        } else {
          r.set(k, a);
        }
      }
      return r;
    },
    empty: empty5
  };
}
var singleton2 = function(k, a) {
  return /* @__PURE__ */ new Map([[k, a]]);
};
function fromFoldable(E, M, F) {
  return function(fka) {
    var lookupWithKeyE = lookupWithKey(E);
    return F.reduce(fka, /* @__PURE__ */ new Map(), function(b, _a) {
      var k = _a[0], a = _a[1];
      var bOpt = lookupWithKeyE(k, b);
      if (isSome(bOpt)) {
        b.set(bOpt.value[0], M.concat(bOpt.value[1], a));
      } else {
        b.set(k, a);
      }
      return b;
    });
  };
}
var _mapWithIndex5 = function(fa, f) {
  var m = /* @__PURE__ */ new Map();
  var entries = fa.entries();
  var e;
  while (!(e = entries.next()).done) {
    var _a = e.value, key = _a[0], a = _a[1];
    m.set(key, f(key, a));
  }
  return m;
};
var partitionMapWithIndex3 = function(f) {
  return function(fa) {
    var left14 = /* @__PURE__ */ new Map();
    var right14 = /* @__PURE__ */ new Map();
    var entries = fa.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      var ei = f(k, a);
      if (isLeft(ei)) {
        left14.set(k, ei.left);
      } else {
        right14.set(k, ei.right);
      }
    }
    return separated(left14, right14);
  };
};
function partitionWithIndex3(predicateWithIndex) {
  return function(m) {
    var left14 = /* @__PURE__ */ new Map();
    var right14 = /* @__PURE__ */ new Map();
    var entries = m.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      if (predicateWithIndex(k, a)) {
        right14.set(k, a);
      } else {
        left14.set(k, a);
      }
    }
    return separated(left14, right14);
  };
}
var filterMapWithIndex3 = function(f) {
  return function(fa) {
    var m = /* @__PURE__ */ new Map();
    var entries = fa.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      var o = f(k, a);
      if (isSome(o)) {
        m.set(k, o.value);
      }
    }
    return m;
  };
};
function filterWithIndex5(predicateWithIndex) {
  return function(m) {
    var out = /* @__PURE__ */ new Map();
    var entries = m.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      if (predicateWithIndex(k, a)) {
        out.set(k, a);
      }
    }
    return out;
  };
}
var _map15 = function(fa, f) {
  return _mapWithIndex5(fa, function(_, a) {
    return f(a);
  });
};
var _filter5 = function(fa, p) {
  return _filterWithIndex3(fa, function(_, a) {
    return p(a);
  });
};
var _filterMap5 = function(fa, f) {
  return _filterMapWithIndex3(fa, function(_, a) {
    return f(a);
  });
};
var _partition5 = function(fa, predicate) {
  return _partitionWithIndex3(fa, function(_, a) {
    return predicate(a);
  });
};
var _partitionMap5 = function(fa, f) {
  return _partitionMapWithIndex3(fa, function(_, a) {
    return f(a);
  });
};
var _filterWithIndex3 = function(fa, p) {
  return pipe(fa, filterWithIndex5(p));
};
var _filterMapWithIndex3 = function(fa, f) {
  return pipe(fa, filterMapWithIndex3(f));
};
var _partitionWithIndex3 = function(fa, p) {
  return pipe(fa, partitionWithIndex3(p));
};
var _partitionMapWithIndex3 = function(fa, f) {
  return pipe(fa, partitionMapWithIndex3(f));
};
var compact6 = function(fa) {
  var m = /* @__PURE__ */ new Map();
  var entries = fa.entries();
  var e;
  while (!(e = entries.next()).done) {
    var _a = e.value, k = _a[0], oa = _a[1];
    if (isSome(oa)) {
      m.set(k, oa.value);
    }
  }
  return m;
};
var filter8 = function(predicate) {
  return function(fa) {
    return _filter5(fa, predicate);
  };
};
var filterMap6 = function(f) {
  return function(fa) {
    return _filterMap5(fa, f);
  };
};
var map18 = function(f) {
  return function(fa) {
    return _map15(fa, f);
  };
};
var mapWithIndex6 = function(f) {
  return function(fa) {
    return _mapWithIndex5(fa, f);
  };
};
var partition6 = function(predicate) {
  return function(fa) {
    return _partition5(fa, predicate);
  };
};
var partitionMap6 = function(f) {
  return function(fa) {
    return _partitionMap5(fa, f);
  };
};
var separate6 = function(fa) {
  var left14 = /* @__PURE__ */ new Map();
  var right14 = /* @__PURE__ */ new Map();
  var entries = fa.entries();
  var e;
  while (!(e = entries.next()).done) {
    var _a = e.value, k = _a[0], ei = _a[1];
    if (isLeft(ei)) {
      left14.set(k, ei.left);
    } else {
      right14.set(k, ei.right);
    }
  }
  return separated(left14, right14);
};
var URI19 = "ReadonlyMap";
var getUnionSemigroup5 = function(E, S) {
  var unionES = union5(E, S);
  return {
    concat: function(first3, second2) {
      return unionES(second2)(first3);
    }
  };
};
var getUnionMonoid3 = function(E, S) {
  return {
    concat: getUnionSemigroup5(E, S).concat,
    empty: empty5
  };
};
var getIntersectionSemigroup3 = function(E, S) {
  var intersectionES = intersection3(E, S);
  return {
    concat: function(first3, second2) {
      return intersectionES(second2)(first3);
    }
  };
};
var getDifferenceMagma3 = function(E) {
  return function() {
    var differenceE = difference3(E);
    return {
      concat: function(first3, second2) {
        return differenceE(second2)(first3);
      }
    };
  };
};
function getFilterableWithIndex() {
  return {
    URI: URI19,
    _E: void 0,
    map: _map15,
    mapWithIndex: _mapWithIndex5,
    compact: compact6,
    separate: separate6,
    filter: _filter5,
    filterMap: _filterMap5,
    partition: _partition5,
    partitionMap: _partitionMap5,
    partitionMapWithIndex: _partitionMapWithIndex3,
    partitionWithIndex: _partitionWithIndex3,
    filterMapWithIndex: _filterMapWithIndex3,
    filterWithIndex: _filterWithIndex3
  };
}
var Functor15 = {
  URI: URI19,
  map: _map15
};
var flap16 = flap(Functor15);
var getFunctorWithIndex = function() {
  return {
    URI: URI19,
    _E: void 0,
    map: _map15,
    mapWithIndex: _mapWithIndex5
  };
};
var Compactable5 = {
  URI: URI19,
  compact: compact6,
  separate: separate6
};
var Filterable5 = {
  URI: URI19,
  map: _map15,
  compact: compact6,
  separate: separate6,
  filter: _filter5,
  filterMap: _filterMap5,
  partition: _partition5,
  partitionMap: _partitionMap5
};
var reduce9 = function(O) {
  var reduceWithIndexO = reduceWithIndex6(O);
  return function(b, f) {
    return reduceWithIndexO(b, function(_, b2, a) {
      return f(b2, a);
    });
  };
};
var foldMap9 = function(O) {
  var foldMapWithIndexO = foldMapWithIndex6(O);
  return function(M) {
    var foldMapWithIndexOM = foldMapWithIndexO(M);
    return function(f) {
      return foldMapWithIndexOM(function(_, a) {
        return f(a);
      });
    };
  };
};
var reduceRight9 = function(O) {
  var reduceRightWithIndexO = reduceRightWithIndex6(O);
  return function(b, f) {
    return reduceRightWithIndexO(b, function(_, b2, a) {
      return f(b2, a);
    });
  };
};
var getFoldable = function(O) {
  var reduceO = reduce9(O);
  var foldMapO = foldMap9(O);
  var reduceRightO = reduceRight9(O);
  return {
    URI: URI19,
    _E: void 0,
    reduce: function(fa, b, f) {
      return pipe(fa, reduceO(b, f));
    },
    foldMap: function(M) {
      var foldMapOM = foldMapO(M);
      return function(fa, f) {
        return pipe(fa, foldMapOM(f));
      };
    },
    reduceRight: function(fa, b, f) {
      return pipe(fa, reduceRightO(b, f));
    }
  };
};
var reduceWithIndex6 = function(O) {
  var keysO = keys(O);
  return function(b, f) {
    return function(m) {
      var out = b;
      for (var _i = 0, _a = keysO(m); _i < _a.length; _i++) {
        var k = _a[_i];
        out = f(k, out, m.get(k));
      }
      return out;
    };
  };
};
var foldMapWithIndex6 = function(O) {
  var keysO = keys(O);
  return function(M) {
    return function(f) {
      return function(m) {
        var out = M.empty;
        for (var _i = 0, _a = keysO(m); _i < _a.length; _i++) {
          var k = _a[_i];
          out = M.concat(out, f(k, m.get(k)));
        }
        return out;
      };
    };
  };
};
var reduceRightWithIndex6 = function(O) {
  var keysO = keys(O);
  return function(b, f) {
    return function(m) {
      var out = b;
      var ks = keysO(m);
      var len = ks.length;
      for (var i = len - 1; i >= 0; i--) {
        var k = ks[i];
        out = f(k, m.get(k), out);
      }
      return out;
    };
  };
};
var getFoldableWithIndex = function(O) {
  var F = getFoldable(O);
  var reduceWithIndexO = reduceWithIndex6(O);
  var foldMapWithIndexO = foldMapWithIndex6(O);
  var reduceRightWithIndexO = reduceRightWithIndex6(O);
  return {
    URI: URI19,
    _E: void 0,
    reduce: F.reduce,
    foldMap: F.foldMap,
    reduceRight: F.reduceRight,
    reduceWithIndex: function(fa, b, f) {
      return pipe(fa, reduceWithIndexO(b, f));
    },
    foldMapWithIndex: function(M) {
      var foldMapWithIndexOM = foldMapWithIndexO(M);
      return function(fa, f) {
        return pipe(fa, foldMapWithIndexOM(f));
      };
    },
    reduceRightWithIndex: function(fa, b, f) {
      return pipe(fa, reduceRightWithIndexO(b, f));
    }
  };
};
var getTraversable = function(O) {
  var TWI = getTraversableWithIndex(O);
  var F = getFoldable(O);
  return {
    URI: URI19,
    _E: void 0,
    map: _map15,
    reduce: F.reduce,
    foldMap: F.foldMap,
    reduceRight: F.reduceRight,
    traverse: TWI.traverse,
    sequence: TWI.sequence
  };
};
var getTraversableWithIndex = function(O) {
  var FWI = getFoldableWithIndex(O);
  var keysO = keys(O);
  var traverseWithIndex7 = function(F) {
    return function(ta, f) {
      var fm = F.of(/* @__PURE__ */ new Map());
      var ks = keysO(ta);
      var len = ks.length;
      var _loop_1 = function(i2) {
        var key = ks[i2];
        var a = ta.get(key);
        fm = F.ap(F.map(fm, function(m) {
          return function(b) {
            return m.set(key, b);
          };
        }), f(key, a));
      };
      for (var i = 0; i < len; i++) {
        _loop_1(i);
      }
      return fm;
    };
  };
  var traverse15 = function(F) {
    var traverseWithIndexF = traverseWithIndex7(F);
    return function(ta, f) {
      return traverseWithIndexF(ta, function(_, a) {
        return f(a);
      });
    };
  };
  var sequence15 = function(F) {
    var traverseWithIndexF = traverseWithIndex7(F);
    return function(ta) {
      return traverseWithIndexF(ta, SK);
    };
  };
  return {
    URI: URI19,
    _E: void 0,
    map: _map15,
    mapWithIndex: _mapWithIndex5,
    reduce: FWI.reduce,
    foldMap: FWI.foldMap,
    reduceRight: FWI.reduceRight,
    reduceWithIndex: FWI.reduceWithIndex,
    foldMapWithIndex: FWI.foldMapWithIndex,
    reduceRightWithIndex: FWI.reduceRightWithIndex,
    traverse: traverse15,
    sequence: sequence15,
    traverseWithIndex: traverseWithIndex7
  };
};
function getWitherable2(O) {
  var TWI = getTraversableWithIndex(O);
  return {
    URI: URI19,
    _E: void 0,
    map: _map15,
    compact: compact6,
    separate: separate6,
    filter: _filter5,
    filterMap: _filterMap5,
    partition: _partition5,
    partitionMap: _partitionMap5,
    reduce: TWI.reduce,
    foldMap: TWI.foldMap,
    reduceRight: TWI.reduceRight,
    traverse: TWI.traverse,
    sequence: TWI.sequence,
    mapWithIndex: _mapWithIndex5,
    reduceWithIndex: TWI.reduceWithIndex,
    foldMapWithIndex: TWI.foldMapWithIndex,
    reduceRightWithIndex: TWI.reduceRightWithIndex,
    traverseWithIndex: TWI.traverseWithIndex,
    wilt: wiltDefault(TWI, Compactable5),
    wither: witherDefault(TWI, Compactable5)
  };
}
var union5 = function(E, M) {
  var lookupE = lookup3(E);
  return function(second2) {
    return function(first3) {
      if (isEmpty3(first3)) {
        return second2;
      }
      if (isEmpty3(second2)) {
        return first3;
      }
      var out = /* @__PURE__ */ new Map();
      var firstEntries = first3.entries();
      var e;
      while (!(e = firstEntries.next()).done) {
        var _a = e.value, k = _a[0], a = _a[1];
        var oka = lookupE(k)(second2);
        if (isSome(oka)) {
          out.set(k, M.concat(a, oka.value));
        } else {
          out.set(k, a);
        }
      }
      var secondEntries = second2.entries();
      while (!(e = secondEntries.next()).done) {
        var _b = e.value, k = _b[0], a = _b[1];
        var oka = lookupE(k)(out);
        if (isNone(oka)) {
          out.set(k, a);
        }
      }
      return out;
    };
  };
};
var intersection3 = function(E, M) {
  var lookupE = lookup3(E);
  return function(second2) {
    return function(first3) {
      if (isEmpty3(first3) || isEmpty3(second2)) {
        return empty5;
      }
      var out = /* @__PURE__ */ new Map();
      var entries = first3.entries();
      var e;
      while (!(e = entries.next()).done) {
        var _a = e.value, k = _a[0], a = _a[1];
        var oka = lookupE(k)(second2);
        if (isSome(oka)) {
          out.set(k, M.concat(a, oka.value));
        }
      }
      return out;
    };
  };
};
var difference3 = function(E) {
  var memberE = member(E);
  return function(second2) {
    return function(first3) {
      if (isEmpty3(first3)) {
        return second2;
      }
      if (isEmpty3(second2)) {
        return first3;
      }
      var out = /* @__PURE__ */ new Map();
      var firstEntries = first3.entries();
      var e;
      while (!(e = firstEntries.next()).done) {
        var _a = e.value, k = _a[0], a = _a[1];
        if (!memberE(k)(second2)) {
          out.set(k, a);
        }
      }
      var secondEntries = second2.entries();
      while (!(e = secondEntries.next()).done) {
        var _b = e.value, k = _b[0], a = _b[1];
        if (!memberE(k)(first3)) {
          out.set(k, a);
        }
      }
      return out;
    };
  };
};
var insertAt5 = upsertAt;
var readonlyMap = {
  URI: URI19,
  map: _map15,
  compact: compact6,
  separate: separate6,
  filter: _filter5,
  filterMap: _filterMap5,
  partition: _partition5,
  partitionMap: _partitionMap5
};

// node_modules/fp-ts/es6/Map.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var getShow10 = getShow9;
var size4 = size3;
var isEmpty4 = isEmpty3;
var member2 = member;
var elem6 = elem5;
var keys2 = function(O) {
  return function(m) {
    return Array.from(m.keys()).sort(O.compare);
  };
};
var values2 = function(O) {
  return function(m) {
    return Array.from(m.values()).sort(O.compare);
  };
};
function collect2(O) {
  var keysO = keys2(O);
  return function(f) {
    return function(m) {
      var out = [];
      var ks = keysO(m);
      for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
        var key = ks_1[_i];
        out.push(f(key, m.get(key)));
      }
      return out;
    };
  };
}
function toArray3(O) {
  return collect2(O)(function(k, a) {
    return [k, a];
  });
}
function toUnfoldable2(ord2, U) {
  var toArrayO = toArray3(ord2);
  return function(d) {
    var kas = toArrayO(d);
    var len = kas.length;
    return U.unfold(0, function(b) {
      return b < len ? some([kas[b], b + 1]) : none;
    });
  };
}
var upsertAt2 = function(E) {
  var lookupWithKeyE = lookupWithKey2(E);
  return function(k, a) {
    var lookupWithKeyEk = lookupWithKeyE(k);
    return function(m) {
      var found = lookupWithKeyEk(m);
      if (isNone(found)) {
        var out = new Map(m);
        out.set(k, a);
        return out;
      } else if (found.value[1] !== a) {
        var out = new Map(m);
        out.set(found.value[0], a);
        return out;
      }
      return m;
    };
  };
};
var deleteAt4 = function(E) {
  var lookupWithKeyE = lookupWithKey2(E);
  return function(k) {
    return function(m) {
      var found = lookupWithKeyE(k, m);
      if (isSome(found)) {
        var r = new Map(m);
        r.delete(found.value[0]);
        return r;
      }
      return m;
    };
  };
};
var updateAt6 = function(E) {
  var modifyAtE = modifyAt6(E);
  return function(k, a) {
    return modifyAtE(k, function() {
      return a;
    });
  };
};
var modifyAt6 = function(E) {
  var lookupWithKeyE = lookupWithKey2(E);
  return function(k, f) {
    return function(m) {
      var found = lookupWithKeyE(k, m);
      if (isNone(found)) {
        return none;
      }
      var r = new Map(m);
      r.set(found.value[0], f(found.value[1]));
      return some(r);
    };
  };
};
function pop2(E) {
  var lookupE = lookup4(E);
  var deleteAtE = deleteAt4(E);
  return function(k) {
    var deleteAtEk = deleteAtE(k);
    return function(m) {
      return pipe(lookupE(k, m), map7(function(a) {
        return [a, deleteAtEk(m)];
      }));
    };
  };
}
function lookupWithKey2(E) {
  return function(k, m) {
    if (m === void 0) {
      var lookupWithKeyE_1 = lookupWithKey2(E);
      return function(m2) {
        return lookupWithKeyE_1(k, m2);
      };
    }
    var entries = m.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, ka = _a[0], a = _a[1];
      if (E.equals(ka, k)) {
        return some([ka, a]);
      }
    }
    return none;
  };
}
var lookup4 = lookup3;
var isSubmap2 = isSubmap;
var getEq10 = getEq9;
function getMonoid12(SK2, SA) {
  var lookupWithKeyS = lookupWithKey2(SK2);
  return {
    concat: function(mx, my) {
      if (isEmpty4(mx)) {
        return my;
      }
      if (isEmpty4(my)) {
        return mx;
      }
      var r = new Map(mx);
      var entries = my.entries();
      var e;
      while (!(e = entries.next()).done) {
        var _a = e.value, k = _a[0], a = _a[1];
        var mxOptA = lookupWithKeyS(k, mx);
        if (isSome(mxOptA)) {
          r.set(mxOptA.value[0], SA.concat(mxOptA.value[1], a));
        } else {
          r.set(k, a);
        }
      }
      return r;
    },
    empty: /* @__PURE__ */ new Map()
  };
}
var singleton3 = function(k, a) {
  return /* @__PURE__ */ new Map([[k, a]]);
};
function fromFoldable2(E, M, F) {
  return function(fka) {
    var lookupWithKeyE = lookupWithKey2(E);
    return F.reduce(fka, /* @__PURE__ */ new Map(), function(b, _a) {
      var k = _a[0], a = _a[1];
      var bOpt = lookupWithKeyE(k, b);
      if (isSome(bOpt)) {
        b.set(bOpt.value[0], M.concat(bOpt.value[1], a));
      } else {
        b.set(k, a);
      }
      return b;
    });
  };
}
var _mapWithIndex6 = function(fa, f) {
  var m = /* @__PURE__ */ new Map();
  var entries = fa.entries();
  var e;
  while (!(e = entries.next()).done) {
    var _a = e.value, key = _a[0], a = _a[1];
    m.set(key, f(key, a));
  }
  return m;
};
var partitionMapWithIndex4 = function(f) {
  return function(fa) {
    var left14 = /* @__PURE__ */ new Map();
    var right14 = /* @__PURE__ */ new Map();
    var entries = fa.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      var ei = f(k, a);
      if (isLeft(ei)) {
        left14.set(k, ei.left);
      } else {
        right14.set(k, ei.right);
      }
    }
    return separated(left14, right14);
  };
};
function partitionWithIndex4(predicateWithIndex) {
  return function(fa) {
    var left14 = /* @__PURE__ */ new Map();
    var right14 = /* @__PURE__ */ new Map();
    var entries = fa.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      if (predicateWithIndex(k, a)) {
        right14.set(k, a);
      } else {
        left14.set(k, a);
      }
    }
    return separated(left14, right14);
  };
}
var filterMapWithIndex4 = function(f) {
  return function(fa) {
    var m = /* @__PURE__ */ new Map();
    var entries = fa.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      var o = f(k, a);
      if (isSome(o)) {
        m.set(k, o.value);
      }
    }
    return m;
  };
};
function filterWithIndex6(p) {
  return function(m) {
    var out = /* @__PURE__ */ new Map();
    var entries = m.entries();
    var e;
    while (!(e = entries.next()).done) {
      var _a = e.value, k = _a[0], a = _a[1];
      if (p(k, a)) {
        out.set(k, a);
      }
    }
    return out;
  };
}
var _map16 = function(fa, f) {
  return _mapWithIndex6(fa, function(_, a) {
    return f(a);
  });
};
var _filter6 = function(fa, p) {
  return _filterWithIndex4(fa, function(_, a) {
    return p(a);
  });
};
var _filterMap6 = function(fa, f) {
  return _filterMapWithIndex4(fa, function(_, a) {
    return f(a);
  });
};
var _partition6 = function(fa, predicate) {
  return _partitionWithIndex4(fa, function(_, a) {
    return predicate(a);
  });
};
var _partitionMap6 = function(fa, f) {
  return _partitionMapWithIndex4(fa, function(_, a) {
    return f(a);
  });
};
var _filterWithIndex4 = function(fa, p) {
  return pipe(fa, filterWithIndex6(p));
};
var _filterMapWithIndex4 = function(fa, f) {
  return pipe(fa, filterMapWithIndex4(f));
};
var _partitionWithIndex4 = function(fa, p) {
  return pipe(fa, partitionWithIndex4(p));
};
var _partitionMapWithIndex4 = function(fa, f) {
  return pipe(fa, partitionMapWithIndex4(f));
};
var compact7 = function(fa) {
  var m = /* @__PURE__ */ new Map();
  var entries = fa.entries();
  var e;
  while (!(e = entries.next()).done) {
    var _a = e.value, k = _a[0], oa = _a[1];
    if (isSome(oa)) {
      m.set(k, oa.value);
    }
  }
  return m;
};
var filter9 = function(predicate) {
  return function(fa) {
    return _filter6(fa, predicate);
  };
};
var filterMap7 = function(f) {
  return function(fa) {
    return _filterMap6(fa, f);
  };
};
var map19 = function(f) {
  return function(fa) {
    return _map16(fa, f);
  };
};
var mapWithIndex7 = function(f) {
  return function(fa) {
    return _mapWithIndex6(fa, f);
  };
};
var partition7 = function(predicate) {
  return function(fa) {
    return _partition6(fa, predicate);
  };
};
var partitionMap7 = function(f) {
  return function(fa) {
    return _partitionMap6(fa, f);
  };
};
var separate7 = function(fa) {
  var left14 = /* @__PURE__ */ new Map();
  var right14 = /* @__PURE__ */ new Map();
  var entries = fa.entries();
  var e;
  while (!(e = entries.next()).done) {
    var _a = e.value, k = _a[0], ei = _a[1];
    if (isLeft(ei)) {
      left14.set(k, ei.left);
    } else {
      right14.set(k, ei.right);
    }
  }
  return separated(left14, right14);
};
var URI20 = "Map";
var getUnionSemigroup6 = function(E, S) {
  var unionES = union6(E, S);
  return {
    concat: function(first3, second2) {
      return unionES(second2)(first3);
    }
  };
};
var getUnionMonoid4 = function(E, S) {
  return {
    concat: getUnionSemigroup6(E, S).concat,
    empty: /* @__PURE__ */ new Map()
  };
};
var getIntersectionSemigroup4 = function(E, S) {
  var intersectionES = intersection4(E, S);
  return {
    concat: function(first3, second2) {
      return intersectionES(second2)(first3);
    }
  };
};
var getDifferenceMagma4 = function(E) {
  return function() {
    var differenceE = difference4(E);
    return {
      concat: function(first3, second2) {
        return differenceE(second2)(first3);
      }
    };
  };
};
function getFilterableWithIndex2() {
  return {
    URI: URI20,
    _E: void 0,
    map: _map16,
    mapWithIndex: _mapWithIndex6,
    compact: compact7,
    separate: separate7,
    filter: _filter6,
    filterMap: _filterMap6,
    partition: _partition6,
    partitionMap: _partitionMap6,
    partitionMapWithIndex: _partitionMapWithIndex4,
    partitionWithIndex: _partitionWithIndex4,
    filterMapWithIndex: _filterMapWithIndex4,
    filterWithIndex: _filterWithIndex4
  };
}
function getWitherable3(O) {
  var TWI = getTraversableWithIndex2(O);
  return {
    URI: URI20,
    _E: void 0,
    map: _map16,
    compact: compact7,
    separate: separate7,
    filter: _filter6,
    filterMap: _filterMap6,
    partition: _partition6,
    partitionMap: _partitionMap6,
    reduce: TWI.reduce,
    foldMap: TWI.foldMap,
    reduceRight: TWI.reduceRight,
    traverse: TWI.traverse,
    sequence: TWI.sequence,
    mapWithIndex: _mapWithIndex6,
    reduceWithIndex: TWI.reduceWithIndex,
    foldMapWithIndex: TWI.foldMapWithIndex,
    reduceRightWithIndex: TWI.reduceRightWithIndex,
    traverseWithIndex: TWI.traverseWithIndex,
    wilt: wiltDefault(TWI, Compactable6),
    wither: witherDefault(TWI, Compactable6)
  };
}
var reduce10 = reduce9;
var foldMap10 = foldMap9;
var reduceRight10 = reduceRight9;
var getFoldable2 = function(O) {
  return __assign(__assign({}, getFoldable(O)), { URI: URI20 });
};
var reduceWithIndex7 = reduceWithIndex6;
var foldMapWithIndex7 = foldMapWithIndex6;
var reduceRightWithIndex7 = reduceRightWithIndex6;
var getFoldableWithIndex2 = function(O) {
  return __assign(__assign({}, getFoldableWithIndex(O)), { URI: URI20 });
};
var getTraversableWithIndex2 = function(O) {
  var FWI = getFoldableWithIndex2(O);
  var keysO = keys2(O);
  var traverseWithIndex7 = function(F) {
    return function(ta, f) {
      var fm = F.of(/* @__PURE__ */ new Map());
      var ks = keysO(ta);
      var len = ks.length;
      var _loop_1 = function(i2) {
        var key = ks[i2];
        var a = ta.get(key);
        fm = F.ap(F.map(fm, function(m) {
          return function(b) {
            return m.set(key, b);
          };
        }), f(key, a));
      };
      for (var i = 0; i < len; i++) {
        _loop_1(i);
      }
      return fm;
    };
  };
  var traverse15 = function(F) {
    var traverseWithIndexF = traverseWithIndex7(F);
    return function(ta, f) {
      return traverseWithIndexF(ta, function(_, a) {
        return f(a);
      });
    };
  };
  var sequence15 = function(F) {
    var traverseWithIndexF = traverseWithIndex7(F);
    return function(ta) {
      return traverseWithIndexF(ta, function(_, a) {
        return a;
      });
    };
  };
  return {
    URI: URI20,
    _E: void 0,
    map: _map16,
    mapWithIndex: _mapWithIndex6,
    reduce: FWI.reduce,
    foldMap: FWI.foldMap,
    reduceRight: FWI.reduceRight,
    reduceWithIndex: FWI.reduceWithIndex,
    foldMapWithIndex: FWI.foldMapWithIndex,
    reduceRightWithIndex: FWI.reduceRightWithIndex,
    traverse: traverse15,
    sequence: sequence15,
    traverseWithIndex: traverseWithIndex7
  };
};
var Functor16 = {
  URI: URI20,
  map: _map16
};
var flap17 = flap(Functor16);
var Compactable6 = {
  URI: URI20,
  compact: compact7,
  separate: separate7
};
var Filterable6 = {
  URI: URI20,
  map: _map16,
  compact: compact7,
  separate: separate7,
  filter: _filter6,
  filterMap: _filterMap6,
  partition: _partition6,
  partitionMap: _partitionMap6
};
var copy3 = function(m) {
  return new Map(m);
};
var union6 = function(E, M) {
  var unionEM = union5(E, M);
  return function(second2) {
    return function(first3) {
      if (isEmpty4(first3)) {
        return copy3(second2);
      }
      if (isEmpty4(second2)) {
        return copy3(first3);
      }
      return unionEM(second2)(first3);
    };
  };
};
var intersection4 = function(E, M) {
  var intersectionEM = intersection3(E, M);
  return function(second2) {
    return function(first3) {
      if (isEmpty4(first3) || isEmpty4(second2)) {
        return /* @__PURE__ */ new Map();
      }
      return intersectionEM(second2)(first3);
    };
  };
};
var difference4 = function(E) {
  var differenceE = difference3(E);
  return function(second2) {
    return function(first3) {
      if (isEmpty4(first3)) {
        return copy3(second2);
      }
      if (isEmpty4(second2)) {
        return copy3(first3);
      }
      return differenceE(second2)(first3);
    };
  };
};
var empty6 = /* @__PURE__ */ new Map();
var insertAt6 = upsertAt2;
var map_ = Filterable6;

// node_modules/fp-ts/es6/MeetSemilattice.js
var MeetSemilattice_exports = {};

// node_modules/fp-ts/es6/Monad.js
var Monad_exports = {};

// node_modules/fp-ts/es6/MonadIO.js
var MonadIO_exports = {};

// node_modules/fp-ts/es6/MonadTask.js
var MonadTask_exports = {};

// node_modules/fp-ts/es6/MonadThrow.js
var MonadThrow_exports = {};

// node_modules/fp-ts/es6/Monoid.js
var Monoid_exports = {};
__export(Monoid_exports, {
  concatAll: () => concatAll5,
  fold: () => fold9,
  getDualMonoid: () => getDualMonoid,
  getEndomorphismMonoid: () => getEndomorphismMonoid2,
  getFunctionMonoid: () => getFunctionMonoid,
  getJoinMonoid: () => getJoinMonoid,
  getMeetMonoid: () => getMeetMonoid,
  getStructMonoid: () => getStructMonoid,
  getTupleMonoid: () => getTupleMonoid,
  max: () => max5,
  min: () => min5,
  monoidAll: () => monoidAll,
  monoidAny: () => monoidAny,
  monoidProduct: () => monoidProduct,
  monoidString: () => monoidString,
  monoidSum: () => monoidSum,
  monoidVoid: () => monoidVoid,
  reverse: () => reverse10,
  struct: () => struct3,
  tuple: () => tuple5
});
var min5 = function(B) {
  return {
    concat: min2(B).concat,
    empty: B.top
  };
};
var max5 = function(B) {
  return {
    concat: max2(B).concat,
    empty: B.bottom
  };
};
var reverse10 = function(M) {
  return {
    concat: reverse3(M).concat,
    empty: M.empty
  };
};
var struct3 = function(monoids) {
  var empty12 = {};
  for (var k in monoids) {
    if (has.call(monoids, k)) {
      empty12[k] = monoids[k].empty;
    }
  }
  return {
    concat: struct2(monoids).concat,
    empty: empty12
  };
};
var tuple5 = function() {
  var monoids = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    monoids[_i] = arguments[_i];
  }
  return {
    concat: tuple4.apply(Semigroup_exports, monoids).concat,
    empty: monoids.map(function(m) {
      return m.empty;
    })
  };
};
var concatAll5 = function(M) {
  return concatAll2(M)(M.empty);
};
var monoidVoid = {
  concat: semigroupVoid.concat,
  empty: void 0
};
var getTupleMonoid = tuple5;
var getStructMonoid = struct3;
var getDualMonoid = reverse10;
var getJoinMonoid = max5;
var getMeetMonoid = min5;
var fold9 = concatAll5;
var monoidAll = {
  concat: semigroupAll.concat,
  empty: true
};
var monoidAny = {
  concat: semigroupAny.concat,
  empty: false
};
var getFunctionMonoid = getMonoid;
var getEndomorphismMonoid2 = function() {
  return reverse10(getMonoid8());
};
var monoidString = {
  concat: semigroupString.concat,
  empty: ""
};
var monoidSum = {
  concat: semigroupSum.concat,
  empty: 0
};
var monoidProduct = {
  concat: semigroupProduct.concat,
  empty: 1
};

// node_modules/fp-ts/es6/NaturalTransformation.js
var NaturalTransformation_exports = {};

// node_modules/fp-ts/es6/Ordering.js
var Ordering_exports = {};
__export(Ordering_exports, {
  Eq: () => Eq4,
  Monoid: () => Monoid,
  Semigroup: () => Semigroup,
  eqOrdering: () => eqOrdering,
  invert: () => invert,
  match: () => match10,
  matchW: () => matchW8,
  monoidOrdering: () => monoidOrdering,
  reverse: () => reverse11,
  semigroupOrdering: () => semigroupOrdering,
  sign: () => sign
});
var matchW8 = function(onLessThan, onEqual, onGreaterThan) {
  return function(o) {
    return o === -1 ? onLessThan() : o === 0 ? onEqual() : onGreaterThan();
  };
};
var match10 = matchW8;
var reverse11 = function(o) {
  return o === -1 ? 1 : o === 1 ? -1 : 0;
};
var Eq4 = {
  equals: function(x, y) {
    return x === y;
  }
};
var Semigroup = {
  concat: function(x, y) {
    return x !== 0 ? x : y;
  }
};
var Monoid = {
  concat: Semigroup.concat,
  empty: 0
};
var sign = function(n) {
  return n <= -1 ? -1 : n >= 1 ? 1 : 0;
};
var invert = reverse11;
var semigroupOrdering = Semigroup;
var eqOrdering = Eq4;
var monoidOrdering = Monoid;

// node_modules/fp-ts/es6/pipeable.js
var pipeable_exports = {};
__export(pipeable_exports, {
  alt: () => alt12,
  ap: () => ap16,
  bimap: () => bimap6,
  chain: () => chain15,
  compose: () => compose2,
  contramap: () => contramap5,
  extend: () => extend8,
  filter: () => filter10,
  filterMap: () => filterMap8,
  filterMapWithIndex: () => filterMapWithIndex5,
  filterWithIndex: () => filterWithIndex7,
  foldMap: () => foldMap11,
  foldMapWithIndex: () => foldMapWithIndex8,
  map: () => map20,
  mapLeft: () => mapLeft6,
  mapWithIndex: () => mapWithIndex8,
  partition: () => partition8,
  partitionMap: () => partitionMap8,
  partitionMapWithIndex: () => partitionMapWithIndex5,
  partitionWithIndex: () => partitionWithIndex5,
  pipe: () => pipe2,
  pipeable: () => pipeable,
  promap: () => promap2,
  reduce: () => reduce11,
  reduceRight: () => reduceRight11,
  reduceRightWithIndex: () => reduceRightWithIndex8,
  reduceWithIndex: () => reduceWithIndex8
});
function map20(F) {
  return function(f) {
    return function(fa) {
      return F.map(fa, f);
    };
  };
}
function contramap5(F) {
  return function(f) {
    return function(fa) {
      return F.contramap(fa, f);
    };
  };
}
function mapWithIndex8(F) {
  return function(f) {
    return function(fa) {
      return F.mapWithIndex(fa, f);
    };
  };
}
function ap16(F) {
  return function(fa) {
    return function(fab) {
      return F.ap(fab, fa);
    };
  };
}
function chain15(F) {
  return function(f) {
    return function(fa) {
      return F.chain(fa, f);
    };
  };
}
function bimap6(F) {
  return function(f, g) {
    return function(fea) {
      return F.bimap(fea, f, g);
    };
  };
}
function mapLeft6(F) {
  return function(f) {
    return function(fea) {
      return F.mapLeft(fea, f);
    };
  };
}
function extend8(F) {
  return function(f) {
    return function(wa) {
      return F.extend(wa, f);
    };
  };
}
function reduce11(F) {
  return function(b, f) {
    return function(fa) {
      return F.reduce(fa, b, f);
    };
  };
}
function foldMap11(F) {
  return function(M) {
    var foldMapM = F.foldMap(M);
    return function(f) {
      return function(fa) {
        return foldMapM(fa, f);
      };
    };
  };
}
function reduceRight11(F) {
  return function(b, f) {
    return function(fa) {
      return F.reduceRight(fa, b, f);
    };
  };
}
function reduceWithIndex8(F) {
  return function(b, f) {
    return function(fa) {
      return F.reduceWithIndex(fa, b, f);
    };
  };
}
function foldMapWithIndex8(F) {
  return function(M) {
    var foldMapWithIndexM = F.foldMapWithIndex(M);
    return function(f) {
      return function(fa) {
        return foldMapWithIndexM(fa, f);
      };
    };
  };
}
function reduceRightWithIndex8(F) {
  return function(b, f) {
    return function(fa) {
      return F.reduceRightWithIndex(fa, b, f);
    };
  };
}
function alt12(F) {
  return function(that) {
    return function(fa) {
      return F.alt(fa, that);
    };
  };
}
function filter10(F) {
  return function(predicate) {
    return function(fa) {
      return F.filter(fa, predicate);
    };
  };
}
function filterMap8(F) {
  return function(f) {
    return function(fa) {
      return F.filterMap(fa, f);
    };
  };
}
function partition8(F) {
  return function(f) {
    return function(fa) {
      return F.partition(fa, f);
    };
  };
}
function partitionMap8(F) {
  return function(f) {
    return function(fa) {
      return F.partitionMap(fa, f);
    };
  };
}
function filterWithIndex7(F) {
  return function(predicate) {
    return function(fa) {
      return F.filterWithIndex(fa, predicate);
    };
  };
}
function filterMapWithIndex5(F) {
  return function(f) {
    return function(fa) {
      return F.filterMapWithIndex(fa, f);
    };
  };
}
function partitionWithIndex5(F) {
  return function(f) {
    return function(fa) {
      return F.partitionWithIndex(fa, f);
    };
  };
}
function partitionMapWithIndex5(F) {
  return function(f) {
    return function(fa) {
      return F.partitionMapWithIndex(fa, f);
    };
  };
}
function promap2(F) {
  return function(f, g) {
    return function(fbc) {
      return F.promap(fbc, f, g);
    };
  };
}
function compose2(F) {
  return function(ea) {
    return function(ab) {
      return F.compose(ab, ea);
    };
  };
}
var isFunctor = function(I) {
  return typeof I.map === "function";
};
var isContravariant = function(I) {
  return typeof I.contramap === "function";
};
var isFunctorWithIndex = function(I) {
  return typeof I.mapWithIndex === "function";
};
var isApply = function(I) {
  return typeof I.ap === "function";
};
var isChain = function(I) {
  return typeof I.chain === "function";
};
var isBifunctor = function(I) {
  return typeof I.bimap === "function";
};
var isExtend = function(I) {
  return typeof I.extend === "function";
};
var isFoldable = function(I) {
  return typeof I.reduce === "function";
};
var isFoldableWithIndex = function(I) {
  return typeof I.reduceWithIndex === "function";
};
var isAlt = function(I) {
  return typeof I.alt === "function";
};
var isCompactable = function(I) {
  return typeof I.compact === "function";
};
var isFilterable = function(I) {
  return typeof I.filter === "function";
};
var isFilterableWithIndex = function(I) {
  return typeof I.filterWithIndex === "function";
};
var isProfunctor = function(I) {
  return typeof I.promap === "function";
};
var isSemigroupoid = function(I) {
  return typeof I.compose === "function";
};
var isMonadThrow = function(I) {
  return typeof I.throwError === "function";
};
function pipeable(I) {
  var r = {};
  if (isFunctor(I)) {
    r.map = map20(I);
  }
  if (isContravariant(I)) {
    r.contramap = contramap5(I);
  }
  if (isFunctorWithIndex(I)) {
    r.mapWithIndex = mapWithIndex8(I);
  }
  if (isApply(I)) {
    r.ap = ap16(I);
    r.apFirst = apFirst(I);
    r.apSecond = apSecond(I);
  }
  if (isChain(I)) {
    r.chain = chain15(I);
    r.chainFirst = chainFirst(I);
    r.flatten = r.chain(identity);
  }
  if (isBifunctor(I)) {
    r.bimap = bimap6(I);
    r.mapLeft = mapLeft6(I);
  }
  if (isExtend(I)) {
    r.extend = extend8(I);
    r.duplicate = r.extend(identity);
  }
  if (isFoldable(I)) {
    r.reduce = reduce11(I);
    r.foldMap = foldMap11(I);
    r.reduceRight = reduceRight11(I);
  }
  if (isFoldableWithIndex(I)) {
    r.reduceWithIndex = reduceWithIndex8(I);
    r.foldMapWithIndex = foldMapWithIndex8(I);
    r.reduceRightWithIndex = reduceRightWithIndex8(I);
  }
  if (isAlt(I)) {
    r.alt = alt12(I);
  }
  if (isCompactable(I)) {
    r.compact = I.compact;
    r.separate = I.separate;
  }
  if (isFilterable(I)) {
    r.filter = filter10(I);
    r.filterMap = filterMap8(I);
    r.partition = partition8(I);
    r.partitionMap = partitionMap8(I);
  }
  if (isFilterableWithIndex(I)) {
    r.filterWithIndex = filterWithIndex7(I);
    r.filterMapWithIndex = filterMapWithIndex5(I);
    r.partitionWithIndex = partitionWithIndex5(I);
    r.partitionMapWithIndex = partitionMapWithIndex5(I);
  }
  if (isProfunctor(I)) {
    r.promap = promap2(I);
  }
  if (isSemigroupoid(I)) {
    r.compose = compose2(I);
  }
  if (isMonadThrow(I)) {
    var fromOption14 = function(onNone) {
      return function(ma) {
        return ma._tag === "None" ? I.throwError(onNone()) : I.of(ma.value);
      };
    };
    var fromEither13 = function(ma) {
      return ma._tag === "Left" ? I.throwError(ma.left) : I.of(ma.right);
    };
    var fromPredicate16 = function(predicate, onFalse) {
      return function(a) {
        return predicate(a) ? I.of(a) : I.throwError(onFalse(a));
      };
    };
    var filterOrElse8 = function(predicate, onFalse) {
      return function(ma) {
        return I.chain(ma, function(a) {
          return predicate(a) ? I.of(a) : I.throwError(onFalse(a));
        });
      };
    };
    r.fromOption = fromOption14;
    r.fromEither = fromEither13;
    r.fromPredicate = fromPredicate16;
    r.filterOrElse = filterOrElse8;
  }
  return r;
}
var pipe2 = pipe;

// node_modules/fp-ts/es6/Pointed.js
var Pointed_exports = {};

// node_modules/fp-ts/es6/Profunctor.js
var Profunctor_exports = {};

// node_modules/fp-ts/es6/Random.js
var Random_exports = {};
__export(Random_exports, {
  random: () => random,
  randomBool: () => randomBool,
  randomElem: () => randomElem,
  randomInt: () => randomInt,
  randomRange: () => randomRange
});
var random = function() {
  return Math.random();
};
function randomInt(low, high) {
  return pipe(random, map14(function(n) {
    return Math.floor((high - low + 1) * n + low);
  }));
}
function randomRange(min6, max6) {
  return pipe(random, map14(function(n) {
    return (max6 - min6) * n + min6;
  }));
}
var randomBool = pipe(random, map14(function(n) {
  return n < 0.5;
}));
var randomElem = function(as15) {
  return pipe(randomInt(0, as15.length - 1), map14(function(i) {
    return as15[i];
  }));
};

// node_modules/fp-ts/es6/ReaderEither.js
var ReaderEither_exports = {};
__export(ReaderEither_exports, {
  Alt: () => Alt10,
  ApT: () => ApT7,
  Applicative: () => Applicative13,
  Apply: () => Apply12,
  Bifunctor: () => Bifunctor5,
  Chain: () => Chain13,
  Do: () => Do12,
  FromEither: () => FromEither7,
  FromReader: () => FromReader,
  Functor: () => Functor17,
  Monad: () => Monad13,
  MonadThrow: () => MonadThrow4,
  Pointed: () => Pointed13,
  URI: () => URI21,
  alt: () => alt13,
  altW: () => altW10,
  ap: () => ap17,
  apFirst: () => apFirst14,
  apFirstW: () => apFirstW4,
  apS: () => apS14,
  apSW: () => apSW4,
  apSecond: () => apSecond14,
  apSecondW: () => apSecondW4,
  apW: () => apW4,
  as: () => as7,
  asUnit: () => asUnit7,
  ask: () => ask3,
  asks: () => asks3,
  asksReaderEither: () => asksReaderEither,
  asksReaderEitherW: () => asksReaderEitherW,
  bimap: () => bimap7,
  bind: () => bind14,
  bindTo: () => bindTo14,
  bindW: () => bindW4,
  chain: () => chain16,
  chainEitherK: () => chainEitherK5,
  chainEitherKW: () => chainEitherKW2,
  chainFirst: () => chainFirst14,
  chainFirstEitherK: () => chainFirstEitherK5,
  chainFirstEitherKW: () => chainFirstEitherKW2,
  chainFirstReaderK: () => chainFirstReaderK2,
  chainFirstReaderKW: () => chainFirstReaderKW,
  chainFirstW: () => chainFirstW4,
  chainOptionK: () => chainOptionK6,
  chainOptionKW: () => chainOptionKW3,
  chainReaderK: () => chainReaderK2,
  chainReaderKW: () => chainReaderKW,
  chainW: () => chainW4,
  filterOrElse: () => filterOrElse4,
  filterOrElseW: () => filterOrElseW3,
  flap: () => flap18,
  flatMap: () => flatMap15,
  flatMapEither: () => flatMapEither4,
  flatMapNullable: () => flatMapNullable5,
  flatMapOption: () => flatMapOption5,
  flatMapReader: () => flatMapReader2,
  flatten: () => flatten13,
  flattenW: () => flattenW4,
  fold: () => fold10,
  foldW: () => foldW5,
  fromEither: () => fromEither7,
  fromEitherK: () => fromEitherK7,
  fromOption: () => fromOption7,
  fromOptionK: () => fromOptionK8,
  fromPredicate: () => fromPredicate9,
  fromReader: () => fromReader,
  fromReaderK: () => fromReaderK2,
  getAltReaderValidation: () => getAltReaderValidation,
  getApplicativeReaderValidation: () => getApplicativeReaderValidation,
  getApplyMonoid: () => getApplyMonoid4,
  getApplySemigroup: () => getApplySemigroup5,
  getCompactable: () => getCompactable3,
  getFilterable: () => getFilterable3,
  getOrElse: () => getOrElse7,
  getOrElseW: () => getOrElseW5,
  getReaderValidation: () => getReaderValidation,
  getSemigroup: () => getSemigroup14,
  left: () => left7,
  leftReader: () => leftReader,
  let: () => let_14,
  liftNullable: () => liftNullable4,
  liftOption: () => liftOption4,
  local: () => local2,
  map: () => map21,
  mapBoth: () => mapBoth3,
  mapError: () => mapError3,
  mapLeft: () => mapLeft7,
  match: () => match11,
  matchE: () => matchE5,
  matchEW: () => matchEW3,
  matchW: () => matchW9,
  of: () => of13,
  orElse: () => orElse5,
  orElseFirst: () => orElseFirst3,
  orElseFirstW: () => orElseFirstW2,
  orElseW: () => orElseW3,
  orLeft: () => orLeft3,
  orLeftW: () => orLeftW,
  readerEither: () => readerEither,
  right: () => right7,
  rightReader: () => rightReader,
  sequenceArray: () => sequenceArray7,
  swap: () => swap4,
  tap: () => tap10,
  tapEither: () => tapEither5,
  tapError: () => tapError3,
  tapReader: () => tapReader2,
  throwError: () => throwError4,
  toUnion: () => toUnion4,
  traverseArray: () => traverseArray7,
  traverseArrayWithIndex: () => traverseArrayWithIndex7,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex8,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex8
});
var left7 = left4(Pointed7);
var right7 = right4(Pointed7);
var rightReader = rightF(Functor9);
var leftReader = leftF(Functor9);
var fromEither7 = of7;
var fromReader = rightReader;
var match11 = match6(Functor9);
var matchW9 = match11;
var matchE5 = matchE(Monad7);
var fold10 = matchE5;
var matchEW3 = matchE5;
var foldW5 = matchEW3;
var getOrElse7 = getOrElse3(Monad7);
var getOrElseW5 = getOrElse7;
var toUnion4 = toUnion2(Functor9);
var local2 = local;
var asksReaderEitherW = asksReaderW;
var asksReaderEither = asksReaderEitherW;
var orElse5 = orElse3(Monad7);
var orElseW3 = orElse5;
var tapError3 = dual(2, tapError(Monad7));
var orLeft3 = orLeft(Monad7);
var orLeftW = orLeft3;
var swap4 = swap2(Functor9);
var _map17 = function(fa, f) {
  return pipe(fa, map21(f));
};
var _ap13 = function(fab, fa) {
  return pipe(fab, ap17(fa));
};
var _alt10 = function(fa, that) {
  return pipe(fa, alt13(that));
};
var map21 = map10(Functor9);
var mapBoth3 = dual(3, mapBoth(Functor9));
var bimap7 = mapBoth3;
var mapError3 = dual(2, mapError(Functor9));
var mapLeft7 = mapError3;
var ap17 = ap8(Apply7);
var apW4 = ap17;
var of13 = right7;
var flatMap15 = dual(2, flatMap7(Monad7));
var flattenW4 = flatMap15(identity);
var flatten13 = flattenW4;
var alt13 = alt7(Monad7);
var altW10 = alt13;
var throwError4 = left7;
var URI21 = "ReaderEither";
var getCompactable3 = function(M) {
  var C = getCompactable(M);
  return {
    URI: URI21,
    _E: void 0,
    compact: compact4(Functor9, C),
    separate: separate4(Functor9, C, Functor8)
  };
};
function getFilterable3(M) {
  var F = getFilterable(M);
  var C = getCompactable3(M);
  var filter16 = filter6(Functor9, F);
  var filterMap14 = filterMap4(Functor9, F);
  var partition14 = partition4(Functor9, F);
  var partitionMap14 = partitionMap4(Functor9, F);
  return {
    URI: URI21,
    _E: void 0,
    map: _map17,
    compact: C.compact,
    separate: C.separate,
    filter: function(fa, predicate) {
      return pipe(fa, filter16(predicate));
    },
    filterMap: function(fa, f) {
      return pipe(fa, filterMap14(f));
    },
    partition: function(fa, predicate) {
      return pipe(fa, partition14(predicate));
    },
    partitionMap: function(fa, f) {
      return pipe(fa, partitionMap14(f));
    }
  };
}
function getApplicativeReaderValidation(S) {
  var ap29 = ap(Apply7, getApplicativeValidation(S));
  return {
    URI: URI21,
    _E: void 0,
    map: _map17,
    ap: function(fab, fa) {
      return pipe(fab, ap29(fa));
    },
    of: of13
  };
}
function getAltReaderValidation(S) {
  var alt18 = altValidation(Monad7, S);
  return {
    URI: URI21,
    _E: void 0,
    map: _map17,
    alt: function(fa, that) {
      return pipe(fa, alt18(that));
    }
  };
}
var Functor17 = {
  URI: URI21,
  map: _map17
};
var as7 = dual(2, as(Functor17));
var asUnit7 = asUnit(Functor17);
var flap18 = flap(Functor17);
var Pointed13 = {
  URI: URI21,
  of: of13
};
var Apply12 = {
  URI: URI21,
  map: _map17,
  ap: _ap13
};
var apFirst14 = apFirst(Apply12);
var apFirstW4 = apFirst14;
var apSecond14 = apSecond(Apply12);
var apSecondW4 = apSecond14;
var Applicative13 = {
  URI: URI21,
  map: _map17,
  ap: _ap13,
  of: of13
};
var Chain13 = {
  URI: URI21,
  map: _map17,
  ap: _ap13,
  chain: flatMap15
};
var Monad13 = {
  URI: URI21,
  map: _map17,
  ap: _ap13,
  of: of13,
  chain: flatMap15
};
var FromEither7 = {
  URI: URI21,
  fromEither: fromEither7
};
var FromReader = {
  URI: URI21,
  fromReader
};
var tap10 = dual(2, tap(Chain13));
var tapEither5 = dual(2, tapEither(FromEither7, Chain13));
var tapReader2 = dual(2, tapReader(FromReader, Chain13));
var Bifunctor5 = {
  URI: URI21,
  bimap: mapBoth3,
  mapLeft: mapError3
};
var Alt10 = {
  URI: URI21,
  map: _map17,
  alt: _alt10
};
var ask3 = ask2(FromReader);
var asks3 = asks2(FromReader);
var fromReaderK2 = fromReaderK(FromReader);
var chainFirstReaderK2 = tapReader2;
var chainFirstReaderKW = tapReader2;
var MonadThrow4 = {
  URI: URI21,
  map: _map17,
  ap: _ap13,
  of: of13,
  chain: flatMap15,
  throwError: throwError4
};
var fromOption7 = fromOption(FromEither7);
var fromOptionK8 = fromOptionK(FromEither7);
var chainOptionK6 = chainOptionK(FromEither7, Chain13);
var chainOptionKW3 = chainOptionK6;
var _FromEither4 = {
  fromEither: FromEither7.fromEither
};
var _FromReader = {
  fromReader: FromReader.fromReader
};
var liftNullable4 = liftNullable(_FromEither4);
var liftOption4 = liftOption(_FromEither4);
var _FlatMap4 = {
  flatMap: flatMap15
};
var flatMapNullable5 = flatMapNullable(_FromEither4, _FlatMap4);
var flatMapOption5 = flatMapOption(_FromEither4, _FlatMap4);
var flatMapEither4 = flatMapEither(_FromEither4, _FlatMap4);
var flatMapReader2 = flatMapReader(_FromReader, _FlatMap4);
var chainEitherK5 = flatMapEither4;
var chainEitherKW2 = flatMapEither4;
var chainFirstEitherK5 = tapEither5;
var chainFirstEitherKW2 = tapEither5;
var chainReaderK2 = flatMapReader2;
var chainReaderKW = flatMapReader2;
var fromPredicate9 = fromPredicate(FromEither7);
var filterOrElse4 = filterOrElse(FromEither7, Chain13);
var filterOrElseW3 = filterOrElse4;
var fromEitherK7 = fromEitherK(FromEither7);
var Do12 = of13(emptyRecord);
var bindTo14 = bindTo(Functor17);
var let_14 = let_(Functor17);
var bind14 = bind(Chain13);
var bindW4 = bind14;
var apS14 = apS(Apply12);
var apSW4 = apS14;
var ApT7 = of13(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex8 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex3(f), map11(traverseReadonlyNonEmptyArrayWithIndex2(SK)));
};
var traverseReadonlyArrayWithIndex8 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex8(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT7;
  };
};
var traverseArrayWithIndex7 = traverseReadonlyArrayWithIndex8;
var traverseArray7 = function(f) {
  return traverseReadonlyArrayWithIndex8(function(_, a) {
    return f(a);
  });
};
var sequenceArray7 = traverseArray7(identity);
var chain16 = flatMap15;
var chainW4 = flatMap15;
var chainFirst14 = tap10;
var chainFirstW4 = tap10;
var orElseFirst3 = tapError3;
var orElseFirstW2 = tapError3;
var readerEither = {
  URI: URI21,
  bimap: mapBoth3,
  mapLeft: mapError3,
  map: _map17,
  of: of13,
  ap: _ap13,
  chain: flatMap15,
  alt: _alt10,
  throwError: left7
};
var getApplySemigroup5 = getApplySemigroup(Apply12);
var getApplyMonoid4 = getApplicativeMonoid(Applicative13);
var getSemigroup14 = function(S) {
  return getApplySemigroup(Apply7)(getSemigroup9(S));
};
function getReaderValidation(SE) {
  var applicativeReaderValidation = getApplicativeReaderValidation(SE);
  var altReaderValidation = getAltReaderValidation(SE);
  return {
    URI: URI21,
    _E: void 0,
    map: _map17,
    ap: applicativeReaderValidation.ap,
    of: of13,
    chain: flatMap15,
    bimap: mapBoth3,
    mapLeft: mapError3,
    alt: altReaderValidation.alt,
    throwError: throwError4
  };
}

// node_modules/fp-ts/es6/ReaderIO.js
var ReaderIO_exports = {};
__export(ReaderIO_exports, {
  ApT: () => ApT8,
  Applicative: () => Applicative14,
  Apply: () => Apply13,
  Chain: () => Chain14,
  Do: () => Do13,
  FromIO: () => FromIO4,
  FromReader: () => FromReader2,
  Functor: () => Functor18,
  Monad: () => Monad14,
  MonadIO: () => MonadIO4,
  Pointed: () => Pointed14,
  URI: () => URI22,
  ap: () => ap19,
  apFirst: () => apFirst15,
  apS: () => apS15,
  apSW: () => apSW5,
  apSecond: () => apSecond15,
  apW: () => apW5,
  as: () => as8,
  asUnit: () => asUnit8,
  ask: () => ask4,
  asks: () => asks4,
  asksReaderIO: () => asksReaderIO,
  asksReaderIOW: () => asksReaderIOW,
  bind: () => bind15,
  bindTo: () => bindTo15,
  bindW: () => bindW5,
  chain: () => chain18,
  chainFirst: () => chainFirst15,
  chainFirstIOK: () => chainFirstIOK4,
  chainFirstReaderK: () => chainFirstReaderK3,
  chainFirstReaderKW: () => chainFirstReaderKW2,
  chainFirstW: () => chainFirstW5,
  chainIOK: () => chainIOK4,
  chainReaderK: () => chainReaderK3,
  chainReaderKW: () => chainReaderKW2,
  chainW: () => chainW5,
  flap: () => flap19,
  flatMap: () => flatMap17,
  flatMapIO: () => flatMapIO4,
  flatMapReader: () => flatMapReader3,
  flatten: () => flatten14,
  flattenW: () => flattenW5,
  fromIO: () => fromIO4,
  fromIOK: () => fromIOK4,
  fromReader: () => fromReader3,
  fromReaderK: () => fromReaderK3,
  local: () => local3,
  map: () => map23,
  of: () => of15,
  sequenceArray: () => sequenceArray8,
  tap: () => tap11,
  tapIO: () => tapIO4,
  tapReader: () => tapReader3,
  traverseArray: () => traverseArray8,
  traverseArrayWithIndex: () => traverseArrayWithIndex8,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex9,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex9
});

// node_modules/fp-ts/es6/ReaderT.js
var ReaderT_exports = {};
__export(ReaderT_exports, {
  ap: () => ap18,
  chain: () => chain17,
  flatMap: () => flatMap16,
  fromNaturalTransformation: () => fromNaturalTransformation,
  fromReader: () => fromReader2,
  getReaderM: () => getReaderM,
  map: () => map22,
  of: () => of14
});
function of14(F) {
  return function(a) {
    return function() {
      return F.of(a);
    };
  };
}
function map22(F) {
  return function(f) {
    return function(fa) {
      return function(r) {
        return F.map(fa(r), f);
      };
    };
  };
}
function ap18(F) {
  return function(fa) {
    return function(fab) {
      return function(r) {
        return F.ap(fab(r), fa(r));
      };
    };
  };
}
function chain17(M) {
  var flatMapM = flatMap16(M);
  return function(f) {
    return function(ma) {
      return flatMapM(ma, f);
    };
  };
}
function flatMap16(M) {
  return function(ma, f) {
    return function(r) {
      return M.chain(ma(r), function(a) {
        return f(a)(r);
      });
    };
  };
}
function fromReader2(F) {
  return function(ma) {
    return flow(ma, F.of);
  };
}
function fromNaturalTransformation(nt) {
  return function(f) {
    return flow(f, nt);
  };
}
function getReaderM(M) {
  var _ap18 = ap18(M);
  var _map35 = map22(M);
  var _chain = chain17(M);
  return {
    map: function(fa, f) {
      return pipe(fa, _map35(f));
    },
    ap: function(fab, fa) {
      return pipe(fab, _ap18(fa));
    },
    of: of14(M),
    chain: function(ma, f) {
      return pipe(ma, _chain(f));
    },
    ask: function() {
      return M.of;
    },
    asks: function(f) {
      return flow(f, M.of);
    },
    local: function(ma, f) {
      return function(q) {
        return ma(f(q));
      };
    },
    fromReader: fromReader2(M),
    fromM: function(ma) {
      return function() {
        return ma;
      };
    }
  };
}

// node_modules/fp-ts/es6/ReaderIO.js
var fromReader3 = fromReader2(Pointed10);
var fromIO4 = of7;
var local3 = local;
var asksReaderIOW = asksReaderW;
var asksReaderIO = asksReaderIOW;
var _map18 = function(fa, f) {
  return pipe(fa, map23(f));
};
var _ap14 = function(fab, fa) {
  return pipe(fab, ap19(fa));
};
var map23 = map22(Functor12);
var ap19 = ap18(Apply10);
var apW5 = ap19;
var of15 = of14(Pointed10);
var flatMap17 = dual(2, flatMap16(Monad10));
var flattenW5 = flatMap17(identity);
var flatten14 = flattenW5;
var URI22 = "ReaderIO";
var Functor18 = {
  URI: URI22,
  map: _map18
};
var as8 = dual(2, as(Functor18));
var asUnit8 = asUnit(Functor18);
var flap19 = flap(Functor18);
var Pointed14 = {
  URI: URI22,
  of: of15
};
var Apply13 = {
  URI: URI22,
  map: _map18,
  ap: _ap14
};
var apFirst15 = apFirst(Apply13);
var apSecond15 = apSecond(Apply13);
var Applicative14 = {
  URI: URI22,
  map: _map18,
  ap: _ap14,
  of: of15
};
var Chain14 = {
  URI: URI22,
  map: _map18,
  ap: _ap14,
  chain: flatMap17
};
var Monad14 = {
  URI: URI22,
  map: _map18,
  of: of15,
  ap: _ap14,
  chain: flatMap17
};
var MonadIO4 = {
  URI: URI22,
  map: _map18,
  of: of15,
  ap: _ap14,
  chain: flatMap17,
  fromIO: fromIO4
};
var FromIO4 = {
  URI: URI22,
  fromIO: fromIO4
};
var FromReader2 = {
  URI: URI22,
  fromReader: fromReader3
};
var _FlatMap5 = {
  flatMap: flatMap17
};
var _FromIO3 = {
  fromIO: FromIO4.fromIO
};
var _FromReader2 = {
  fromReader: fromReader3
};
var flatMapIO4 = flatMapIO(_FromIO3, _FlatMap5);
var flatMapReader3 = flatMapReader(_FromReader2, _FlatMap5);
var tap11 = dual(2, tap(Chain14));
var tapIO4 = dual(2, tapIO(FromIO4, Chain14));
var tapReader3 = dual(2, tapReader(FromReader2, Chain14));
var fromIOK4 = fromIOK(FromIO4);
var chainIOK4 = flatMapIO4;
var chainFirstIOK4 = tapIO4;
var ask4 = ask2(FromReader2);
var asks4 = asks2(FromReader2);
var fromReaderK3 = fromReaderK(FromReader2);
var chainReaderK3 = flatMapReader3;
var chainReaderKW2 = flatMapReader3;
var chainFirstReaderK3 = tapReader3;
var chainFirstReaderKW2 = tapReader3;
var Do13 = of15(emptyRecord);
var bindTo15 = bindTo(Functor18);
var bind15 = bind(Chain14);
var bindW5 = bind15;
var apS15 = apS(Apply13);
var apSW5 = apS15;
var ApT8 = of15(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex9 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex3(f), map11(traverseReadonlyNonEmptyArrayWithIndex5(SK)));
};
var traverseReadonlyArrayWithIndex9 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex9(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT8;
  };
};
var traverseArrayWithIndex8 = traverseReadonlyArrayWithIndex9;
var traverseArray8 = function(f) {
  return traverseReadonlyArrayWithIndex9(function(_, a) {
    return f(a);
  });
};
var sequenceArray8 = traverseArray8(identity);
var chain18 = flatMap17;
var chainW5 = flatMap17;
var chainFirst15 = tap11;
var chainFirstW5 = tap11;

// node_modules/fp-ts/es6/ReaderTask.js
var ReaderTask_exports = {};
__export(ReaderTask_exports, {
  ApT: () => ApT10,
  ApplicativePar: () => ApplicativePar3,
  ApplicativeSeq: () => ApplicativeSeq3,
  ApplyPar: () => ApplyPar3,
  ApplySeq: () => ApplySeq2,
  Chain: () => Chain16,
  Do: () => Do15,
  FromIO: () => FromIO6,
  FromReader: () => FromReader3,
  FromTask: () => FromTask2,
  Functor: () => Functor20,
  Monad: () => Monad16,
  MonadIO: () => MonadIO6,
  MonadTask: () => MonadTask2,
  Pointed: () => Pointed16,
  URI: () => URI24,
  ap: () => ap21,
  apFirst: () => apFirst17,
  apS: () => apS17,
  apSW: () => apSW6,
  apSecond: () => apSecond17,
  apW: () => apW6,
  as: () => as10,
  asUnit: () => asUnit10,
  ask: () => ask5,
  asks: () => asks5,
  asksReaderTask: () => asksReaderTask,
  asksReaderTaskW: () => asksReaderTaskW,
  bind: () => bind17,
  bindTo: () => bindTo17,
  bindW: () => bindW6,
  chain: () => chain20,
  chainFirst: () => chainFirst17,
  chainFirstIOK: () => chainFirstIOK6,
  chainFirstReaderIOK: () => chainFirstReaderIOK,
  chainFirstReaderIOKW: () => chainFirstReaderIOKW,
  chainFirstReaderK: () => chainFirstReaderK4,
  chainFirstReaderKW: () => chainFirstReaderKW3,
  chainFirstTaskK: () => chainFirstTaskK2,
  chainFirstW: () => chainFirstW6,
  chainIOK: () => chainIOK6,
  chainReaderIOK: () => chainReaderIOK,
  chainReaderIOKW: () => chainReaderIOKW,
  chainReaderK: () => chainReaderK4,
  chainReaderKW: () => chainReaderKW3,
  chainTaskK: () => chainTaskK2,
  chainW: () => chainW6,
  flap: () => flap21,
  flatMap: () => flatMap19,
  flatMapIO: () => flatMapIO6,
  flatMapReader: () => flatMapReader4,
  flatMapReaderIO: () => flatMapReaderIO,
  flatMapTask: () => flatMapTask2,
  flatten: () => flatten16,
  flattenW: () => flattenW6,
  fromIO: () => fromIO6,
  fromIOK: () => fromIOK6,
  fromReader: () => fromReader4,
  fromReaderIO: () => fromReaderIO,
  fromReaderIOK: () => fromReaderIOK,
  fromReaderK: () => fromReaderK4,
  fromTask: () => fromTask2,
  fromTaskK: () => fromTaskK2,
  getMonoid: () => getMonoid14,
  getSemigroup: () => getSemigroup16,
  let: () => let_16,
  local: () => local4,
  map: () => map25,
  of: () => of17,
  readerTask: () => readerTask,
  readerTaskSeq: () => readerTaskSeq,
  run: () => run,
  sequenceArray: () => sequenceArray10,
  sequenceSeqArray: () => sequenceSeqArray3,
  tap: () => tap13,
  tapIO: () => tapIO6,
  tapReader: () => tapReader4,
  tapReaderIO: () => tapReaderIO,
  tapTask: () => tapTask2,
  traverseArray: () => traverseArray10,
  traverseArrayWithIndex: () => traverseArrayWithIndex10,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex11,
  traverseReadonlyArrayWithIndexSeq: () => traverseReadonlyArrayWithIndexSeq3,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex11,
  traverseReadonlyNonEmptyArrayWithIndexSeq: () => traverseReadonlyNonEmptyArrayWithIndexSeq3,
  traverseSeqArray: () => traverseSeqArray3,
  traverseSeqArrayWithIndex: () => traverseSeqArrayWithIndex3
});

// node_modules/fp-ts/es6/Task.js
var Task_exports = {};
__export(Task_exports, {
  ApT: () => ApT9,
  ApplicativePar: () => ApplicativePar2,
  ApplicativeSeq: () => ApplicativeSeq2,
  ApplyPar: () => ApplyPar2,
  ApplySeq: () => ApplySeq,
  Chain: () => Chain15,
  Do: () => Do14,
  FromIO: () => FromIO5,
  FromTask: () => FromTask,
  Functor: () => Functor19,
  Monad: () => Monad15,
  MonadIO: () => MonadIO5,
  MonadTask: () => MonadTask,
  Pointed: () => Pointed15,
  URI: () => URI23,
  ap: () => ap20,
  apFirst: () => apFirst16,
  apS: () => apS16,
  apSecond: () => apSecond16,
  as: () => as9,
  asUnit: () => asUnit9,
  bind: () => bind16,
  bindTo: () => bindTo16,
  chain: () => chain19,
  chainFirst: () => chainFirst16,
  chainFirstIOK: () => chainFirstIOK5,
  chainIOK: () => chainIOK5,
  delay: () => delay,
  flap: () => flap20,
  flatMap: () => flatMap18,
  flatMapIO: () => flatMapIO5,
  flatten: () => flatten15,
  fromIO: () => fromIO5,
  fromIOK: () => fromIOK5,
  fromTask: () => fromTask,
  getMonoid: () => getMonoid13,
  getRaceMonoid: () => getRaceMonoid,
  getSemigroup: () => getSemigroup15,
  let: () => let_15,
  map: () => map24,
  never: () => never,
  of: () => of16,
  sequenceArray: () => sequenceArray9,
  sequenceSeqArray: () => sequenceSeqArray2,
  tap: () => tap12,
  tapIO: () => tapIO5,
  task: () => task,
  taskSeq: () => taskSeq,
  traverseArray: () => traverseArray9,
  traverseArrayWithIndex: () => traverseArrayWithIndex9,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex10,
  traverseReadonlyArrayWithIndexSeq: () => traverseReadonlyArrayWithIndexSeq2,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex10,
  traverseReadonlyNonEmptyArrayWithIndexSeq: () => traverseReadonlyNonEmptyArrayWithIndexSeq2,
  traverseSeqArray: () => traverseSeqArray2,
  traverseSeqArrayWithIndex: () => traverseSeqArrayWithIndex2
});
var fromIO5 = function(ma) {
  return function() {
    return Promise.resolve().then(ma);
  };
};
function delay(millis) {
  return function(ma) {
    return function() {
      return new Promise(function(resolve) {
        setTimeout(function() {
          Promise.resolve().then(ma).then(resolve);
        }, millis);
      });
    };
  };
}
var _map19 = function(fa, f) {
  return pipe(fa, map24(f));
};
var _apPar = function(fab, fa) {
  return pipe(fab, ap20(fa));
};
var _apSeq2 = function(fab, fa) {
  return flatMap18(fab, function(f) {
    return pipe(fa, map24(f));
  });
};
var map24 = function(f) {
  return function(fa) {
    return function() {
      return Promise.resolve().then(fa).then(f);
    };
  };
};
var ap20 = function(fa) {
  return function(fab) {
    return function() {
      return Promise.all([Promise.resolve().then(fab), Promise.resolve().then(fa)]).then(function(_a) {
        var f = _a[0], a = _a[1];
        return f(a);
      });
    };
  };
};
var of16 = function(a) {
  return function() {
    return Promise.resolve(a);
  };
};
var flatMap18 = dual(2, function(ma, f) {
  return function() {
    return Promise.resolve().then(ma).then(function(a) {
      return f(a)();
    });
  };
});
var flatten15 = flatMap18(identity);
var URI23 = "Task";
function getRaceMonoid() {
  return {
    concat: function(x, y) {
      return function() {
        return Promise.race([Promise.resolve().then(x), Promise.resolve().then(y)]);
      };
    },
    empty: never
  };
}
var Functor19 = {
  URI: URI23,
  map: _map19
};
var as9 = dual(2, as(Functor19));
var asUnit9 = asUnit(Functor19);
var flap20 = flap(Functor19);
var Pointed15 = {
  URI: URI23,
  of: of16
};
var ApplyPar2 = {
  URI: URI23,
  map: _map19,
  ap: _apPar
};
var apFirst16 = apFirst(ApplyPar2);
var apSecond16 = apSecond(ApplyPar2);
var ApplicativePar2 = {
  URI: URI23,
  map: _map19,
  ap: _apPar,
  of: of16
};
var ApplySeq = {
  URI: URI23,
  map: _map19,
  ap: _apSeq2
};
var ApplicativeSeq2 = {
  URI: URI23,
  map: _map19,
  ap: _apSeq2,
  of: of16
};
var Chain15 = {
  URI: URI23,
  map: _map19,
  ap: _apPar,
  chain: flatMap18
};
var Monad15 = {
  URI: URI23,
  map: _map19,
  of: of16,
  ap: _apPar,
  chain: flatMap18
};
var MonadIO5 = {
  URI: URI23,
  map: _map19,
  of: of16,
  ap: _apPar,
  chain: flatMap18,
  fromIO: fromIO5
};
var fromTask = identity;
var MonadTask = {
  URI: URI23,
  map: _map19,
  of: of16,
  ap: _apPar,
  chain: flatMap18,
  fromIO: fromIO5,
  fromTask
};
var FromIO5 = {
  URI: URI23,
  fromIO: fromIO5
};
var _FlatMap6 = {
  flatMap: flatMap18
};
var _FromIO4 = {
  fromIO: FromIO5.fromIO
};
var flatMapIO5 = flatMapIO(_FromIO4, _FlatMap6);
var tap12 = dual(2, tap(Chain15));
var tapIO5 = dual(2, tapIO(FromIO5, Chain15));
var fromIOK5 = fromIOK(FromIO5);
var chainIOK5 = flatMapIO5;
var chainFirstIOK5 = tapIO5;
var FromTask = {
  URI: URI23,
  fromIO: fromIO5,
  fromTask
};
var never = function() {
  return new Promise(function(_) {
    return void 0;
  });
};
var Do14 = of16(emptyRecord);
var bindTo16 = bindTo(Functor19);
var let_15 = let_(Functor19);
var bind16 = bind(Chain15);
var apS16 = apS(ApplyPar2);
var ApT9 = of16(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex10 = function(f) {
  return function(as15) {
    return function() {
      return Promise.all(as15.map(function(a, i) {
        return Promise.resolve().then(function() {
          return f(i, a)();
        });
      }));
    };
  };
};
var traverseReadonlyArrayWithIndex10 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex10(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT9;
  };
};
var traverseReadonlyNonEmptyArrayWithIndexSeq2 = function(f) {
  return function(as15) {
    return function() {
      return tail(as15).reduce(function(acc, a, i) {
        return acc.then(function(bs) {
          return Promise.resolve().then(f(i + 1, a)).then(function(b) {
            bs.push(b);
            return bs;
          });
        });
      }, Promise.resolve().then(f(0, head(as15))).then(singleton));
    };
  };
};
var traverseReadonlyArrayWithIndexSeq2 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndexSeq2(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT9;
  };
};
var traverseArrayWithIndex9 = traverseReadonlyArrayWithIndex10;
var traverseArray9 = function(f) {
  return traverseReadonlyArrayWithIndex10(function(_, a) {
    return f(a);
  });
};
var sequenceArray9 = traverseArray9(identity);
var traverseSeqArrayWithIndex2 = traverseReadonlyArrayWithIndexSeq2;
var traverseSeqArray2 = function(f) {
  return traverseReadonlyArrayWithIndexSeq2(function(_, a) {
    return f(a);
  });
};
var sequenceSeqArray2 = traverseSeqArray2(identity);
var chain19 = flatMap18;
var chainFirst16 = tap12;
var task = {
  URI: URI23,
  map: _map19,
  of: of16,
  ap: _apPar,
  chain: flatMap18,
  fromIO: fromIO5,
  fromTask
};
var taskSeq = {
  URI: URI23,
  map: _map19,
  of: of16,
  ap: _apSeq2,
  chain: flatMap18,
  fromIO: fromIO5,
  fromTask
};
var getSemigroup15 = getApplySemigroup(ApplySeq);
var getMonoid13 = getApplicativeMonoid(ApplicativeSeq2);

// node_modules/fp-ts/es6/ReaderTask.js
var fromReader4 = fromReader2(Pointed15);
var fromTask2 = of7;
var fromIO6 = flow(fromIO5, fromTask2);
var fromReaderIO = map11(fromIO5);
var local4 = local;
var asksReaderTaskW = asksReaderW;
var asksReaderTask = asksReaderTaskW;
var _map20 = function(fa, f) {
  return pipe(fa, map25(f));
};
var _apPar2 = function(fab, fa) {
  return pipe(fab, ap21(fa));
};
var _apSeq3 = function(fab, fa) {
  return flatMap19(fab, function(f) {
    return pipe(fa, map25(f));
  });
};
var map25 = map22(Functor19);
var ap21 = ap18(ApplyPar2);
var apW6 = ap21;
var of17 = of14(Pointed15);
var flatMap19 = dual(2, flatMap16(Monad15));
var flattenW6 = flatMap19(identity);
var flatten16 = flattenW6;
var URI24 = "ReaderTask";
var Functor20 = {
  URI: URI24,
  map: _map20
};
var as10 = dual(2, as(Functor20));
var asUnit10 = asUnit(Functor20);
var flap21 = flap(Functor20);
var Pointed16 = {
  URI: URI24,
  of: of17
};
var ApplyPar3 = {
  URI: URI24,
  map: _map20,
  ap: _apPar2
};
var apFirst17 = apFirst(ApplyPar3);
var apSecond17 = apSecond(ApplyPar3);
var ApplicativePar3 = {
  URI: URI24,
  map: _map20,
  ap: _apPar2,
  of: of17
};
var ApplySeq2 = {
  URI: URI24,
  map: _map20,
  ap: _apSeq3
};
var ApplicativeSeq3 = {
  URI: URI24,
  map: _map20,
  ap: _apSeq3,
  of: of17
};
var Chain16 = {
  URI: URI24,
  map: _map20,
  ap: _apPar2,
  chain: flatMap19
};
var Monad16 = {
  URI: URI24,
  map: _map20,
  of: of17,
  ap: _apPar2,
  chain: flatMap19
};
var MonadIO6 = {
  URI: URI24,
  map: _map20,
  of: of17,
  ap: _apPar2,
  chain: flatMap19,
  fromIO: fromIO6
};
var MonadTask2 = {
  URI: URI24,
  map: _map20,
  of: of17,
  ap: _apPar2,
  chain: flatMap19,
  fromIO: fromIO6,
  fromTask: fromTask2
};
var FromIO6 = {
  URI: URI24,
  fromIO: fromIO6
};
var FromTask2 = {
  URI: URI24,
  fromIO: fromIO6,
  fromTask: fromTask2
};
var FromReader3 = {
  URI: URI24,
  fromReader: fromReader4
};
var _FlatMap7 = {
  flatMap: flatMap19
};
var _FromIO5 = {
  fromIO: FromIO6.fromIO
};
var _FromTask = {
  fromTask: fromTask2
};
var _FromReader3 = {
  fromReader: fromReader4
};
var flatMapIO6 = flatMapIO(_FromIO5, _FlatMap7);
var flatMapTask2 = flatMapTask(_FromTask, _FlatMap7);
var flatMapReader4 = flatMapReader(_FromReader3, _FlatMap7);
var flatMapReaderIO = dual(2, function(self, f) {
  return flatMap19(self, fromReaderIOK(f));
});
var tap13 = dual(2, tap(Chain16));
var tapIO6 = dual(2, tapIO(FromIO6, Chain16));
var tapReader4 = dual(2, tapReader(FromReader3, Chain16));
var tapTask2 = dual(2, tapTask(FromTask2, Chain16));
var tapReaderIO = dual(2, function(self, f) {
  return tap13(self, fromReaderIOK(f));
});
var fromIOK6 = fromIOK(FromIO6);
var chainIOK6 = flatMapIO6;
var chainFirstIOK6 = tapIO6;
var ask5 = ask2(FromReader3);
var asks5 = asks2(FromReader3);
var fromReaderK4 = fromReaderK(FromReader3);
var chainReaderK4 = flatMapReader4;
var chainReaderKW3 = flatMapReader4;
var chainFirstReaderK4 = tapReader4;
var chainFirstReaderKW3 = tapReader4;
var fromReaderIOK = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return fromReaderIO(f.apply(void 0, a));
  };
};
var chainReaderIOKW = flatMapReaderIO;
var chainReaderIOK = flatMapReaderIO;
var chainFirstReaderIOKW = tapReaderIO;
var chainFirstReaderIOK = tapReaderIO;
var fromTaskK2 = fromTaskK(FromTask2);
var chainTaskK2 = flatMapTask2;
var chainFirstTaskK2 = tapTask2;
var Do15 = of17(emptyRecord);
var bindTo17 = bindTo(Functor20);
var let_16 = let_(Functor20);
var bind17 = bind(Chain16);
var bindW6 = bind17;
var apS17 = apS(ApplyPar3);
var apSW6 = apS17;
var ApT10 = of17(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex11 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex3(f), map11(traverseReadonlyNonEmptyArrayWithIndex10(SK)));
};
var traverseReadonlyArrayWithIndex11 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex11(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT10;
  };
};
var traverseReadonlyNonEmptyArrayWithIndexSeq3 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex3(f), map11(traverseReadonlyNonEmptyArrayWithIndexSeq2(SK)));
};
var traverseReadonlyArrayWithIndexSeq3 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndexSeq3(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT10;
  };
};
var traverseArrayWithIndex10 = traverseReadonlyArrayWithIndex11;
var traverseArray10 = function(f) {
  return traverseReadonlyArrayWithIndex11(function(_, a) {
    return f(a);
  });
};
var sequenceArray10 = traverseArray10(identity);
var traverseSeqArrayWithIndex3 = traverseReadonlyArrayWithIndexSeq3;
var traverseSeqArray3 = function(f) {
  return traverseReadonlyArrayWithIndexSeq3(function(_, a) {
    return f(a);
  });
};
var chain20 = flatMap19;
var chainW6 = flatMap19;
var chainFirst17 = tap13;
var chainFirstW6 = tap13;
var sequenceSeqArray3 = traverseSeqArray3(identity);
var readerTask = {
  URI: URI24,
  map: _map20,
  of: of17,
  ap: _apPar2,
  chain: flatMap19,
  fromIO: fromIO6,
  fromTask: fromTask2
};
var readerTaskSeq = {
  URI: URI24,
  map: _map20,
  of: of17,
  ap: _apSeq3,
  chain: flatMap19,
  fromIO: fromIO6,
  fromTask: fromTask2
};
var getSemigroup16 = getApplySemigroup(ApplySeq2);
var getMonoid14 = getApplicativeMonoid(ApplicativeSeq3);
function run(ma, r) {
  return ma(r)();
}

// node_modules/fp-ts/es6/ReaderTaskEither.js
var ReaderTaskEither_exports = {};
__export(ReaderTaskEither_exports, {
  Alt: () => Alt12,
  ApT: () => ApT12,
  ApplicativePar: () => ApplicativePar5,
  ApplicativeSeq: () => ApplicativeSeq5,
  ApplyPar: () => ApplyPar5,
  ApplySeq: () => ApplySeq4,
  Bifunctor: () => Bifunctor7,
  Chain: () => Chain18,
  Do: () => Do17,
  FromEither: () => FromEither9,
  FromIO: () => FromIO8,
  FromReader: () => FromReader4,
  FromTask: () => FromTask4,
  Functor: () => Functor22,
  Monad: () => Monad18,
  MonadIO: () => MonadIO8,
  MonadTask: () => MonadTask4,
  MonadThrow: () => MonadThrow6,
  Pointed: () => Pointed18,
  URI: () => URI26,
  alt: () => alt15,
  altW: () => altW12,
  ap: () => ap23,
  apFirst: () => apFirst19,
  apFirstW: () => apFirstW6,
  apS: () => apS19,
  apSW: () => apSW8,
  apSecond: () => apSecond19,
  apSecondW: () => apSecondW6,
  apW: () => apW8,
  as: () => as12,
  asUnit: () => asUnit12,
  ask: () => ask6,
  asks: () => asks6,
  asksReaderTaskEither: () => asksReaderTaskEither,
  asksReaderTaskEitherW: () => asksReaderTaskEitherW,
  bimap: () => bimap9,
  bind: () => bind19,
  bindTo: () => bindTo19,
  bindW: () => bindW8,
  bracket: () => bracket3,
  bracketW: () => bracketW3,
  chain: () => chain22,
  chainEitherK: () => chainEitherK7,
  chainEitherKW: () => chainEitherKW4,
  chainFirst: () => chainFirst19,
  chainFirstEitherK: () => chainFirstEitherK7,
  chainFirstEitherKW: () => chainFirstEitherKW4,
  chainFirstIOK: () => chainFirstIOK8,
  chainFirstReaderEitherK: () => chainFirstReaderEitherK,
  chainFirstReaderEitherKW: () => chainFirstReaderEitherKW,
  chainFirstReaderIOK: () => chainFirstReaderIOK2,
  chainFirstReaderIOKW: () => chainFirstReaderIOKW2,
  chainFirstReaderK: () => chainFirstReaderK5,
  chainFirstReaderKW: () => chainFirstReaderKW4,
  chainFirstReaderTaskK: () => chainFirstReaderTaskK,
  chainFirstReaderTaskKW: () => chainFirstReaderTaskKW,
  chainFirstTaskEitherK: () => chainFirstTaskEitherK,
  chainFirstTaskEitherKW: () => chainFirstTaskEitherKW,
  chainFirstTaskK: () => chainFirstTaskK4,
  chainFirstW: () => chainFirstW8,
  chainIOEitherK: () => chainIOEitherK2,
  chainIOEitherKW: () => chainIOEitherKW2,
  chainIOK: () => chainIOK8,
  chainNullableK: () => chainNullableK7,
  chainOptionK: () => chainOptionK8,
  chainOptionKW: () => chainOptionKW5,
  chainReaderEitherK: () => chainReaderEitherK,
  chainReaderEitherKW: () => chainReaderEitherKW,
  chainReaderIOK: () => chainReaderIOK2,
  chainReaderIOKW: () => chainReaderIOKW2,
  chainReaderK: () => chainReaderK5,
  chainReaderKW: () => chainReaderKW4,
  chainReaderTaskK: () => chainReaderTaskK,
  chainReaderTaskKW: () => chainReaderTaskKW,
  chainTaskEitherK: () => chainTaskEitherK,
  chainTaskEitherKW: () => chainTaskEitherKW,
  chainTaskK: () => chainTaskK4,
  chainW: () => chainW8,
  filterOrElse: () => filterOrElse6,
  filterOrElseW: () => filterOrElseW5,
  flap: () => flap23,
  flatMap: () => flatMap21,
  flatMapEither: () => flatMapEither6,
  flatMapIO: () => flatMapIO8,
  flatMapIOEither: () => flatMapIOEither2,
  flatMapNullable: () => flatMapNullable7,
  flatMapOption: () => flatMapOption7,
  flatMapReader: () => flatMapReader5,
  flatMapReaderEither: () => flatMapReaderEither,
  flatMapReaderIO: () => flatMapReaderIO2,
  flatMapReaderTask: () => flatMapReaderTask,
  flatMapTask: () => flatMapTask4,
  flatMapTaskEither: () => flatMapTaskEither,
  flatten: () => flatten18,
  flattenW: () => flattenW8,
  fold: () => fold12,
  foldW: () => foldW7,
  fromEither: () => fromEither9,
  fromEitherK: () => fromEitherK9,
  fromIO: () => fromIO8,
  fromIOEither: () => fromIOEither3,
  fromIOEitherK: () => fromIOEitherK2,
  fromIOK: () => fromIOK8,
  fromNullable: () => fromNullable7,
  fromNullableK: () => fromNullableK7,
  fromOption: () => fromOption9,
  fromOptionK: () => fromOptionK10,
  fromPredicate: () => fromPredicate11,
  fromReader: () => fromReader5,
  fromReaderEither: () => fromReaderEither,
  fromReaderEitherK: () => fromReaderEitherK,
  fromReaderIOK: () => fromReaderIOK2,
  fromReaderK: () => fromReaderK5,
  fromReaderTaskK: () => fromReaderTaskK,
  fromTask: () => fromTask4,
  fromTaskEither: () => fromTaskEither,
  fromTaskEitherK: () => fromTaskEitherK,
  fromTaskK: () => fromTaskK4,
  getAltReaderTaskValidation: () => getAltReaderTaskValidation,
  getApplicativeReaderTaskValidation: () => getApplicativeReaderTaskValidation,
  getApplyMonoid: () => getApplyMonoid6,
  getApplySemigroup: () => getApplySemigroup7,
  getCompactable: () => getCompactable5,
  getFilterable: () => getFilterable5,
  getOrElse: () => getOrElse9,
  getOrElseW: () => getOrElseW7,
  getReaderTaskValidation: () => getReaderTaskValidation,
  getSemigroup: () => getSemigroup18,
  left: () => left9,
  leftIO: () => leftIO3,
  leftReader: () => leftReader2,
  leftReaderIO: () => leftReaderIO,
  leftReaderTask: () => leftReaderTask,
  leftTask: () => leftTask2,
  let: () => let_18,
  liftNullable: () => liftNullable6,
  liftOption: () => liftOption6,
  local: () => local5,
  map: () => map27,
  mapBoth: () => mapBoth5,
  mapError: () => mapError5,
  mapLeft: () => mapLeft9,
  match: () => match13,
  matchE: () => matchE7,
  matchEW: () => matchEW5,
  matchW: () => matchW11,
  of: () => of19,
  orElse: () => orElse7,
  orElseFirst: () => orElseFirst5,
  orElseFirstW: () => orElseFirstW4,
  orElseW: () => orElseW5,
  orLeft: () => orLeft5,
  orLeftW: () => orLeftW2,
  readerTaskEither: () => readerTaskEither,
  readerTaskEitherSeq: () => readerTaskEitherSeq,
  right: () => right9,
  rightIO: () => rightIO3,
  rightReader: () => rightReader2,
  rightReaderIO: () => rightReaderIO,
  rightReaderTask: () => rightReaderTask,
  rightTask: () => rightTask2,
  run: () => run2,
  sequenceArray: () => sequenceArray12,
  sequenceSeqArray: () => sequenceSeqArray5,
  swap: () => swap6,
  tap: () => tap15,
  tapEither: () => tapEither7,
  tapError: () => tapError5,
  tapIO: () => tapIO8,
  tapReader: () => tapReader5,
  tapReaderEither: () => tapReaderEither,
  tapReaderIO: () => tapReaderIO2,
  tapReaderTask: () => tapReaderTask,
  tapTask: () => tapTask4,
  tapTaskEither: () => tapTaskEither,
  throwError: () => throwError6,
  toUnion: () => toUnion6,
  traverseArray: () => traverseArray12,
  traverseArrayWithIndex: () => traverseArrayWithIndex12,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex13,
  traverseReadonlyArrayWithIndexSeq: () => traverseReadonlyArrayWithIndexSeq5,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex13,
  traverseReadonlyNonEmptyArrayWithIndexSeq: () => traverseReadonlyNonEmptyArrayWithIndexSeq5,
  traverseSeqArray: () => traverseSeqArray5,
  traverseSeqArrayWithIndex: () => traverseSeqArrayWithIndex5
});

// node_modules/fp-ts/es6/TaskEither.js
var TaskEither_exports = {};
__export(TaskEither_exports, {
  Alt: () => Alt11,
  ApT: () => ApT11,
  ApplicativePar: () => ApplicativePar4,
  ApplicativeSeq: () => ApplicativeSeq4,
  ApplyPar: () => ApplyPar4,
  ApplySeq: () => ApplySeq3,
  Bifunctor: () => Bifunctor6,
  Chain: () => Chain17,
  Do: () => Do16,
  FromEither: () => FromEither8,
  FromIO: () => FromIO7,
  FromTask: () => FromTask3,
  Functor: () => Functor21,
  Monad: () => Monad17,
  MonadIO: () => MonadIO7,
  MonadTask: () => MonadTask3,
  MonadThrow: () => MonadThrow5,
  Pointed: () => Pointed17,
  URI: () => URI25,
  alt: () => alt14,
  altW: () => altW11,
  ap: () => ap22,
  apFirst: () => apFirst18,
  apFirstW: () => apFirstW5,
  apS: () => apS18,
  apSW: () => apSW7,
  apSecond: () => apSecond18,
  apSecondW: () => apSecondW5,
  apW: () => apW7,
  as: () => as11,
  asUnit: () => asUnit11,
  bimap: () => bimap8,
  bind: () => bind18,
  bindTo: () => bindTo18,
  bindW: () => bindW7,
  bracket: () => bracket2,
  bracketW: () => bracketW2,
  chain: () => chain21,
  chainEitherK: () => chainEitherK6,
  chainEitherKW: () => chainEitherKW3,
  chainFirst: () => chainFirst18,
  chainFirstEitherK: () => chainFirstEitherK6,
  chainFirstEitherKW: () => chainFirstEitherKW3,
  chainFirstIOK: () => chainFirstIOK7,
  chainFirstTaskK: () => chainFirstTaskK3,
  chainFirstW: () => chainFirstW7,
  chainIOEitherK: () => chainIOEitherK,
  chainIOEitherKW: () => chainIOEitherKW,
  chainIOK: () => chainIOK7,
  chainNullableK: () => chainNullableK6,
  chainOptionK: () => chainOptionK7,
  chainOptionKW: () => chainOptionKW4,
  chainTaskK: () => chainTaskK3,
  chainTaskOptionK: () => chainTaskOptionK,
  chainTaskOptionKW: () => chainTaskOptionKW,
  chainW: () => chainW7,
  filterOrElse: () => filterOrElse5,
  filterOrElseW: () => filterOrElseW4,
  flap: () => flap22,
  flatMap: () => flatMap20,
  flatMapEither: () => flatMapEither5,
  flatMapIO: () => flatMapIO7,
  flatMapIOEither: () => flatMapIOEither,
  flatMapNullable: () => flatMapNullable6,
  flatMapOption: () => flatMapOption6,
  flatMapTask: () => flatMapTask3,
  flatMapTaskOption: () => flatMapTaskOption,
  flatten: () => flatten17,
  flattenW: () => flattenW7,
  fold: () => fold11,
  foldW: () => foldW6,
  fromEither: () => fromEither8,
  fromEitherK: () => fromEitherK8,
  fromIO: () => fromIO7,
  fromIOEither: () => fromIOEither2,
  fromIOEitherK: () => fromIOEitherK,
  fromIOK: () => fromIOK7,
  fromNullable: () => fromNullable6,
  fromNullableK: () => fromNullableK6,
  fromOption: () => fromOption8,
  fromOptionK: () => fromOptionK9,
  fromPredicate: () => fromPredicate10,
  fromTask: () => fromTask3,
  fromTaskK: () => fromTaskK3,
  fromTaskOption: () => fromTaskOption,
  fromTaskOptionK: () => fromTaskOptionK,
  getAltTaskValidation: () => getAltTaskValidation,
  getApplicativeTaskValidation: () => getApplicativeTaskValidation,
  getApplyMonoid: () => getApplyMonoid5,
  getApplySemigroup: () => getApplySemigroup6,
  getCompactable: () => getCompactable4,
  getFilterable: () => getFilterable4,
  getOrElse: () => getOrElse8,
  getOrElseW: () => getOrElseW6,
  getSemigroup: () => getSemigroup17,
  getTaskValidation: () => getTaskValidation,
  left: () => left8,
  leftIO: () => leftIO2,
  leftTask: () => leftTask,
  let: () => let_17,
  liftNullable: () => liftNullable5,
  liftOption: () => liftOption5,
  map: () => map26,
  mapBoth: () => mapBoth4,
  mapError: () => mapError4,
  mapLeft: () => mapLeft8,
  match: () => match12,
  matchE: () => matchE6,
  matchEW: () => matchEW4,
  matchW: () => matchW10,
  of: () => of18,
  orElse: () => orElse6,
  orElseFirst: () => orElseFirst4,
  orElseFirstIOK: () => orElseFirstIOK2,
  orElseFirstTaskK: () => orElseFirstTaskK,
  orElseFirstW: () => orElseFirstW3,
  orElseW: () => orElseW4,
  orLeft: () => orLeft4,
  right: () => right8,
  rightIO: () => rightIO2,
  rightTask: () => rightTask,
  sequenceArray: () => sequenceArray11,
  sequenceSeqArray: () => sequenceSeqArray4,
  swap: () => swap5,
  tap: () => tap14,
  tapEither: () => tapEither6,
  tapError: () => tapError4,
  tapIO: () => tapIO7,
  tapTask: () => tapTask3,
  taskEither: () => taskEither,
  taskEitherSeq: () => taskEitherSeq,
  taskify: () => taskify,
  throwError: () => throwError5,
  toUnion: () => toUnion5,
  traverseArray: () => traverseArray11,
  traverseArrayWithIndex: () => traverseArrayWithIndex11,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex12,
  traverseReadonlyArrayWithIndexSeq: () => traverseReadonlyArrayWithIndexSeq4,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex12,
  traverseReadonlyNonEmptyArrayWithIndexSeq: () => traverseReadonlyNonEmptyArrayWithIndexSeq4,
  traverseSeqArray: () => traverseSeqArray4,
  traverseSeqArrayWithIndex: () => traverseSeqArrayWithIndex4,
  tryCatch: () => tryCatch4,
  tryCatchK: () => tryCatchK4
});
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var left8 = left4(Pointed15);
var right8 = right4(Pointed15);
var rightTask = rightF(Functor19);
var leftTask = leftF(Functor19);
var rightIO2 = flow(fromIO5, rightTask);
var leftIO2 = flow(fromIO5, leftTask);
var fromIO7 = rightIO2;
var fromTask3 = rightTask;
var fromEither8 = of16;
var fromIOEither2 = fromIO5;
var fromTaskOption = function(onNone) {
  return map24(fromOption4(onNone));
};
var match12 = match6(Functor19);
var matchW10 = match12;
var matchE6 = matchE(Monad15);
var fold11 = matchE6;
var matchEW4 = matchE6;
var foldW6 = matchEW4;
var getOrElse8 = getOrElse3(Monad15);
var getOrElseW6 = getOrElse8;
var tryCatch4 = function(f, onRejected) {
  return function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var reason_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, f().then(right)];
          case 1:
            return [2, _a.sent()];
          case 2:
            reason_1 = _a.sent();
            return [2, left(onRejected(reason_1))];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};
var tryCatchK4 = function(f, onRejected) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return tryCatch4(function() {
      return f.apply(void 0, a);
    }, onRejected);
  };
};
var toUnion5 = toUnion2(Functor19);
var fromNullable6 = fromNullable3(Pointed15);
var fromNullableK6 = fromNullableK3(Pointed15);
var chainNullableK6 = chainNullableK3(Monad15);
var orElse6 = orElse3(Monad15);
var orElseW4 = orElse6;
var tapError4 = dual(2, tapError(Monad15));
var orElseFirstIOK2 = function(onLeft) {
  return tapError4(fromIOK7(onLeft));
};
var orElseFirstTaskK = function(onLeft) {
  return tapError4(fromTaskK3(onLeft));
};
var orLeft4 = orLeft(Monad15);
var swap5 = swap2(Functor19);
var fromTaskOptionK = function(onNone) {
  var from = fromTaskOption(onNone);
  return function(f) {
    return flow(f, from);
  };
};
var chainTaskOptionKW = function(onNone) {
  return function(f) {
    return function(ma) {
      return flatMap20(ma, fromTaskOptionK(onNone)(f));
    };
  };
};
var chainTaskOptionK = chainTaskOptionKW;
var fromIOEitherK = function(f) {
  return flow(f, fromIOEither2);
};
var _map21 = function(fa, f) {
  return pipe(fa, map26(f));
};
var _apPar3 = function(fab, fa) {
  return pipe(fab, ap22(fa));
};
var _apSeq4 = function(fab, fa) {
  return flatMap20(fab, function(f) {
    return pipe(fa, map26(f));
  });
};
var _alt11 = function(fa, that) {
  return pipe(fa, alt14(that));
};
var map26 = map10(Functor19);
var mapBoth4 = dual(3, mapBoth(Functor19));
var bimap8 = mapBoth4;
var mapError4 = dual(2, mapError(Functor19));
var mapLeft8 = mapError4;
var ap22 = ap8(ApplyPar2);
var apW7 = ap22;
var flatMap20 = dual(2, flatMap7(Monad15));
var flattenW7 = flatMap20(identity);
var flatten17 = flattenW7;
var alt14 = alt7(Monad15);
var altW11 = alt14;
var of18 = right8;
var throwError5 = left8;
var URI25 = "TaskEither";
function getApplicativeTaskValidation(A, S) {
  var ap29 = ap(A, getApplicativeValidation(S));
  return {
    URI: URI25,
    _E: void 0,
    map: _map21,
    ap: function(fab, fa) {
      return pipe(fab, ap29(fa));
    },
    of: of18
  };
}
function getAltTaskValidation(S) {
  var alt18 = altValidation(Monad15, S);
  return {
    URI: URI25,
    _E: void 0,
    map: _map21,
    alt: function(fa, that) {
      return pipe(fa, alt18(that));
    }
  };
}
var getCompactable4 = function(M) {
  var C = getCompactable(M);
  return {
    URI: URI25,
    _E: void 0,
    compact: compact4(Functor19, C),
    separate: separate4(Functor19, C, Functor8)
  };
};
function getFilterable4(M) {
  var F = getFilterable(M);
  var C = getCompactable4(M);
  var filter16 = filter6(Functor19, F);
  var filterMap14 = filterMap4(Functor19, F);
  var partition14 = partition4(Functor19, F);
  var partitionMap14 = partitionMap4(Functor19, F);
  return {
    URI: URI25,
    _E: void 0,
    map: _map21,
    compact: C.compact,
    separate: C.separate,
    filter: function(fa, predicate) {
      return pipe(fa, filter16(predicate));
    },
    filterMap: function(fa, f) {
      return pipe(fa, filterMap14(f));
    },
    partition: function(fa, predicate) {
      return pipe(fa, partition14(predicate));
    },
    partitionMap: function(fa, f) {
      return pipe(fa, partitionMap14(f));
    }
  };
}
var Functor21 = {
  URI: URI25,
  map: _map21
};
var as11 = dual(2, as(Functor21));
var asUnit11 = asUnit(Functor21);
var flap22 = flap(Functor21);
var Pointed17 = {
  URI: URI25,
  of: of18
};
var ApplyPar4 = {
  URI: URI25,
  map: _map21,
  ap: _apPar3
};
var apFirst18 = apFirst(ApplyPar4);
var apFirstW5 = apFirst18;
var apSecond18 = apSecond(ApplyPar4);
var apSecondW5 = apSecond18;
var ApplicativePar4 = {
  URI: URI25,
  map: _map21,
  ap: _apPar3,
  of: of18
};
var ApplySeq3 = {
  URI: URI25,
  map: _map21,
  ap: _apSeq4
};
var ApplicativeSeq4 = {
  URI: URI25,
  map: _map21,
  ap: _apSeq4,
  of: of18
};
var Chain17 = {
  URI: URI25,
  map: _map21,
  ap: _apPar3,
  chain: flatMap20
};
var Monad17 = {
  URI: URI25,
  map: _map21,
  ap: _apPar3,
  chain: flatMap20,
  of: of18
};
var MonadIO7 = {
  URI: URI25,
  map: _map21,
  ap: _apPar3,
  chain: flatMap20,
  of: of18,
  fromIO: fromIO7
};
var MonadTask3 = {
  URI: URI25,
  map: _map21,
  ap: _apPar3,
  chain: flatMap20,
  of: of18,
  fromIO: fromIO7,
  fromTask: fromTask3
};
var MonadThrow5 = {
  URI: URI25,
  map: _map21,
  ap: _apPar3,
  chain: flatMap20,
  of: of18,
  throwError: throwError5
};
var FromEither8 = {
  URI: URI25,
  fromEither: fromEither8
};
var FromIO7 = {
  URI: URI25,
  fromIO: fromIO7
};
var FromTask3 = {
  URI: URI25,
  fromIO: fromIO7,
  fromTask: fromTask3
};
var tap14 = dual(2, tap(Chain17));
var tapEither6 = dual(2, tapEither(FromEither8, Chain17));
var tapIO7 = dual(2, tapIO(FromIO7, Chain17));
var tapTask3 = dual(2, tapTask(FromTask3, Chain17));
var Bifunctor6 = {
  URI: URI25,
  bimap: mapBoth4,
  mapLeft: mapError4
};
var Alt11 = {
  URI: URI25,
  map: _map21,
  alt: _alt11
};
var fromOption8 = fromOption(FromEither8);
var fromOptionK9 = fromOptionK(FromEither8);
var chainOptionK7 = chainOptionK(FromEither8, Chain17);
var chainOptionKW4 = chainOptionK7;
var _FromEither5 = {
  fromEither: FromEither8.fromEither
};
var liftNullable5 = liftNullable(_FromEither5);
var liftOption5 = liftOption(_FromEither5);
var _FlatMap8 = {
  flatMap: flatMap20
};
var _FromIO6 = {
  fromIO: FromIO7.fromIO
};
var _FromTask2 = {
  fromTask: fromTask3
};
var flatMapNullable6 = flatMapNullable(_FromEither5, _FlatMap8);
var flatMapOption6 = flatMapOption(_FromEither5, _FlatMap8);
var flatMapEither5 = flatMapEither(_FromEither5, _FlatMap8);
var flatMapIO7 = flatMapIO(_FromIO6, _FlatMap8);
var flatMapTask3 = flatMapTask(_FromTask2, _FlatMap8);
var flatMapIOEither = dual(2, function(self, f) {
  return flatMap20(self, fromIOEitherK(f));
});
var flatMapTaskOption = dual(3, function(self, f, onNone) {
  return flatMap20(self, function(a) {
    return fromTaskOption(function() {
      return onNone(a);
    })(f(a));
  });
});
var chainEitherK6 = flatMapEither5;
var chainEitherKW3 = flatMapEither5;
var chainFirstEitherK6 = tapEither6;
var chainFirstEitherKW3 = tapEither6;
var fromPredicate10 = fromPredicate(FromEither8);
var filterOrElse5 = filterOrElse(FromEither8, Chain17);
var filterOrElseW4 = filterOrElse5;
var fromEitherK8 = fromEitherK(FromEither8);
var fromIOK7 = fromIOK(FromIO7);
var chainIOK7 = flatMapIO7;
var chainFirstIOK7 = tapIO7;
var fromTaskK3 = fromTaskK(FromTask3);
var chainTaskK3 = flatMapTask3;
var chainFirstTaskK3 = tapTask3;
var chainIOEitherKW = flatMapIOEither;
var chainIOEitherK = flatMapIOEither;
function taskify(f) {
  return function() {
    var args = Array.prototype.slice.call(arguments);
    return function() {
      return new Promise(function(resolve) {
        var cbResolver = function(e, r) {
          return e != null ? resolve(left(e)) : resolve(right(r));
        };
        f.apply(null, args.concat(cbResolver));
      });
    };
  };
}
var bracket2 = function(acquire, use, release) {
  return bracketW2(acquire, use, release);
};
var bracketW2 = function(acquire, use, release) {
  return flatMap20(acquire, function(a) {
    return flatMap18(use(a), function(e) {
      return flatMap20(release(a, e), function() {
        return of16(e);
      });
    });
  });
};
var Do16 = of18(emptyRecord);
var bindTo18 = bindTo(Functor21);
var let_17 = let_(Functor21);
var bind18 = bind(Chain17);
var bindW7 = bind18;
var apS18 = apS(ApplyPar4);
var apSW7 = apS18;
var ApT11 = of18(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex12 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex10(f), map24(traverseReadonlyNonEmptyArrayWithIndex2(SK)));
};
var traverseReadonlyArrayWithIndex12 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex12(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT11;
  };
};
var traverseReadonlyNonEmptyArrayWithIndexSeq4 = function(f) {
  return function(as15) {
    return function() {
      return tail(as15).reduce(function(acc, a, i) {
        return acc.then(function(ebs) {
          return isLeft(ebs) ? acc : f(i + 1, a)().then(function(eb) {
            if (isLeft(eb)) {
              return eb;
            }
            ebs.right.push(eb.right);
            return ebs;
          });
        });
      }, f(0, head(as15))().then(map9(singleton)));
    };
  };
};
var traverseReadonlyArrayWithIndexSeq4 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndexSeq4(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT11;
  };
};
var traverseArrayWithIndex11 = traverseReadonlyArrayWithIndex12;
var traverseArray11 = function(f) {
  return traverseReadonlyArrayWithIndex12(function(_, a) {
    return f(a);
  });
};
var sequenceArray11 = traverseArray11(identity);
var traverseSeqArrayWithIndex4 = traverseReadonlyArrayWithIndexSeq4;
var traverseSeqArray4 = function(f) {
  return traverseReadonlyArrayWithIndexSeq4(function(_, a) {
    return f(a);
  });
};
var sequenceSeqArray4 = traverseSeqArray4(identity);
var chain21 = flatMap20;
var chainW7 = flatMap20;
var chainFirst18 = tap14;
var chainFirstW7 = tap14;
var orElseFirst4 = tapError4;
var orElseFirstW3 = tapError4;
var taskEither = {
  URI: URI25,
  bimap: mapBoth4,
  mapLeft: mapError4,
  map: _map21,
  of: of18,
  ap: _apPar3,
  chain: flatMap20,
  alt: _alt11,
  fromIO: fromIO7,
  fromTask: fromTask3,
  throwError: throwError5
};
var taskEitherSeq = {
  URI: URI25,
  bimap: mapBoth4,
  mapLeft: mapError4,
  map: _map21,
  of: of18,
  ap: _apSeq4,
  chain: flatMap20,
  alt: _alt11,
  fromIO: fromIO7,
  fromTask: fromTask3,
  throwError: throwError5
};
var getApplySemigroup6 = getApplySemigroup(ApplySeq3);
var getApplyMonoid5 = getApplicativeMonoid(ApplicativeSeq4);
var getSemigroup17 = function(S) {
  return getApplySemigroup(ApplySeq)(getSemigroup9(S));
};
function getTaskValidation(SE) {
  var applicativeTaskValidation = getApplicativeTaskValidation(ApplicativePar2, SE);
  var altTaskValidation = getAltTaskValidation(SE);
  return {
    URI: URI25,
    _E: void 0,
    map: _map21,
    ap: applicativeTaskValidation.ap,
    of: of18,
    chain: flatMap20,
    bimap: mapBoth4,
    mapLeft: mapError4,
    alt: altTaskValidation.alt,
    fromIO: fromIO7,
    fromTask: fromTask3,
    throwError: throwError5
  };
}

// node_modules/fp-ts/es6/ReaderTaskEither.js
var fromTaskEither = of7;
var left9 = left4(Pointed16);
var right9 = right4(Pointed16);
var rightTask2 = flow(rightTask, fromTaskEither);
var leftTask2 = flow(leftTask, fromTaskEither);
var rightReader2 = function(ma) {
  return flow(ma, right8);
};
var leftReader2 = function(me) {
  return flow(me, left8);
};
var rightReaderTask = rightF(Functor20);
var leftReaderTask = leftF(Functor20);
var rightIO3 = flow(rightIO2, fromTaskEither);
var leftIO3 = flow(leftIO2, fromTaskEither);
var rightReaderIO = function(ma) {
  return flow(ma, rightIO2);
};
var leftReaderIO = function(me) {
  return flow(me, leftIO2);
};
var fromEither9 = of17;
var fromReader5 = rightReader2;
var fromIO8 = rightIO3;
var fromTask4 = rightTask2;
var fromIOEither3 = flow(fromIOEither2, fromTaskEither);
var fromReaderEither = function(ma) {
  return flow(ma, fromEither8);
};
var match13 = match6(Functor20);
var matchW11 = match13;
var matchE7 = matchE(Chain16);
var fold12 = matchE7;
var matchEW5 = matchE7;
var foldW7 = matchEW5;
var getOrElse9 = getOrElse3(Monad16);
var getOrElseW7 = getOrElse9;
var toUnion6 = toUnion2(Functor20);
var fromNullable7 = fromNullable3(Pointed16);
var fromNullableK7 = fromNullableK3(Pointed16);
var chainNullableK7 = chainNullableK3(Monad16);
var local5 = local;
var asksReaderTaskEitherW = asksReaderW;
var asksReaderTaskEither = asksReaderTaskEitherW;
var orElse7 = orElse3(Monad16);
var orElseW5 = orElse7;
var tapError5 = dual(2, tapError(Monad16));
var orLeft5 = orLeft(Monad16);
var orLeftW2 = orLeft5;
var swap6 = swap2(Functor20);
var fromIOEitherK2 = function(f) {
  return flow(f, fromIOEither3);
};
var fromTaskEitherK = function(f) {
  return flow(f, fromTaskEither);
};
var fromReaderEitherK = function(f) {
  return flow(f, fromReaderEither);
};
var _map22 = function(fa, f) {
  return pipe(fa, map27(f));
};
var _apPar4 = function(fab, fa) {
  return pipe(fab, ap23(fa));
};
var _apSeq5 = function(fab, fa) {
  return flatMap21(fab, function(f) {
    return pipe(fa, map27(f));
  });
};
var _alt12 = function(fa, that) {
  return pipe(fa, alt15(that));
};
var map27 = map10(Functor20);
var mapBoth5 = dual(3, mapBoth(Functor20));
var bimap9 = mapBoth5;
var mapError5 = dual(2, mapError(Functor20));
var mapLeft9 = mapError5;
var ap23 = ap8(ApplyPar3);
var apW8 = ap23;
var of19 = right9;
var flatMap21 = dual(2, flatMap7(Monad16));
var flattenW8 = flatMap21(identity);
var flatten18 = flattenW8;
var alt15 = alt7(Monad16);
var altW12 = alt15;
var throwError6 = left9;
var URI26 = "ReaderTaskEither";
var getCompactable5 = function(M) {
  var C = getCompactable(M);
  return {
    URI: URI26,
    _E: void 0,
    compact: compact4(Functor20, C),
    separate: separate4(Functor20, C, Functor8)
  };
};
function getFilterable5(M) {
  var F = getFilterable(M);
  var C = getCompactable5(M);
  var filter16 = filter6(Functor20, F);
  var filterMap14 = filterMap4(Functor20, F);
  var partition14 = partition4(Functor20, F);
  var partitionMap14 = partitionMap4(Functor20, F);
  return {
    URI: URI26,
    _E: void 0,
    map: _map22,
    compact: C.compact,
    separate: C.separate,
    filter: function(fa, predicate) {
      return pipe(fa, filter16(predicate));
    },
    filterMap: function(fa, f) {
      return pipe(fa, filterMap14(f));
    },
    partition: function(fa, predicate) {
      return pipe(fa, partition14(predicate));
    },
    partitionMap: function(fa, f) {
      return pipe(fa, partitionMap14(f));
    }
  };
}
function getApplicativeReaderTaskValidation(A, S) {
  var ap29 = ap(Apply7, getApplicativeTaskValidation(A, S));
  return {
    URI: URI26,
    _E: void 0,
    map: _map22,
    ap: function(fab, fa) {
      return pipe(fab, ap29(fa));
    },
    of: of19
  };
}
function getAltReaderTaskValidation(S) {
  var alt18 = altValidation(Monad16, S);
  return {
    URI: URI26,
    _E: void 0,
    map: _map22,
    alt: function(fa, that) {
      return pipe(fa, alt18(that));
    }
  };
}
var Functor22 = {
  URI: URI26,
  map: _map22
};
var as12 = dual(2, as(Functor22));
var asUnit12 = asUnit(Functor22);
var flap23 = flap(Functor22);
var Pointed18 = {
  URI: URI26,
  of: of19
};
var ApplyPar5 = {
  URI: URI26,
  map: _map22,
  ap: _apPar4
};
var apFirst19 = apFirst(ApplyPar5);
var apFirstW6 = apFirst19;
var apSecond19 = apSecond(ApplyPar5);
var apSecondW6 = apSecond19;
var ApplicativePar5 = {
  URI: URI26,
  map: _map22,
  ap: _apPar4,
  of: of19
};
var ApplySeq4 = {
  URI: URI26,
  map: _map22,
  ap: _apSeq5
};
var ApplicativeSeq5 = {
  URI: URI26,
  map: _map22,
  ap: _apSeq5,
  of: of19
};
var Chain18 = {
  URI: URI26,
  map: _map22,
  ap: _apPar4,
  chain: flatMap21
};
var Monad18 = {
  URI: URI26,
  map: _map22,
  ap: _apPar4,
  chain: flatMap21,
  of: of19
};
var MonadIO8 = {
  URI: URI26,
  map: _map22,
  ap: _apPar4,
  chain: flatMap21,
  of: of19,
  fromIO: fromIO8
};
var MonadTask4 = {
  URI: URI26,
  map: _map22,
  ap: _apPar4,
  chain: flatMap21,
  of: of19,
  fromIO: fromIO8,
  fromTask: fromTask4
};
var MonadThrow6 = {
  URI: URI26,
  map: _map22,
  ap: _apPar4,
  chain: flatMap21,
  of: of19,
  throwError: throwError6
};
var FromEither9 = {
  URI: URI26,
  fromEither: fromEither9
};
var FromIO8 = {
  URI: URI26,
  fromIO: fromIO8
};
var FromTask4 = {
  URI: URI26,
  fromIO: fromIO8,
  fromTask: fromTask4
};
var FromReader4 = {
  URI: URI26,
  fromReader: fromReader5
};
var tap15 = dual(2, tap(Chain18));
var tapEither7 = dual(2, tapEither(FromEither9, Chain18));
var tapIO8 = dual(2, tapIO(FromIO8, Chain18));
var tapTask4 = dual(2, tapTask(FromTask4, Chain18));
var tapReader5 = dual(2, tapReader(FromReader4, Chain18));
var tapReaderEither = dual(2, function(self, f) {
  return tap15(self, fromReaderEitherK(f));
});
var tapTaskEither = dual(2, function(self, f) {
  return tap15(self, fromTaskEitherK(f));
});
var tapReaderTask = dual(2, function(self, f) {
  return tap15(self, fromReaderTaskK(f));
});
var tapReaderIO2 = dual(2, function(self, f) {
  return tap15(self, fromReaderIOK2(f));
});
var Bifunctor7 = {
  URI: URI26,
  bimap: mapBoth5,
  mapLeft: mapError5
};
var Alt12 = {
  URI: URI26,
  map: _map22,
  alt: _alt12
};
var ask6 = ask2(FromReader4);
var asks6 = asks2(FromReader4);
var fromReaderK5 = fromReaderK(FromReader4);
var chainFirstReaderK5 = tapReader5;
var chainFirstReaderKW4 = tapReader5;
var chainFirstReaderEitherKW = tapReaderEither;
var chainFirstReaderEitherK = tapReaderEither;
var chainFirstTaskEitherKW = tapTaskEither;
var chainFirstTaskEitherK = tapTaskEither;
var fromReaderTaskK = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return rightReaderTask(f.apply(void 0, a));
  };
};
var chainFirstReaderTaskKW = tapReaderTask;
var chainFirstReaderTaskK = tapReaderTask;
var fromReaderIOK2 = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return rightReaderIO(f.apply(void 0, a));
  };
};
var chainFirstReaderIOKW2 = tapReaderIO2;
var chainFirstReaderIOK2 = tapReaderIO2;
var fromOption9 = fromOption(FromEither9);
var fromOptionK10 = fromOptionK(FromEither9);
var chainOptionK8 = chainOptionK(FromEither9, Chain18);
var chainOptionKW5 = chainOptionK8;
var _FromEither6 = {
  fromEither: FromEither9.fromEither
};
var liftNullable6 = liftNullable(_FromEither6);
var liftOption6 = liftOption(_FromEither6);
var _FlatMap9 = {
  flatMap: flatMap21
};
var _FromIO7 = {
  fromIO: fromIO8
};
var _FromTask3 = {
  fromTask: fromTask4
};
var _FromReader4 = {
  fromReader: fromReader5
};
var flatMapNullable7 = flatMapNullable(_FromEither6, _FlatMap9);
var flatMapOption7 = flatMapOption(_FromEither6, _FlatMap9);
var flatMapEither6 = flatMapEither(_FromEither6, _FlatMap9);
var flatMapTaskEither = dual(2, function(self, f) {
  return flatMap21(self, fromTaskEitherK(f));
});
var flatMapReaderTask = dual(2, function(self, f) {
  return flatMap21(self, fromReaderTaskK(f));
});
var flatMapIO8 = flatMapIO(_FromIO7, _FlatMap9);
var flatMapTask4 = flatMapTask(_FromTask3, _FlatMap9);
var flatMapReader5 = flatMapReader(_FromReader4, _FlatMap9);
var flatMapReaderIO2 = dual(2, function(self, f) {
  return flatMap21(self, fromReaderIOK2(f));
});
var flatMapIOEither2 = dual(2, function(self, f) {
  return flatMap21(self, fromIOEitherK2(f));
});
var flatMapReaderEither = dual(2, function(self, f) {
  return flatMap21(self, fromReaderEitherK(f));
});
var chainEitherK7 = flatMapEither6;
var chainEitherKW4 = flatMapEither6;
var chainFirstEitherK7 = tapEither7;
var chainFirstEitherKW4 = tapEither7;
var chainTaskEitherKW = flatMapTaskEither;
var chainTaskEitherK = flatMapTaskEither;
var chainReaderTaskKW = flatMapReaderTask;
var chainReaderTaskK = flatMapReaderTask;
var fromPredicate11 = fromPredicate(FromEither9);
var filterOrElse6 = filterOrElse(FromEither9, Chain18);
var filterOrElseW5 = filterOrElse6;
var fromEitherK9 = fromEitherK(FromEither9);
var fromIOK8 = fromIOK(FromIO8);
var chainIOK8 = flatMapIO8;
var chainFirstIOK8 = tapIO8;
var fromTaskK4 = fromTaskK(FromTask4);
var chainTaskK4 = flatMapTask4;
var chainFirstTaskK4 = tapTask4;
var chainReaderK5 = flatMapReader5;
var chainReaderKW4 = flatMapReader5;
var chainReaderIOKW2 = flatMapReaderIO2;
var chainReaderIOK2 = flatMapReaderIO2;
var chainIOEitherKW2 = flatMapIOEither2;
var chainIOEitherK2 = flatMapIOEither2;
var chainReaderEitherKW = flatMapReaderEither;
var chainReaderEitherK = flatMapReaderEither;
function bracket3(acquire, use, release) {
  return bracketW3(acquire, use, release);
}
function bracketW3(acquire, use, release) {
  return function(r) {
    return bracketW2(acquire(r), function(a) {
      return use(a)(r);
    }, function(a, e) {
      return release(a, e)(r);
    });
  };
}
var Do17 = of19(emptyRecord);
var bindTo19 = bindTo(Functor22);
var let_18 = let_(Functor22);
var bind19 = bind(Chain18);
var bindW8 = bind19;
var apS19 = apS(ApplyPar5);
var apSW8 = apS19;
var ApT12 = of19(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex13 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex3(f), map11(traverseReadonlyNonEmptyArrayWithIndex12(SK)));
};
var traverseReadonlyArrayWithIndex13 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex13(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT12;
  };
};
var traverseReadonlyNonEmptyArrayWithIndexSeq5 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex3(f), map11(traverseReadonlyNonEmptyArrayWithIndexSeq4(SK)));
};
var traverseReadonlyArrayWithIndexSeq5 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndexSeq5(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT12;
  };
};
var traverseArrayWithIndex12 = traverseReadonlyArrayWithIndex13;
var traverseArray12 = function(f) {
  return traverseReadonlyArrayWithIndex13(function(_, a) {
    return f(a);
  });
};
var sequenceArray12 = traverseArray12(identity);
var traverseSeqArrayWithIndex5 = traverseReadonlyArrayWithIndexSeq5;
var traverseSeqArray5 = function(f) {
  return traverseReadonlyArrayWithIndexSeq5(function(_, a) {
    return f(a);
  });
};
var sequenceSeqArray5 = traverseSeqArray5(identity);
var chain22 = flatMap21;
var chainW8 = flatMap21;
var chainFirst19 = tap15;
var chainFirstW8 = tap15;
var orElseFirst5 = tapError5;
var orElseFirstW4 = tapError5;
var readerTaskEither = {
  URI: URI26,
  map: _map22,
  of: of19,
  ap: _apPar4,
  chain: flatMap21,
  alt: _alt12,
  bimap: mapBoth5,
  mapLeft: mapError5,
  fromIO: fromIO8,
  fromTask: fromTask4,
  throwError: throwError6
};
var readerTaskEitherSeq = {
  URI: URI26,
  map: _map22,
  of: of19,
  ap: _apSeq5,
  chain: flatMap21,
  alt: _alt12,
  bimap: mapBoth5,
  mapLeft: mapError5,
  fromIO: fromIO8,
  fromTask: fromTask4,
  throwError: throwError6
};
var getApplySemigroup7 = getApplySemigroup(ApplySeq4);
var getApplyMonoid6 = getApplicativeMonoid(ApplicativeSeq5);
var getSemigroup18 = function(S) {
  return getApplySemigroup(ApplySeq2)(getSemigroup9(S));
};
function getReaderTaskValidation(SE) {
  var applicativeReaderTaskValidation = getApplicativeReaderTaskValidation(ApplicativePar2, SE);
  var altReaderTaskValidation = getAltReaderTaskValidation(SE);
  return {
    URI: URI26,
    _E: void 0,
    map: _map22,
    of: of19,
    chain: flatMap21,
    bimap: mapBoth5,
    mapLeft: mapError5,
    ap: applicativeReaderTaskValidation.ap,
    alt: altReaderTaskValidation.alt,
    fromIO: fromIO8,
    fromTask: fromTask4,
    throwError: throwError6
  };
}
function run2(ma, r) {
  return ma(r)();
}

// node_modules/fp-ts/es6/ReadonlyRecord.js
var ReadonlyRecord_exports = {};
__export(ReadonlyRecord_exports, {
  Compactable: () => Compactable7,
  Filterable: () => Filterable7,
  FilterableWithIndex: () => FilterableWithIndex3,
  Foldable: () => Foldable8,
  FoldableWithIndex: () => FoldableWithIndex5,
  Functor: () => Functor23,
  FunctorWithIndex: () => FunctorWithIndex5,
  Traversable: () => Traversable8,
  TraversableWithIndex: () => TraversableWithIndex5,
  URI: () => URI27,
  Witherable: () => Witherable4,
  _filter: () => _filter7,
  _filterMap: () => _filterMap7,
  _filterMapWithIndex: () => _filterMapWithIndex5,
  _filterWithIndex: () => _filterWithIndex5,
  _foldMap: () => _foldMap8,
  _foldMapWithIndex: () => _foldMapWithIndex5,
  _map: () => _map23,
  _mapWithIndex: () => _mapWithIndex7,
  _partition: () => _partition7,
  _partitionMap: () => _partitionMap7,
  _partitionMapWithIndex: () => _partitionMapWithIndex5,
  _partitionWithIndex: () => _partitionWithIndex5,
  _reduce: () => _reduce8,
  _reduceRight: () => _reduceRight8,
  _reduceRightWithIndex: () => _reduceRightWithIndex5,
  _reduceWithIndex: () => _reduceWithIndex5,
  _sequence: () => _sequence,
  _traverse: () => _traverse8,
  collect: () => collect3,
  compact: () => compact8,
  deleteAt: () => deleteAt5,
  difference: () => difference5,
  elem: () => elem7,
  empty: () => empty8,
  every: () => every3,
  filter: () => filter11,
  filterMap: () => filterMap9,
  filterMapWithIndex: () => filterMapWithIndex6,
  filterWithIndex: () => filterWithIndex8,
  flap: () => flap24,
  foldMap: () => foldMap12,
  foldMapWithIndex: () => foldMapWithIndex9,
  fromEntries: () => fromEntries,
  fromFoldable: () => fromFoldable3,
  fromFoldableMap: () => fromFoldableMap,
  fromRecord: () => fromRecord,
  getDifferenceMagma: () => getDifferenceMagma5,
  getEq: () => getEq11,
  getFoldable: () => getFoldable3,
  getFoldableWithIndex: () => getFoldableWithIndex3,
  getIntersectionSemigroup: () => getIntersectionSemigroup5,
  getMonoid: () => getMonoid15,
  getShow: () => getShow11,
  getTraversable: () => getTraversable2,
  getTraversableWithIndex: () => getTraversableWithIndex3,
  getUnionMonoid: () => getUnionMonoid5,
  getUnionSemigroup: () => getUnionSemigroup7,
  getWitherable: () => getWitherable4,
  has: () => has2,
  hasOwnProperty: () => hasOwnProperty,
  insertAt: () => insertAt7,
  intersection: () => intersection5,
  isEmpty: () => isEmpty6,
  isSubrecord: () => isSubrecord,
  keys: () => keys3,
  lookup: () => lookup5,
  map: () => map28,
  mapWithIndex: () => mapWithIndex9,
  modifyAt: () => modifyAt7,
  partition: () => partition9,
  partitionMap: () => partitionMap9,
  partitionMapWithIndex: () => partitionMapWithIndex6,
  partitionWithIndex: () => partitionWithIndex6,
  pop: () => pop3,
  readonlyRecord: () => readonlyRecord,
  reduce: () => reduce12,
  reduceRight: () => reduceRight12,
  reduceRightWithIndex: () => reduceRightWithIndex9,
  reduceWithIndex: () => reduceWithIndex9,
  separate: () => separate8,
  sequence: () => sequence8,
  singleton: () => singleton4,
  size: () => size6,
  some: () => some7,
  toEntries: () => toEntries,
  toReadonlyArray: () => toReadonlyArray3,
  toRecord: () => toRecord,
  toUnfoldable: () => toUnfoldable3,
  traverse: () => traverse8,
  traverseWithIndex: () => traverseWithIndex5,
  union: () => union7,
  updateAt: () => updateAt7,
  upsertAt: () => upsertAt3,
  wilt: () => wilt4,
  wither: () => wither4
});

// node_modules/fp-ts/es6/string.js
var string_exports = {};
__export(string_exports, {
  Eq: () => Eq5,
  Monoid: () => Monoid2,
  Ord: () => Ord4,
  Semigroup: () => Semigroup2,
  Show: () => Show3,
  empty: () => empty7,
  endsWith: () => endsWith,
  includes: () => includes,
  isEmpty: () => isEmpty5,
  isString: () => isString,
  replace: () => replace,
  size: () => size5,
  slice: () => slice,
  split: () => split2,
  startsWith: () => startsWith,
  toLowerCase: () => toLowerCase,
  toUpperCase: () => toUpperCase,
  trim: () => trim,
  trimLeft: () => trimLeft,
  trimRight: () => trimRight
});
var Eq5 = {
  equals: function(first3, second2) {
    return first3 === second2;
  }
};
var Semigroup2 = {
  concat: function(first3, second2) {
    return first3 + second2;
  }
};
var empty7 = "";
var Monoid2 = {
  concat: Semigroup2.concat,
  empty: empty7
};
var Ord4 = {
  equals: Eq5.equals,
  compare: function(first3, second2) {
    return first3 < second2 ? -1 : first3 > second2 ? 1 : 0;
  }
};
var Show3 = {
  show: function(s) {
    return JSON.stringify(s);
  }
};
var isString = function(u) {
  return typeof u === "string";
};
var toUpperCase = function(s) {
  return s.toUpperCase();
};
var toLowerCase = function(s) {
  return s.toLowerCase();
};
var replace = function(searchValue, replaceValue) {
  return function(s) {
    return s.replace(searchValue, replaceValue);
  };
};
var trim = function(s) {
  return s.trim();
};
var trimLeft = function(s) {
  return s.trimLeft();
};
var trimRight = function(s) {
  return s.trimRight();
};
var slice = function(start, end) {
  return function(s) {
    return s.slice(start, end);
  };
};
var isEmpty5 = function(s) {
  return s.length === 0;
};
var size5 = function(s) {
  return s.length;
};
var split2 = function(separator) {
  return function(s) {
    var out = s.split(separator);
    return isNonEmpty2(out) ? out : [s];
  };
};
var includes = function(searchString, position) {
  return function(s) {
    return s.includes(searchString, position);
  };
};
var startsWith = function(searchString, position) {
  return function(s) {
    return s.startsWith(searchString, position);
  };
};
var endsWith = function(searchString, position) {
  return function(s) {
    return s.endsWith(searchString, position);
  };
};

// node_modules/fp-ts/es6/ReadonlyRecord.js
var fromRecord = function(r) {
  return Object.assign({}, r);
};
var toRecord = function(r) {
  return Object.assign({}, r);
};
var size6 = function(r) {
  return Object.keys(r).length;
};
var isEmpty6 = function(r) {
  for (var k in r) {
    if (has.call(r, k)) {
      return false;
    }
  }
  return true;
};
var keys_ = function(O) {
  return function(r) {
    return Object.keys(r).sort(O.compare);
  };
};
var keys3 = keys_(Ord4);
function collect3(O) {
  if (typeof O === "function") {
    return collect3(Ord4)(O);
  }
  var keysO = keys_(O);
  return function(f) {
    return function(r) {
      var out = [];
      for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {
        var key = _a[_i];
        out.push(f(key, r[key]));
      }
      return out;
    };
  };
}
var toReadonlyArray3 = collect3(Ord4)(function(k, a) {
  return [k, a];
});
function toUnfoldable3(U) {
  return function(r) {
    var sas = toReadonlyArray3(r);
    var len = sas.length;
    return U.unfold(0, function(b) {
      return b < len ? some([sas[b], b + 1]) : none;
    });
  };
}
var upsertAt3 = function(k, a) {
  return function(r) {
    if (has.call(r, k) && r[k] === a) {
      return r;
    }
    var out = Object.assign({}, r);
    out[k] = a;
    return out;
  };
};
var has2 = function(k, r) {
  return has.call(r, k);
};
function deleteAt5(k) {
  return function(r) {
    if (!has.call(r, k)) {
      return r;
    }
    var out = Object.assign({}, r);
    delete out[k];
    return out;
  };
}
var updateAt7 = function(k, a) {
  return function(r) {
    if (!has2(k, r)) {
      return none;
    }
    if (r[k] === a) {
      return some(r);
    }
    var out = Object.assign({}, r);
    out[k] = a;
    return some(out);
  };
};
var modifyAt7 = function(k, f) {
  return function(r) {
    if (!has2(k, r)) {
      return none;
    }
    var next = f(r[k]);
    if (next === r[k]) {
      return some(r);
    }
    var out = Object.assign({}, r);
    out[k] = next;
    return some(out);
  };
};
function pop3(k) {
  var deleteAtk = deleteAt5(k);
  return function(r) {
    var oa = lookup5(k, r);
    return isNone(oa) ? none : some([oa.value, deleteAtk(r)]);
  };
}
function isSubrecord(E) {
  return function(me, that) {
    if (that === void 0) {
      var isSubrecordE_1 = isSubrecord(E);
      return function(that2) {
        return isSubrecordE_1(that2, me);
      };
    }
    for (var k in me) {
      if (!has.call(that, k) || !E.equals(me[k], that[k])) {
        return false;
      }
    }
    return true;
  };
}
function lookup5(k, r) {
  if (r === void 0) {
    return function(r2) {
      return lookup5(k, r2);
    };
  }
  return has.call(r, k) ? some(r[k]) : none;
}
var empty8 = {};
function mapWithIndex9(f) {
  return function(r) {
    var out = {};
    for (var k in r) {
      if (has.call(r, k)) {
        out[k] = f(k, r[k]);
      }
    }
    return out;
  };
}
function map28(f) {
  return mapWithIndex9(function(_, a) {
    return f(a);
  });
}
function reduceWithIndex9() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 2) {
    return reduceWithIndex9(Ord4).apply(void 0, args);
  }
  var keysO = keys_(args[0]);
  return function(b, f) {
    return function(fa) {
      var out = b;
      var ks = keysO(fa);
      var len = ks.length;
      for (var i = 0; i < len; i++) {
        var k = ks[i];
        out = f(k, out, fa[k]);
      }
      return out;
    };
  };
}
function foldMapWithIndex9(O) {
  if ("compare" in O) {
    var keysO_1 = keys_(O);
    return function(M) {
      return function(f) {
        return function(fa) {
          var out = M.empty;
          var ks = keysO_1(fa);
          var len = ks.length;
          for (var i = 0; i < len; i++) {
            var k = ks[i];
            out = M.concat(out, f(k, fa[k]));
          }
          return out;
        };
      };
    };
  }
  return foldMapWithIndex9(Ord4)(O);
}
function reduceRightWithIndex9() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 2) {
    return reduceRightWithIndex9(Ord4).apply(void 0, args);
  }
  var keysO = keys_(args[0]);
  return function(b, f) {
    return function(fa) {
      var out = b;
      var ks = keysO(fa);
      var len = ks.length;
      for (var i = len - 1; i >= 0; i--) {
        var k = ks[i];
        out = f(k, fa[k], out);
      }
      return out;
    };
  };
}
var singleton4 = function(k, a) {
  var _a;
  return _a = {}, _a[k] = a, _a;
};
function traverseWithIndex5(F) {
  var traverseWithIndexOF = _traverseWithIndex5(Ord4)(F);
  return function(f) {
    return function(ta) {
      return traverseWithIndexOF(ta, f);
    };
  };
}
function traverse8(F) {
  var traverseOF = _traverse8(Ord4)(F);
  return function(f) {
    return function(ta) {
      return traverseOF(ta, f);
    };
  };
}
function sequence8(F) {
  return _sequence(Ord4)(F);
}
var wither4 = function(F) {
  var traverseF = traverse8(F);
  return function(f) {
    return function(fa) {
      return F.map(pipe(fa, traverseF(f)), compact8);
    };
  };
};
var wilt4 = function(F) {
  var traverseF = traverse8(F);
  return function(f) {
    return function(fa) {
      return F.map(pipe(fa, traverseF(f)), separate8);
    };
  };
};
function partitionMapWithIndex6(f) {
  return function(r) {
    var left14 = {};
    var right14 = {};
    for (var k in r) {
      if (has.call(r, k)) {
        var e = f(k, r[k]);
        switch (e._tag) {
          case "Left":
            left14[k] = e.left;
            break;
          case "Right":
            right14[k] = e.right;
            break;
        }
      }
    }
    return separated(left14, right14);
  };
}
function partitionWithIndex6(predicateWithIndex) {
  return function(r) {
    var left14 = {};
    var right14 = {};
    for (var k in r) {
      if (has.call(r, k)) {
        var a = r[k];
        if (predicateWithIndex(k, a)) {
          right14[k] = a;
        } else {
          left14[k] = a;
        }
      }
    }
    return separated(left14, right14);
  };
}
function filterMapWithIndex6(f) {
  return function(r) {
    var out = {};
    for (var k in r) {
      if (has.call(r, k)) {
        var ob = f(k, r[k]);
        if (isSome(ob)) {
          out[k] = ob.value;
        }
      }
    }
    return out;
  };
}
function filterWithIndex8(predicateWithIndex) {
  return function(fa) {
    var out = {};
    var changed = false;
    for (var key in fa) {
      if (has.call(fa, key)) {
        var a = fa[key];
        if (predicateWithIndex(key, a)) {
          out[key] = a;
        } else {
          changed = true;
        }
      }
    }
    return changed ? out : fa;
  };
}
function fromFoldable3(M, F) {
  var fromFoldableMapM = fromFoldableMap(M, F);
  return function(fka) {
    return fromFoldableMapM(fka, identity);
  };
}
function fromFoldableMap(M, F) {
  return function(ta, f) {
    return F.reduce(ta, {}, function(r, a) {
      var _a = f(a), k = _a[0], b = _a[1];
      r[k] = has.call(r, k) ? M.concat(r[k], b) : b;
      return r;
    });
  };
}
var toEntries = toReadonlyArray3;
var fromEntries = function(fa) {
  var out = {};
  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
    var a = fa_1[_i];
    out[a[0]] = a[1];
  }
  return out;
};
function every3(predicate) {
  return function(r) {
    for (var k in r) {
      if (!predicate(r[k])) {
        return false;
      }
    }
    return true;
  };
}
function some7(predicate) {
  return function(r) {
    for (var k in r) {
      if (predicate(r[k])) {
        return true;
      }
    }
    return false;
  };
}
function elem7(E) {
  return function(a, fa) {
    if (fa === void 0) {
      var elemE_1 = elem7(E);
      return function(fa2) {
        return elemE_1(a, fa2);
      };
    }
    for (var k in fa) {
      if (E.equals(fa[k], a)) {
        return true;
      }
    }
    return false;
  };
}
var union7 = function(M) {
  return function(second2) {
    return function(first3) {
      if (isEmpty6(first3)) {
        return second2;
      }
      if (isEmpty6(second2)) {
        return first3;
      }
      var out = {};
      for (var k in first3) {
        if (has2(k, second2)) {
          out[k] = M.concat(first3[k], second2[k]);
        } else {
          out[k] = first3[k];
        }
      }
      for (var k in second2) {
        if (!has2(k, out)) {
          out[k] = second2[k];
        }
      }
      return out;
    };
  };
};
var intersection5 = function(M) {
  return function(second2) {
    return function(first3) {
      if (isEmpty6(first3) || isEmpty6(second2)) {
        return empty8;
      }
      var out = {};
      for (var k in first3) {
        if (has2(k, second2)) {
          out[k] = M.concat(first3[k], second2[k]);
        }
      }
      return out;
    };
  };
};
var difference5 = function(second2) {
  return function(first3) {
    if (isEmpty6(first3)) {
      return second2;
    }
    if (isEmpty6(second2)) {
      return first3;
    }
    var out = {};
    for (var k in first3) {
      if (!has2(k, second2)) {
        out[k] = first3[k];
      }
    }
    for (var k in second2) {
      if (!has2(k, first3)) {
        out[k] = second2[k];
      }
    }
    return out;
  };
};
var _map23 = function(fa, f) {
  return pipe(fa, map28(f));
};
var _mapWithIndex7 = function(fa, f) {
  return pipe(fa, mapWithIndex9(f));
};
var _reduce8 = function(O) {
  var reduceO = reduce12(O);
  return function(fa, b, f) {
    return pipe(fa, reduceO(b, f));
  };
};
var _foldMap8 = function(O) {
  return function(M) {
    var foldMapM = foldMap12(O)(M);
    return function(fa, f) {
      return pipe(fa, foldMapM(f));
    };
  };
};
var _reduceRight8 = function(O) {
  var reduceRightO = reduceRight12(O);
  return function(fa, b, f) {
    return pipe(fa, reduceRightO(b, f));
  };
};
var _filter7 = function(fa, predicate) {
  return pipe(fa, filter11(predicate));
};
var _filterMap7 = function(fa, f) {
  return pipe(fa, filterMap9(f));
};
var _partition7 = function(fa, predicate) {
  return pipe(fa, partition9(predicate));
};
var _partitionMap7 = function(fa, f) {
  return pipe(fa, partitionMap9(f));
};
var _reduceWithIndex5 = function(O) {
  var reduceWithIndexO = reduceWithIndex9(O);
  return function(fa, b, f) {
    return pipe(fa, reduceWithIndexO(b, f));
  };
};
var _foldMapWithIndex5 = function(O) {
  var foldMapWithIndexO = foldMapWithIndex9(O);
  return function(M) {
    var foldMapWithIndexM = foldMapWithIndexO(M);
    return function(fa, f) {
      return pipe(fa, foldMapWithIndexM(f));
    };
  };
};
var _reduceRightWithIndex5 = function(O) {
  var reduceRightWithIndexO = reduceRightWithIndex9(O);
  return function(fa, b, f) {
    return pipe(fa, reduceRightWithIndexO(b, f));
  };
};
var _partitionMapWithIndex5 = function(fa, f) {
  return pipe(fa, partitionMapWithIndex6(f));
};
var _partitionWithIndex5 = function(fa, predicateWithIndex) {
  return pipe(fa, partitionWithIndex6(predicateWithIndex));
};
var _filterMapWithIndex5 = function(fa, f) {
  return pipe(fa, filterMapWithIndex6(f));
};
var _filterWithIndex5 = function(fa, predicateWithIndex) {
  return pipe(fa, filterWithIndex8(predicateWithIndex));
};
var _traverse8 = function(O) {
  var traverseWithIndexO = _traverseWithIndex5(O);
  return function(F) {
    var traverseWithIndexOF = traverseWithIndexO(F);
    return function(ta, f) {
      return traverseWithIndexOF(ta, flow(SK, f));
    };
  };
};
var _sequence = function(O) {
  var traverseO = _traverse8(O);
  return function(F) {
    var traverseOF = traverseO(F);
    return function(ta) {
      return traverseOF(ta, identity);
    };
  };
};
var _traverseWithIndex5 = function(O) {
  return function(F) {
    var keysO = keys_(O);
    return function(ta, f) {
      var ks = keysO(ta);
      if (ks.length === 0) {
        return F.of(empty8);
      }
      var fr = F.of({});
      var _loop_1 = function(key2) {
        fr = F.ap(F.map(fr, function(r) {
          return function(b) {
            var _a;
            return Object.assign({}, r, (_a = {}, _a[key2] = b, _a));
          };
        }), f(key2, ta[key2]));
      };
      for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
        var key = ks_1[_i];
        _loop_1(key);
      }
      return fr;
    };
  };
};
var filter11 = function(predicate) {
  return filterWithIndex8(function(_, a) {
    return predicate(a);
  });
};
var filterMap9 = function(f) {
  return filterMapWithIndex6(function(_, a) {
    return f(a);
  });
};
var partition9 = function(predicate) {
  return partitionWithIndex6(function(_, a) {
    return predicate(a);
  });
};
var partitionMap9 = function(f) {
  return partitionMapWithIndex6(function(_, a) {
    return f(a);
  });
};
function reduce12() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 1) {
    var reduceWithIndexO_1 = reduceWithIndex9(args[0]);
    return function(b, f) {
      return reduceWithIndexO_1(b, function(_, b2, a) {
        return f(b2, a);
      });
    };
  }
  return reduce12(Ord4).apply(void 0, args);
}
function foldMap12(O) {
  if ("compare" in O) {
    var foldMapWithIndexO_1 = foldMapWithIndex9(O);
    return function(M) {
      var foldMapWithIndexM = foldMapWithIndexO_1(M);
      return function(f) {
        return foldMapWithIndexM(function(_, a) {
          return f(a);
        });
      };
    };
  }
  return foldMap12(Ord4)(O);
}
function reduceRight12() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 1) {
    var reduceRightWithIndexO_1 = reduceRightWithIndex9(args[0]);
    return function(b, f) {
      return reduceRightWithIndexO_1(b, function(_, b2, a) {
        return f(b2, a);
      });
    };
  }
  return reduceRight12(Ord4).apply(void 0, args);
}
var compact8 = function(r) {
  var out = {};
  for (var k in r) {
    if (has.call(r, k)) {
      var oa = r[k];
      if (isSome(oa)) {
        out[k] = oa.value;
      }
    }
  }
  return out;
};
var separate8 = function(r) {
  var left14 = {};
  var right14 = {};
  for (var k in r) {
    if (has.call(r, k)) {
      var e = r[k];
      if (isLeft(e)) {
        left14[k] = e.left;
      } else {
        right14[k] = e.right;
      }
    }
  }
  return separated(left14, right14);
};
var URI27 = "ReadonlyRecord";
function getShow11(O) {
  if ("compare" in O) {
    return function(S) {
      return {
        show: function(r) {
          var elements = collect3(O)(function(k, a) {
            return "".concat(JSON.stringify(k), ": ").concat(S.show(a));
          })(r).join(", ");
          return elements === "" ? "{}" : "{ ".concat(elements, " }");
        }
      };
    };
  }
  return getShow11(Ord4)(O);
}
function getEq11(E) {
  var isSubrecordE = isSubrecord(E);
  return fromEquals(function(x, y) {
    return isSubrecordE(x)(y) && isSubrecordE(y)(x);
  });
}
function getMonoid15(S) {
  return {
    concat: function(first3, second2) {
      if (isEmpty6(first3)) {
        return second2;
      }
      if (isEmpty6(second2)) {
        return first3;
      }
      var r = Object.assign({}, first3);
      for (var k in second2) {
        if (has.call(second2, k)) {
          r[k] = has.call(first3, k) ? S.concat(first3[k], second2[k]) : second2[k];
        }
      }
      return r;
    },
    empty: empty8
  };
}
var Functor23 = {
  URI: URI27,
  map: _map23
};
var flap24 = flap(Functor23);
var FunctorWithIndex5 = {
  URI: URI27,
  map: _map23,
  mapWithIndex: _mapWithIndex7
};
var getFoldable3 = function(O) {
  return {
    URI: URI27,
    reduce: _reduce8(O),
    foldMap: _foldMap8(O),
    reduceRight: _reduceRight8(O)
  };
};
var getFoldableWithIndex3 = function(O) {
  return {
    URI: URI27,
    reduce: _reduce8(O),
    foldMap: _foldMap8(O),
    reduceRight: _reduceRight8(O),
    reduceWithIndex: _reduceWithIndex5(O),
    foldMapWithIndex: _foldMapWithIndex5(O),
    reduceRightWithIndex: _reduceRightWithIndex5(O)
  };
};
var Compactable7 = {
  URI: URI27,
  compact: compact8,
  separate: separate8
};
var Filterable7 = {
  URI: URI27,
  map: _map23,
  compact: compact8,
  separate: separate8,
  filter: _filter7,
  filterMap: _filterMap7,
  partition: _partition7,
  partitionMap: _partitionMap7
};
var FilterableWithIndex3 = {
  URI: URI27,
  map: _map23,
  mapWithIndex: _mapWithIndex7,
  compact: compact8,
  separate: separate8,
  filter: _filter7,
  filterMap: _filterMap7,
  partition: _partition7,
  partitionMap: _partitionMap7,
  filterMapWithIndex: _filterMapWithIndex5,
  filterWithIndex: _filterWithIndex5,
  partitionMapWithIndex: _partitionMapWithIndex5,
  partitionWithIndex: _partitionWithIndex5
};
var getTraversable2 = function(O) {
  return {
    URI: URI27,
    map: _map23,
    reduce: _reduce8(O),
    foldMap: _foldMap8(O),
    reduceRight: _reduceRight8(O),
    traverse: _traverse8(O),
    sequence: _sequence(O)
  };
};
var getTraversableWithIndex3 = function(O) {
  return {
    URI: URI27,
    map: _map23,
    mapWithIndex: _mapWithIndex7,
    reduce: _reduce8(O),
    foldMap: _foldMap8(O),
    reduceRight: _reduceRight8(O),
    reduceWithIndex: _reduceWithIndex5(O),
    foldMapWithIndex: _foldMapWithIndex5(O),
    reduceRightWithIndex: _reduceRightWithIndex5(O),
    traverse: _traverse8(O),
    sequence: _sequence(O),
    traverseWithIndex: _traverseWithIndex5(O)
  };
};
var getWitherable4 = function(O) {
  var T = getTraversable2(O);
  return {
    URI: URI27,
    map: _map23,
    reduce: _reduce8(O),
    foldMap: _foldMap8(O),
    reduceRight: _reduceRight8(O),
    traverse: T.traverse,
    sequence: T.sequence,
    compact: compact8,
    separate: separate8,
    filter: _filter7,
    filterMap: _filterMap7,
    partition: _partition7,
    partitionMap: _partitionMap7,
    wither: witherDefault(T, Compactable7),
    wilt: wiltDefault(T, Compactable7)
  };
};
var getUnionSemigroup7 = function(S) {
  var unionS = union7(S);
  return {
    concat: function(first3, second2) {
      return unionS(second2)(first3);
    }
  };
};
var getUnionMonoid5 = function(S) {
  return {
    concat: getUnionSemigroup7(S).concat,
    empty: empty8
  };
};
var getIntersectionSemigroup5 = function(S) {
  var intersectionS = intersection5(S);
  return {
    concat: function(first3, second2) {
      return intersectionS(second2)(first3);
    }
  };
};
var getDifferenceMagma5 = function() {
  return {
    concat: function(first3, second2) {
      return difference5(second2)(first3);
    }
  };
};
var Foldable8 = {
  URI: URI27,
  reduce: _reduce8(Ord4),
  foldMap: _foldMap8(Ord4),
  reduceRight: _reduceRight8(Ord4)
};
var FoldableWithIndex5 = {
  URI: URI27,
  reduce: _reduce8(Ord4),
  foldMap: _foldMap8(Ord4),
  reduceRight: _reduceRight8(Ord4),
  reduceWithIndex: _reduceWithIndex5(Ord4),
  foldMapWithIndex: _foldMapWithIndex5(Ord4),
  reduceRightWithIndex: _reduceRightWithIndex5(Ord4)
};
var Traversable8 = {
  URI: URI27,
  map: _map23,
  reduce: _reduce8(Ord4),
  foldMap: _foldMap8(Ord4),
  reduceRight: _reduceRight8(Ord4),
  traverse: _traverse8(Ord4),
  sequence: sequence8
};
var TraversableWithIndex5 = {
  URI: URI27,
  map: _map23,
  mapWithIndex: _mapWithIndex7,
  reduce: _reduce8(Ord4),
  foldMap: _foldMap8(Ord4),
  reduceRight: _reduceRight8(Ord4),
  reduceWithIndex: _reduceWithIndex5(Ord4),
  foldMapWithIndex: _foldMapWithIndex5(Ord4),
  reduceRightWithIndex: _reduceRightWithIndex5(Ord4),
  traverse: _traverse8(Ord4),
  sequence: sequence8,
  traverseWithIndex: _traverseWithIndex5(Ord4)
};
var _wither4 = witherDefault(Traversable8, Compactable7);
var _wilt4 = wiltDefault(Traversable8, Compactable7);
var Witherable4 = {
  URI: URI27,
  map: _map23,
  reduce: _reduce8(Ord4),
  foldMap: _foldMap8(Ord4),
  reduceRight: _reduceRight8(Ord4),
  traverse: _traverse8(Ord4),
  sequence: sequence8,
  compact: compact8,
  separate: separate8,
  filter: _filter7,
  filterMap: _filterMap7,
  partition: _partition7,
  partitionMap: _partitionMap7,
  wither: _wither4,
  wilt: _wilt4
};
var insertAt7 = upsertAt3;
function hasOwnProperty(k, r) {
  return has.call(r === void 0 ? this : r, k);
}
var readonlyRecord = {
  URI: URI27,
  map: _map23,
  reduce: _reduce8(Ord4),
  foldMap: _foldMap8(Ord4),
  reduceRight: _reduceRight8(Ord4),
  traverse: _traverse8(Ord4),
  sequence: sequence8,
  compact: compact8,
  separate: separate8,
  filter: _filter7,
  filterMap: _filterMap7,
  partition: _partition7,
  partitionMap: _partitionMap7,
  mapWithIndex: _mapWithIndex7,
  reduceWithIndex: _reduceWithIndex5(Ord4),
  foldMapWithIndex: _foldMapWithIndex5(Ord4),
  reduceRightWithIndex: _reduceRightWithIndex5(Ord4),
  filterMapWithIndex: _filterMapWithIndex5,
  filterWithIndex: _filterWithIndex5,
  partitionMapWithIndex: _partitionMapWithIndex5,
  partitionWithIndex: _partitionWithIndex5,
  traverseWithIndex: _traverseWithIndex5(Ord4),
  wither: _wither4,
  wilt: _wilt4
};

// node_modules/fp-ts/es6/ReadonlySet.js
var ReadonlySet_exports = {};
__export(ReadonlySet_exports, {
  URI: () => URI28,
  chain: () => chain23,
  compact: () => compact9,
  difference: () => difference6,
  elem: () => elem8,
  empty: () => empty9,
  every: () => every4,
  filter: () => filter12,
  filterMap: () => filterMap10,
  foldMap: () => foldMap13,
  fromArray: () => fromArray4,
  fromReadonlyArray: () => fromReadonlyArray2,
  fromSet: () => fromSet,
  getDifferenceMagma: () => getDifferenceMagma6,
  getEq: () => getEq12,
  getIntersectionSemigroup: () => getIntersectionSemigroup6,
  getShow: () => getShow12,
  getUnionMonoid: () => getUnionMonoid6,
  getUnionSemigroup: () => getUnionSemigroup8,
  insert: () => insert,
  intersection: () => intersection6,
  isEmpty: () => isEmpty7,
  isSubset: () => isSubset,
  map: () => map29,
  partition: () => partition10,
  partitionMap: () => partitionMap10,
  reduce: () => reduce13,
  reduceRight: () => reduceRight13,
  remove: () => remove,
  separate: () => separate9,
  singleton: () => singleton5,
  size: () => size7,
  some: () => some8,
  toReadonlyArray: () => toReadonlyArray4,
  toSet: () => toSet,
  toggle: () => toggle,
  union: () => union8
});
var fromSet = function(s) {
  return new Set(s);
};
var singleton5 = function(a) {
  return /* @__PURE__ */ new Set([a]);
};
var fromReadonlyArray2 = function(E) {
  return function(as15) {
    var len = as15.length;
    var out = /* @__PURE__ */ new Set();
    var has4 = elem8(E);
    for (var i = 0; i < len; i++) {
      var a = as15[i];
      if (!has4(a, out)) {
        out.add(a);
      }
    }
    return out;
  };
};
function toSet(s) {
  return new Set(s);
}
function map29(E) {
  var elemE = elem8(E);
  return function(f) {
    return function(set) {
      var r = /* @__PURE__ */ new Set();
      set.forEach(function(e) {
        var v = f(e);
        if (!elemE(v, r)) {
          r.add(v);
        }
      });
      return r;
    };
  };
}
function chain23(E) {
  var elemE = elem8(E);
  return function(f) {
    return function(set) {
      var r = /* @__PURE__ */ new Set();
      set.forEach(function(e) {
        f(e).forEach(function(e2) {
          if (!elemE(e2, r)) {
            r.add(e2);
          }
        });
      });
      return r;
    };
  };
}
function filter12(predicate) {
  return function(set) {
    var values3 = set.values();
    var e;
    var r = /* @__PURE__ */ new Set();
    while (!(e = values3.next()).done) {
      var a = e.value;
      if (predicate(a)) {
        r.add(a);
      }
    }
    return r;
  };
}
function partition10(predicate) {
  return function(set) {
    var values3 = set.values();
    var e;
    var right14 = /* @__PURE__ */ new Set();
    var left14 = /* @__PURE__ */ new Set();
    while (!(e = values3.next()).done) {
      var a = e.value;
      if (predicate(a)) {
        right14.add(a);
      } else {
        left14.add(a);
      }
    }
    return separated(left14, right14);
  };
}
function union8(E) {
  var elemE = elem8(E);
  return function(me, that) {
    if (that === void 0) {
      var unionE_1 = union8(E);
      return function(that2) {
        return unionE_1(me, that2);
      };
    }
    if (isEmpty7(me)) {
      return that;
    }
    if (isEmpty7(that)) {
      return me;
    }
    var r = new Set(me);
    that.forEach(function(e) {
      if (!elemE(e, r)) {
        r.add(e);
      }
    });
    return r;
  };
}
function intersection6(E) {
  var elemE = elem8(E);
  return function(me, that) {
    if (that === void 0) {
      var intersectionE_1 = intersection6(E);
      return function(that2) {
        return intersectionE_1(that2, me);
      };
    }
    if (isEmpty7(me) || isEmpty7(that)) {
      return empty9;
    }
    var r = /* @__PURE__ */ new Set();
    me.forEach(function(e) {
      if (elemE(e, that)) {
        r.add(e);
      }
    });
    return r;
  };
}
function partitionMap10(EB, EC) {
  return function(f) {
    return function(set) {
      var values3 = set.values();
      var e;
      var left14 = /* @__PURE__ */ new Set();
      var right14 = /* @__PURE__ */ new Set();
      var hasB = elem8(EB);
      var hasC = elem8(EC);
      while (!(e = values3.next()).done) {
        var v = f(e.value);
        switch (v._tag) {
          case "Left":
            if (!hasB(v.left, left14)) {
              left14.add(v.left);
            }
            break;
          case "Right":
            if (!hasC(v.right, right14)) {
              right14.add(v.right);
            }
            break;
        }
      }
      return separated(left14, right14);
    };
  };
}
function difference6(E) {
  var elemE = elem8(E);
  return function(me, that) {
    if (that === void 0) {
      var differenceE_1 = difference6(E);
      return function(that2) {
        return differenceE_1(that2, me);
      };
    }
    return filter12(function(a) {
      return !elemE(a, that);
    })(me);
  };
}
function reduce13(O) {
  var toReadonlyArrayO = toReadonlyArray4(O);
  return function(b, f) {
    return function(fa) {
      return toReadonlyArrayO(fa).reduce(f, b);
    };
  };
}
function foldMap13(O, M) {
  var toReadonlyArrayO = toReadonlyArray4(O);
  return function(f) {
    return function(fa) {
      return toReadonlyArrayO(fa).reduce(function(b, a) {
        return M.concat(b, f(a));
      }, M.empty);
    };
  };
}
var reduceRight13 = function(O) {
  var toReadonlyArrayO = toReadonlyArray4(O);
  return function(b, f) {
    return function(fa) {
      return toReadonlyArrayO(fa).reduceRight(function(b2, a) {
        return f(a, b2);
      }, b);
    };
  };
};
function insert(E) {
  var elemE = elem8(E);
  return function(a) {
    return function(set) {
      if (!elemE(a)(set)) {
        var r = new Set(set);
        r.add(a);
        return r;
      } else {
        return set;
      }
    };
  };
}
var remove = function(E) {
  return function(a) {
    return function(set) {
      return filter12(function(ax) {
        return !E.equals(a, ax);
      })(set);
    };
  };
};
var toggle = function(E) {
  var elemE = elem8(E);
  var removeE = remove(E);
  var insertE = insert(E);
  return function(a) {
    return function(set) {
      return (elemE(a, set) ? removeE : insertE)(a)(set);
    };
  };
};
var compact9 = function(E) {
  return filterMap10(E)(identity);
};
function separate9(EE, EA) {
  return function(fa) {
    var elemEE = elem8(EE);
    var elemEA = elem8(EA);
    var left14 = /* @__PURE__ */ new Set();
    var right14 = /* @__PURE__ */ new Set();
    fa.forEach(function(e) {
      switch (e._tag) {
        case "Left":
          if (!elemEE(e.left, left14)) {
            left14.add(e.left);
          }
          break;
        case "Right":
          if (!elemEA(e.right, right14)) {
            right14.add(e.right);
          }
          break;
      }
    });
    return separated(left14, right14);
  };
}
function filterMap10(E) {
  var elemE = elem8(E);
  return function(f) {
    return function(fa) {
      var r = /* @__PURE__ */ new Set();
      fa.forEach(function(a) {
        var ob = f(a);
        if (ob._tag === "Some" && !elemE(ob.value, r)) {
          r.add(ob.value);
        }
      });
      return r;
    };
  };
}
var empty9 = /* @__PURE__ */ new Set();
var isEmpty7 = function(set) {
  return set.size === 0;
};
var size7 = function(set) {
  return set.size;
};
var some8 = function(predicate) {
  return function(set) {
    var values3 = set.values();
    var e;
    var found = false;
    while (!found && !(e = values3.next()).done) {
      found = predicate(e.value);
    }
    return found;
  };
};
function every4(predicate) {
  return not2(some8(not2(predicate)));
}
function isSubset(E) {
  var elemE = elem8(E);
  return function(me, that) {
    if (that === void 0) {
      var isSubsetE_1 = isSubset(E);
      return function(that2) {
        return isSubsetE_1(that2, me);
      };
    }
    return every4(function(a) {
      return elemE(a, that);
    })(me);
  };
}
function elem8(E) {
  return function(a, set) {
    if (set === void 0) {
      var elemE_1 = elem8(E);
      return function(set2) {
        return elemE_1(a, set2);
      };
    }
    var values3 = set.values();
    var e;
    var found = false;
    while (!found && !(e = values3.next()).done) {
      found = E.equals(a, e.value);
    }
    return found;
  };
}
var toReadonlyArray4 = function(O) {
  return function(set) {
    var out = [];
    set.forEach(function(e) {
      return out.push(e);
    });
    return out.sort(O.compare);
  };
};
var URI28 = "ReadonlySet";
function getShow12(S) {
  return {
    show: function(s) {
      var entries = [];
      s.forEach(function(a) {
        entries.push(S.show(a));
      });
      return "new Set([".concat(entries.sort().join(", "), "])");
    }
  };
}
function getEq12(E) {
  var subsetE = isSubset(E);
  return fromEquals(function(x, y) {
    return subsetE(x, y) && subsetE(y, x);
  });
}
var getUnionSemigroup8 = function(E) {
  return {
    concat: union8(E)
  };
};
var getUnionMonoid6 = function(E) {
  return {
    concat: getUnionSemigroup8(E).concat,
    empty: empty9
  };
};
var getIntersectionSemigroup6 = function(E) {
  return {
    concat: intersection6(E)
  };
};
var getDifferenceMagma6 = function(E) {
  return {
    concat: difference6(E)
  };
};
var fromArray4 = fromReadonlyArray2;

// node_modules/fp-ts/es6/ReadonlyTuple.js
var ReadonlyTuple_exports = {};
__export(ReadonlyTuple_exports, {
  Bifunctor: () => Bifunctor8,
  Comonad: () => Comonad4,
  Foldable: () => Foldable9,
  Functor: () => Functor24,
  Semigroupoid: () => Semigroupoid,
  Traversable: () => Traversable9,
  URI: () => URI29,
  bimap: () => bimap10,
  compose: () => compose3,
  duplicate: () => duplicate8,
  extend: () => extend9,
  extract: () => extract4,
  flap: () => flap25,
  foldMap: () => foldMap14,
  fst: () => fst,
  getApplicative: () => getApplicative2,
  getApply: () => getApply2,
  getChain: () => getChain,
  getChainRec: () => getChainRec,
  getMonad: () => getMonad,
  map: () => map30,
  mapFst: () => mapFst,
  mapLeft: () => mapLeft10,
  mapSnd: () => mapSnd,
  readonlyTuple: () => readonlyTuple,
  reduce: () => reduce14,
  reduceRight: () => reduceRight14,
  sequence: () => sequence9,
  snd: () => snd,
  swap: () => swap7,
  traverse: () => traverse9
});
function fst(ea) {
  return ea[0];
}
function snd(ea) {
  return ea[1];
}
var swap7 = function(ea) {
  return [snd(ea), fst(ea)];
};
function getApply2(S) {
  return {
    URI: URI29,
    _E: void 0,
    map: _map24,
    ap: function(fab, fa) {
      return [fst(fab)(fst(fa)), S.concat(snd(fab), snd(fa))];
    }
  };
}
var of20 = function(M) {
  return function(a) {
    return [a, M.empty];
  };
};
function getApplicative2(M) {
  var A = getApply2(M);
  return {
    URI: URI29,
    _E: void 0,
    map: _map24,
    ap: A.ap,
    of: of20(M)
  };
}
function getChain(S) {
  var A = getApply2(S);
  return {
    URI: URI29,
    _E: void 0,
    map: _map24,
    ap: A.ap,
    chain: function(ma, f) {
      var _a = f(fst(ma)), b = _a[0], s = _a[1];
      return [b, S.concat(snd(ma), s)];
    }
  };
}
function getMonad(M) {
  var C = getChain(M);
  return {
    URI: URI29,
    _E: void 0,
    map: _map24,
    ap: C.ap,
    chain: C.chain,
    of: of20(M)
  };
}
function getChainRec(M) {
  var chainRec = function(a, f) {
    var result = f(a);
    var acc = M.empty;
    var s = fst(result);
    while (s._tag === "Left") {
      acc = M.concat(acc, snd(result));
      result = f(s.left);
      s = fst(result);
    }
    return [s.right, M.concat(acc, snd(result))];
  };
  var C = getChain(M);
  return {
    URI: URI29,
    _E: void 0,
    map: _map24,
    ap: C.ap,
    chain: C.chain,
    chainRec
  };
}
var _compose2 = function(bc, ab) {
  return pipe(bc, compose3(ab));
};
var _map24 = function(fa, f) {
  return pipe(fa, mapFst(f));
};
var _bimap4 = function(fa, f, g) {
  return pipe(fa, bimap10(f, g));
};
var _mapLeft4 = function(fa, f) {
  return pipe(fa, mapSnd(f));
};
var _extend8 = function(wa, f) {
  return pipe(wa, extend9(f));
};
var _reduce9 = function(fa, b, f) {
  return pipe(fa, reduce14(b, f));
};
var _foldMap9 = function(M) {
  var foldMapM = foldMap14(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight9 = function(fa, b, f) {
  return pipe(fa, reduceRight14(b, f));
};
var _traverse9 = function(F) {
  var traverseF = traverse9(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var bimap10 = function(f, g) {
  return function(fa) {
    return [g(fst(fa)), f(snd(fa))];
  };
};
var mapFst = function(f) {
  return function(fa) {
    return [f(fst(fa)), snd(fa)];
  };
};
var mapSnd = function(f) {
  return function(fa) {
    return [fst(fa), f(snd(fa))];
  };
};
var compose3 = function(ab) {
  return function(bc) {
    return [fst(bc), snd(ab)];
  };
};
var extend9 = function(f) {
  return function(wa) {
    return [f(wa), snd(wa)];
  };
};
var extract4 = fst;
var duplicate8 = extend9(identity);
var reduce14 = function(b, f) {
  return function(fa) {
    return f(b, fst(fa));
  };
};
var foldMap14 = function() {
  return function(f) {
    return function(fa) {
      return f(fst(fa));
    };
  };
};
var reduceRight14 = function(b, f) {
  return function(fa) {
    return f(fst(fa), b);
  };
};
var traverse9 = function(F) {
  return function(f) {
    return function(ta) {
      return F.map(f(fst(ta)), function(b) {
        return [b, snd(ta)];
      });
    };
  };
};
var sequence9 = function(F) {
  return function(fas) {
    return F.map(fst(fas), function(a) {
      return [a, snd(fas)];
    });
  };
};
var URI29 = "ReadonlyTuple";
var Functor24 = {
  URI: URI29,
  map: _map24
};
var flap25 = flap(Functor24);
var map30 = mapFst;
var mapLeft10 = mapSnd;
var Bifunctor8 = {
  URI: URI29,
  bimap: _bimap4,
  mapLeft: _mapLeft4
};
var Semigroupoid = {
  URI: URI29,
  compose: _compose2
};
var Comonad4 = {
  URI: URI29,
  map: _map24,
  extend: _extend8,
  extract: extract4
};
var Foldable9 = {
  URI: URI29,
  reduce: _reduce9,
  foldMap: _foldMap9,
  reduceRight: _reduceRight9
};
var Traversable9 = {
  URI: URI29,
  map: _map24,
  reduce: _reduce9,
  foldMap: _foldMap9,
  reduceRight: _reduceRight9,
  traverse: _traverse9,
  sequence: sequence9
};
var readonlyTuple = {
  URI: URI29,
  compose: _compose2,
  map: _map24,
  bimap: _bimap4,
  mapLeft: _mapLeft4,
  extract: extract4,
  extend: _extend8,
  reduce: _reduce9,
  foldMap: _foldMap9,
  reduceRight: _reduceRight9,
  traverse: _traverse9,
  sequence: sequence9
};

// node_modules/fp-ts/es6/Record.js
var Record_exports = {};
__export(Record_exports, {
  Compactable: () => Compactable8,
  Filterable: () => Filterable8,
  FilterableWithIndex: () => FilterableWithIndex4,
  Foldable: () => Foldable10,
  FoldableWithIndex: () => FoldableWithIndex6,
  Functor: () => Functor25,
  FunctorWithIndex: () => FunctorWithIndex6,
  Traversable: () => Traversable10,
  TraversableWithIndex: () => TraversableWithIndex6,
  URI: () => URI30,
  Witherable: () => Witherable5,
  collect: () => collect4,
  compact: () => compact10,
  deleteAt: () => deleteAt6,
  difference: () => difference7,
  elem: () => elem9,
  empty: () => empty10,
  every: () => every5,
  filter: () => filter13,
  filterMap: () => filterMap11,
  filterMapWithIndex: () => filterMapWithIndex7,
  filterWithIndex: () => filterWithIndex9,
  flap: () => flap26,
  foldMap: () => foldMap15,
  foldMapWithIndex: () => foldMapWithIndex10,
  fromEntries: () => fromEntries2,
  fromFoldable: () => fromFoldable4,
  fromFoldableMap: () => fromFoldableMap2,
  getDifferenceMagma: () => getDifferenceMagma7,
  getEq: () => getEq13,
  getFoldable: () => getFoldable4,
  getFoldableWithIndex: () => getFoldableWithIndex4,
  getIntersectionSemigroup: () => getIntersectionSemigroup7,
  getMonoid: () => getMonoid16,
  getShow: () => getShow13,
  getTraversable: () => getTraversable3,
  getTraversableWithIndex: () => getTraversableWithIndex4,
  getUnionMonoid: () => getUnionMonoid7,
  getUnionSemigroup: () => getUnionSemigroup9,
  getWitherable: () => getWitherable5,
  has: () => has3,
  hasOwnProperty: () => hasOwnProperty2,
  insertAt: () => insertAt8,
  intersection: () => intersection7,
  isEmpty: () => isEmpty8,
  isSubrecord: () => isSubrecord2,
  keys: () => keys4,
  lookup: () => lookup6,
  map: () => map31,
  mapWithIndex: () => mapWithIndex10,
  modifyAt: () => modifyAt8,
  partition: () => partition11,
  partitionMap: () => partitionMap11,
  partitionMapWithIndex: () => partitionMapWithIndex7,
  partitionWithIndex: () => partitionWithIndex7,
  pop: () => pop4,
  record: () => record,
  reduce: () => reduce15,
  reduceRight: () => reduceRight15,
  reduceRightWithIndex: () => reduceRightWithIndex10,
  reduceWithIndex: () => reduceWithIndex10,
  separate: () => separate10,
  sequence: () => sequence10,
  singleton: () => singleton6,
  size: () => size8,
  some: () => some9,
  toArray: () => toArray4,
  toEntries: () => toEntries2,
  toUnfoldable: () => toUnfoldable4,
  traverse: () => traverse10,
  traverseWithIndex: () => traverseWithIndex6,
  union: () => union9,
  updateAt: () => updateAt8,
  upsertAt: () => upsertAt4,
  wilt: () => wilt5,
  wither: () => wither5
});
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var size8 = size6;
var isEmpty8 = isEmpty6;
var keys_2 = function(O) {
  return function(r) {
    return Object.keys(r).sort(O.compare);
  };
};
var keys4 = keys_2(Ord4);
function collect4(O) {
  if (typeof O === "function") {
    return collect4(Ord4)(O);
  }
  var keysO = keys_2(O);
  return function(f) {
    return function(r) {
      var out = [];
      for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {
        var key = _a[_i];
        out.push(f(key, r[key]));
      }
      return out;
    };
  };
}
var toArray4 = collect4(Ord4)(function(k, a) {
  return [
    k,
    a
  ];
});
function toUnfoldable4(U) {
  return function(r) {
    var sas = toArray4(r);
    var len = sas.length;
    return U.unfold(0, function(b) {
      return b < len ? some([sas[b], b + 1]) : none;
    });
  };
}
var upsertAt4 = upsertAt3;
var has3 = has2;
function deleteAt6(k) {
  return function(r) {
    if (!has.call(r, k)) {
      return r;
    }
    var out = Object.assign({}, r);
    delete out[k];
    return out;
  };
}
var updateAt8 = function(k, a) {
  return modifyAt8(k, function() {
    return a;
  });
};
var modifyAt8 = function(k, f) {
  return function(r) {
    if (!has3(k, r)) {
      return none;
    }
    var out = Object.assign({}, r);
    out[k] = f(r[k]);
    return some(out);
  };
};
function pop4(k) {
  var deleteAtk = deleteAt6(k);
  return function(r) {
    var oa = lookup6(k, r);
    return isNone(oa) ? none : some([oa.value, deleteAtk(r)]);
  };
}
var isSubrecord2 = isSubrecord;
var lookup6 = lookup5;
var mapWithIndex10 = mapWithIndex9;
var map31 = map28;
function reduceWithIndex10() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduceWithIndex9(args[0]) : reduceWithIndex9(Ord4).apply(void 0, args);
}
function foldMapWithIndex10(O) {
  return "compare" in O ? foldMapWithIndex9(O) : foldMapWithIndex9(Ord4)(O);
}
function reduceRightWithIndex10() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduceRightWithIndex9(args[0]) : reduceRightWithIndex9(Ord4).apply(void 0, args);
}
var singleton6 = singleton4;
function traverseWithIndex6(F) {
  return traverseWithIndex5(F);
}
function traverse10(F) {
  return traverse8(F);
}
function sequence10(F) {
  return sequence8(F);
}
var wither5 = function(F) {
  var traverseF = traverse10(F);
  return function(f) {
    return function(fa) {
      return F.map(pipe(fa, traverseF(f)), compact10);
    };
  };
};
var wilt5 = function(F) {
  var traverseF = traverse10(F);
  return function(f) {
    return function(fa) {
      return F.map(pipe(fa, traverseF(f)), separate10);
    };
  };
};
var partitionMapWithIndex7 = partitionMapWithIndex6;
function partitionWithIndex7(predicateWithIndex) {
  return partitionWithIndex6(predicateWithIndex);
}
var filterMapWithIndex7 = filterMapWithIndex6;
function filterWithIndex9(predicateWithIndex) {
  return filterWithIndex8(predicateWithIndex);
}
function fromFoldable4(M, F) {
  return fromFoldable3(M, F);
}
var toEntries2 = toArray4;
var fromEntries2 = function(fa) {
  return fromFoldable4(last(), Foldable4)(fa);
};
function fromFoldableMap2(M, F) {
  return fromFoldableMap(M, F);
}
var every5 = every3;
var some9 = some7;
var elem9 = elem7;
var union9 = function(M) {
  var unionM = union7(M);
  return function(second2) {
    return function(first3) {
      if (isEmpty8(first3)) {
        return __assign2({}, second2);
      }
      if (isEmpty8(second2)) {
        return __assign2({}, first3);
      }
      return unionM(second2)(first3);
    };
  };
};
var intersection7 = function(M) {
  return function(second2) {
    return function(first3) {
      if (isEmpty8(first3) || isEmpty8(second2)) {
        return {};
      }
      return intersection5(M)(second2)(first3);
    };
  };
};
var difference7 = function(second2) {
  return function(first3) {
    if (isEmpty8(first3)) {
      return __assign2({}, second2);
    }
    if (isEmpty8(second2)) {
      return __assign2({}, first3);
    }
    return difference5(second2)(first3);
  };
};
var _map25 = _map23;
var _mapWithIndex8 = _mapWithIndex7;
var _reduce10 = _reduce8;
var _foldMap10 = _foldMap8;
var _reduceRight10 = _reduceRight8;
var _filter8 = _filter7;
var _filterMap8 = _filterMap7;
var _partition8 = _partition7;
var _partitionMap8 = _partitionMap7;
var _reduceWithIndex6 = _reduceWithIndex5;
var _foldMapWithIndex6 = _foldMapWithIndex5;
var _reduceRightWithIndex6 = _reduceRightWithIndex5;
var _partitionMapWithIndex6 = _partitionMapWithIndex5;
var _partitionWithIndex6 = _partitionWithIndex5;
var _filterMapWithIndex6 = _filterMapWithIndex5;
var _filterWithIndex6 = _filterWithIndex5;
var _traverse10 = _traverse8;
var _sequence2 = _sequence;
var _traverseWithIndex6 = function(O) {
  return function(F) {
    var keysO = keys_2(O);
    return function(ta, f) {
      var ks = keysO(ta);
      if (ks.length === 0) {
        return F.of({});
      }
      var fr = F.of({});
      var _loop_1 = function(key2) {
        fr = F.ap(F.map(fr, function(r) {
          return function(b) {
            r[key2] = b;
            return r;
          };
        }), f(key2, ta[key2]));
      };
      for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
        var key = ks_1[_i];
        _loop_1(key);
      }
      return fr;
    };
  };
};
var filter13 = filter11;
var filterMap11 = filterMap9;
var partition11 = partition9;
var partitionMap11 = partitionMap9;
function reduce15() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduce12(args[0]) : reduce12(Ord4).apply(void 0, args);
}
function foldMap15(O) {
  return "compare" in O ? foldMap12(O) : foldMap12(Ord4)(O);
}
function reduceRight15() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduceRight12(args[0]) : reduceRight12(Ord4).apply(void 0, args);
}
var compact10 = compact8;
var separate10 = separate8;
var URI30 = "Record";
function getShow13(O) {
  return "compare" in O ? getShow11(O) : getShow11(Ord4)(O);
}
var getEq13 = getEq11;
var getMonoid16 = getMonoid15;
var Functor25 = {
  URI: URI30,
  map: _map25
};
var flap26 = flap(Functor25);
var FunctorWithIndex6 = {
  URI: URI30,
  map: _map25,
  mapWithIndex: _mapWithIndex8
};
var getFoldable4 = function(O) {
  return {
    URI: URI30,
    reduce: _reduce10(O),
    foldMap: _foldMap10(O),
    reduceRight: _reduceRight10(O)
  };
};
var getFoldableWithIndex4 = function(O) {
  return {
    URI: URI30,
    reduce: _reduce10(O),
    foldMap: _foldMap10(O),
    reduceRight: _reduceRight10(O),
    reduceWithIndex: _reduceWithIndex6(O),
    foldMapWithIndex: _foldMapWithIndex6(O),
    reduceRightWithIndex: _reduceRightWithIndex6(O)
  };
};
var Compactable8 = {
  URI: URI30,
  compact: compact10,
  separate: separate10
};
var Filterable8 = {
  URI: URI30,
  map: _map25,
  compact: compact10,
  separate: separate10,
  filter: _filter8,
  filterMap: _filterMap8,
  partition: _partition8,
  partitionMap: _partitionMap8
};
var FilterableWithIndex4 = {
  URI: URI30,
  map: _map25,
  mapWithIndex: _mapWithIndex8,
  compact: compact10,
  separate: separate10,
  filter: _filter8,
  filterMap: _filterMap8,
  partition: _partition8,
  partitionMap: _partitionMap8,
  filterMapWithIndex: _filterMapWithIndex6,
  filterWithIndex: _filterWithIndex6,
  partitionMapWithIndex: _partitionMapWithIndex6,
  partitionWithIndex: _partitionWithIndex6
};
var getTraversable3 = function(O) {
  return {
    URI: URI30,
    map: _map25,
    reduce: _reduce10(O),
    foldMap: _foldMap10(O),
    reduceRight: _reduceRight10(O),
    traverse: _traverse10(O),
    sequence: _sequence2(O)
  };
};
var getTraversableWithIndex4 = function(O) {
  return {
    URI: URI30,
    map: _map25,
    mapWithIndex: _mapWithIndex8,
    reduce: _reduce10(O),
    foldMap: _foldMap10(O),
    reduceRight: _reduceRight10(O),
    reduceWithIndex: _reduceWithIndex6(O),
    foldMapWithIndex: _foldMapWithIndex6(O),
    reduceRightWithIndex: _reduceRightWithIndex6(O),
    traverse: _traverse10(O),
    sequence: _sequence2(O),
    traverseWithIndex: _traverseWithIndex6(O)
  };
};
var getWitherable5 = function(O) {
  var T = getTraversable3(O);
  return {
    URI: URI30,
    map: _map25,
    reduce: _reduce10(O),
    foldMap: _foldMap10(O),
    reduceRight: _reduceRight10(O),
    traverse: T.traverse,
    sequence: T.sequence,
    compact: compact10,
    separate: separate10,
    filter: _filter8,
    filterMap: _filterMap8,
    partition: _partition8,
    partitionMap: _partitionMap8,
    wither: witherDefault(T, Compactable8),
    wilt: wiltDefault(T, Compactable8)
  };
};
var getUnionSemigroup9 = function(S) {
  var unionS = union9(S);
  return {
    concat: function(first3, second2) {
      return unionS(second2)(first3);
    }
  };
};
var getUnionMonoid7 = function(S) {
  return {
    concat: getUnionSemigroup9(S).concat,
    empty: {}
  };
};
var getIntersectionSemigroup7 = function(S) {
  var intersectionS = intersection7(S);
  return {
    concat: function(first3, second2) {
      return intersectionS(second2)(first3);
    }
  };
};
var getDifferenceMagma7 = function() {
  return {
    concat: function(first3, second2) {
      return difference7(second2)(first3);
    }
  };
};
var Foldable10 = {
  URI: URI30,
  reduce: _reduce10(Ord4),
  foldMap: _foldMap10(Ord4),
  reduceRight: _reduceRight10(Ord4)
};
var FoldableWithIndex6 = {
  URI: URI30,
  reduce: _reduce10(Ord4),
  foldMap: _foldMap10(Ord4),
  reduceRight: _reduceRight10(Ord4),
  reduceWithIndex: _reduceWithIndex6(Ord4),
  foldMapWithIndex: _foldMapWithIndex6(Ord4),
  reduceRightWithIndex: _reduceRightWithIndex6(Ord4)
};
var Traversable10 = {
  URI: URI30,
  map: _map25,
  reduce: _reduce10(Ord4),
  foldMap: _foldMap10(Ord4),
  reduceRight: _reduceRight10(Ord4),
  traverse: _traverse10(Ord4),
  sequence: sequence10
};
var TraversableWithIndex6 = {
  URI: URI30,
  map: _map25,
  mapWithIndex: _mapWithIndex8,
  reduce: _reduce10(Ord4),
  foldMap: _foldMap10(Ord4),
  reduceRight: _reduceRight10(Ord4),
  reduceWithIndex: _reduceWithIndex6(Ord4),
  foldMapWithIndex: _foldMapWithIndex6(Ord4),
  reduceRightWithIndex: _reduceRightWithIndex6(Ord4),
  traverse: _traverse10(Ord4),
  sequence: sequence10,
  traverseWithIndex: _traverseWithIndex6(Ord4)
};
var _wither5 = witherDefault(Traversable10, Compactable8);
var _wilt5 = wiltDefault(Traversable10, Compactable8);
var Witherable5 = {
  URI: URI30,
  map: _map25,
  reduce: _reduce10(Ord4),
  foldMap: _foldMap10(Ord4),
  reduceRight: _reduceRight10(Ord4),
  traverse: _traverse10(Ord4),
  sequence: sequence10,
  compact: compact10,
  separate: separate10,
  filter: _filter8,
  filterMap: _filterMap8,
  partition: _partition8,
  partitionMap: _partitionMap8,
  wither: _wither5,
  wilt: _wilt5
};
var empty10 = {};
var insertAt8 = upsertAt4;
var hasOwnProperty2 = hasOwnProperty;
var record = {
  URI: URI30,
  map: _map25,
  reduce: _reduce10(Ord4),
  foldMap: _foldMap10(Ord4),
  reduceRight: _reduceRight10(Ord4),
  traverse: _traverse10(Ord4),
  sequence: sequence10,
  compact: compact10,
  separate: separate10,
  filter: _filter8,
  filterMap: _filterMap8,
  partition: _partition8,
  partitionMap: _partitionMap8,
  mapWithIndex: _mapWithIndex8,
  reduceWithIndex: _reduceWithIndex6(Ord4),
  foldMapWithIndex: _foldMapWithIndex6(Ord4),
  reduceRightWithIndex: _reduceRightWithIndex6(Ord4),
  filterMapWithIndex: _filterMapWithIndex6,
  filterWithIndex: _filterWithIndex6,
  partitionMapWithIndex: _partitionMapWithIndex6,
  partitionWithIndex: _partitionWithIndex6,
  traverseWithIndex: _traverseWithIndex6(Ord4),
  wither: _wither5,
  wilt: _wilt5
};

// node_modules/fp-ts/es6/Refinement.js
var Refinement_exports = {};
__export(Refinement_exports, {
  and: () => and2,
  compose: () => compose4,
  fromEitherK: () => fromEitherK10,
  fromOptionK: () => fromOptionK11,
  id: () => id2,
  not: () => not3,
  or: () => or2,
  zero: () => zero6
});
var fromOptionK11 = function(getOption) {
  return function(a) {
    return isSome(getOption(a));
  };
};
var fromEitherK10 = function(getEither) {
  return function(a) {
    return isRight(getEither(a));
  };
};
var id2 = function() {
  return function(_) {
    return true;
  };
};
var not3 = function(refinement) {
  return function(a) {
    return !refinement(a);
  };
};
var or2 = function(second2) {
  return function(first3) {
    return function(a) {
      return first3(a) || second2(a);
    };
  };
};
var and2 = function(second2) {
  return function(first3) {
    return function(a) {
      return first3(a) && second2(a);
    };
  };
};
var zero6 = function() {
  return function(_) {
    return false;
  };
};
var compose4 = function(bc) {
  return function(ab) {
    return function(i) {
      return ab(i) && bc(i);
    };
  };
};

// node_modules/fp-ts/es6/Ring.js
var Ring_exports = {};
__export(Ring_exports, {
  getFunctionRing: () => getFunctionRing,
  getTupleRing: () => getTupleRing,
  negate: () => negate,
  tuple: () => tuple6
});
var tuple6 = function() {
  var rings = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    rings[_i] = arguments[_i];
  }
  return {
    add: function(x, y) {
      return rings.map(function(R, i) {
        return R.add(x[i], y[i]);
      });
    },
    zero: rings.map(function(R) {
      return R.zero;
    }),
    mul: function(x, y) {
      return rings.map(function(R, i) {
        return R.mul(x[i], y[i]);
      });
    },
    one: rings.map(function(R) {
      return R.one;
    }),
    sub: function(x, y) {
      return rings.map(function(R, i) {
        return R.sub(x[i], y[i]);
      });
    }
  };
};
var negate = function(R) {
  return function(a) {
    return R.sub(R.zero, a);
  };
};
var getTupleRing = tuple6;
var getFunctionRing = getRing;

// node_modules/fp-ts/es6/Semigroupoid.js
var Semigroupoid_exports = {};

// node_modules/fp-ts/es6/Semiring.js
var Semiring_exports = {};
__export(Semiring_exports, {
  getFunctionSemiring: () => getFunctionSemiring
});
var getFunctionSemiring = getSemiring;

// node_modules/fp-ts/es6/Set.js
var Set_exports = {};
__export(Set_exports, {
  chain: () => chain24,
  compact: () => compact11,
  difference: () => difference8,
  elem: () => elem10,
  empty: () => empty11,
  every: () => every6,
  filter: () => filter14,
  filterMap: () => filterMap12,
  foldMap: () => foldMap16,
  fromArray: () => fromArray5,
  getDifferenceMagma: () => getDifferenceMagma8,
  getEq: () => getEq14,
  getIntersectionSemigroup: () => getIntersectionSemigroup8,
  getShow: () => getShow14,
  getUnionMonoid: () => getUnionMonoid8,
  getUnionSemigroup: () => getUnionSemigroup10,
  insert: () => insert2,
  intersection: () => intersection8,
  isEmpty: () => isEmpty9,
  isSubset: () => isSubset2,
  map: () => map32,
  partition: () => partition12,
  partitionMap: () => partitionMap12,
  reduce: () => reduce16,
  reduceRight: () => reduceRight16,
  remove: () => remove2,
  separate: () => separate11,
  singleton: () => singleton7,
  size: () => size9,
  some: () => some10,
  subset: () => subset,
  toArray: () => toArray5,
  toggle: () => toggle2,
  union: () => union10
});
var getShow14 = getShow12;
var getEq14 = getEq12;
function map32(E) {
  var elemE = elem10(E);
  return function(f) {
    return function(set) {
      var r = /* @__PURE__ */ new Set();
      set.forEach(function(e) {
        var v = f(e);
        if (!elemE(v, r)) {
          r.add(v);
        }
      });
      return r;
    };
  };
}
function chain24(E) {
  var elemE = elem10(E);
  return function(f) {
    return function(set) {
      var r = /* @__PURE__ */ new Set();
      set.forEach(function(e) {
        f(e).forEach(function(e2) {
          if (!elemE(e2, r)) {
            r.add(e2);
          }
        });
      });
      return r;
    };
  };
}
function filter14(predicate) {
  return function(set) {
    var values3 = set.values();
    var e;
    var r = /* @__PURE__ */ new Set();
    while (!(e = values3.next()).done) {
      var a = e.value;
      if (predicate(a)) {
        r.add(a);
      }
    }
    return r;
  };
}
function partition12(predicate) {
  return function(set) {
    var values3 = set.values();
    var e;
    var right14 = /* @__PURE__ */ new Set();
    var left14 = /* @__PURE__ */ new Set();
    while (!(e = values3.next()).done) {
      var a = e.value;
      if (predicate(a)) {
        right14.add(a);
      } else {
        left14.add(a);
      }
    }
    return separated(left14, right14);
  };
}
function union10(E) {
  var elemE = elem10(E);
  return function(me, that) {
    if (that === void 0) {
      var unionE_1 = union10(E);
      return function(that2) {
        return unionE_1(me, that2);
      };
    }
    if (isEmpty9(me)) {
      return that;
    }
    if (isEmpty9(that)) {
      return me;
    }
    var r = new Set(me);
    that.forEach(function(e) {
      if (!elemE(e, r)) {
        r.add(e);
      }
    });
    return r;
  };
}
function intersection8(E) {
  var elemE = elem10(E);
  return function(me, that) {
    if (that === void 0) {
      var intersectionE_1 = intersection8(E);
      return function(that2) {
        return intersectionE_1(that2, me);
      };
    }
    if (isEmpty9(me) || isEmpty9(that)) {
      return /* @__PURE__ */ new Set();
    }
    var r = /* @__PURE__ */ new Set();
    me.forEach(function(e) {
      if (elemE(e, that)) {
        r.add(e);
      }
    });
    return r;
  };
}
function partitionMap12(EB, EC) {
  return function(f) {
    return function(set) {
      var values3 = set.values();
      var e;
      var left14 = /* @__PURE__ */ new Set();
      var right14 = /* @__PURE__ */ new Set();
      var hasB = elem10(EB);
      var hasC = elem10(EC);
      while (!(e = values3.next()).done) {
        var v = f(e.value);
        switch (v._tag) {
          case "Left":
            if (!hasB(v.left, left14)) {
              left14.add(v.left);
            }
            break;
          case "Right":
            if (!hasC(v.right, right14)) {
              right14.add(v.right);
            }
            break;
        }
      }
      return separated(left14, right14);
    };
  };
}
function difference8(E) {
  var elemE = elem10(E);
  return function(me, that) {
    if (that === void 0) {
      var differenceE_1 = difference8(E);
      return function(that2) {
        return differenceE_1(that2, me);
      };
    }
    return filter14(function(a) {
      return !elemE(a, that);
    })(me);
  };
}
var getUnionSemigroup10 = function(E) {
  return {
    concat: union10(E)
  };
};
var getUnionMonoid8 = function(E) {
  return {
    concat: getUnionSemigroup10(E).concat,
    empty: /* @__PURE__ */ new Set()
  };
};
var getIntersectionSemigroup8 = function(E) {
  return {
    concat: intersection8(E)
  };
};
var getDifferenceMagma8 = function(E) {
  return {
    concat: difference8(E)
  };
};
var reduce16 = reduce13;
var foldMap16 = foldMap13;
var reduceRight16 = reduceRight13;
var singleton7 = function(a) {
  return /* @__PURE__ */ new Set([a]);
};
function insert2(E) {
  var elemE = elem10(E);
  return function(a) {
    return function(set) {
      if (!elemE(a)(set)) {
        var r = new Set(set);
        r.add(a);
        return r;
      } else {
        return set;
      }
    };
  };
}
var remove2 = function(E) {
  return function(a) {
    return function(set) {
      return filter14(function(ax) {
        return !E.equals(a, ax);
      })(set);
    };
  };
};
var toggle2 = function(E) {
  var elemE = elem10(E);
  var removeE = remove2(E);
  var insertE = insert2(E);
  return function(a) {
    return function(set) {
      return (elemE(a, set) ? removeE : insertE)(a)(set);
    };
  };
};
var fromArray5 = function(E) {
  return function(as15) {
    var len = as15.length;
    var out = /* @__PURE__ */ new Set();
    var has4 = elem10(E);
    for (var i = 0; i < len; i++) {
      var a = as15[i];
      if (!has4(a, out)) {
        out.add(a);
      }
    }
    return out;
  };
};
var compact11 = function(E) {
  return filterMap12(E)(identity);
};
function separate11(EE, EA) {
  return function(fa) {
    var elemEE = elem10(EE);
    var elemEA = elem10(EA);
    var left14 = /* @__PURE__ */ new Set();
    var right14 = /* @__PURE__ */ new Set();
    fa.forEach(function(e) {
      switch (e._tag) {
        case "Left":
          if (!elemEE(e.left, left14)) {
            left14.add(e.left);
          }
          break;
        case "Right":
          if (!elemEA(e.right, right14)) {
            right14.add(e.right);
          }
          break;
      }
    });
    return separated(left14, right14);
  };
}
function filterMap12(E) {
  var elemE = elem10(E);
  return function(f) {
    return function(fa) {
      var r = /* @__PURE__ */ new Set();
      fa.forEach(function(a) {
        var ob = f(a);
        if (ob._tag === "Some" && !elemE(ob.value, r)) {
          r.add(ob.value);
        }
      });
      return r;
    };
  };
}
var empty11 = /* @__PURE__ */ new Set();
var isEmpty9 = function(set) {
  return set.size === 0;
};
var size9 = function(set) {
  return set.size;
};
var some10 = some8;
var every6 = every4;
var isSubset2 = isSubset;
var elem10 = elem8;
var toArray5 = function(O) {
  return function(set) {
    var out = [];
    set.forEach(function(e) {
      return out.push(e);
    });
    return out.sort(O.compare);
  };
};
var subset = isSubset;

// node_modules/fp-ts/es6/Show.js
var Show_exports = {};
__export(Show_exports, {
  getStructShow: () => getStructShow,
  getTupleShow: () => getTupleShow,
  showBoolean: () => showBoolean,
  showNumber: () => showNumber,
  showString: () => showString,
  struct: () => struct4,
  tuple: () => tuple7
});
var struct4 = function(shows) {
  return {
    show: function(a) {
      var s = "{";
      for (var k in shows) {
        if (has.call(shows, k)) {
          s += " ".concat(k, ": ").concat(shows[k].show(a[k]), ",");
        }
      }
      if (s.length > 1) {
        s = s.slice(0, -1) + " ";
      }
      s += "}";
      return s;
    }
  };
};
var tuple7 = function() {
  var shows = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    shows[_i] = arguments[_i];
  }
  return {
    show: function(t) {
      return "[".concat(t.map(function(a, i) {
        return shows[i].show(a);
      }).join(", "), "]");
    }
  };
};
var getTupleShow = tuple7;
var getStructShow = struct4;
var showBoolean = {
  show: function(a) {
    return JSON.stringify(a);
  }
};
var showString = {
  show: function(a) {
    return JSON.stringify(a);
  }
};
var showNumber = {
  show: function(a) {
    return JSON.stringify(a);
  }
};

// node_modules/fp-ts/es6/StateReaderTaskEither.js
var StateReaderTaskEither_exports = {};
__export(StateReaderTaskEither_exports, {
  Alt: () => Alt13,
  Applicative: () => Applicative15,
  Apply: () => Apply14,
  Bifunctor: () => Bifunctor9,
  Chain: () => Chain19,
  FromEither: () => FromEither10,
  FromIO: () => FromIO9,
  FromReader: () => FromReader5,
  FromState: () => FromState2,
  FromTask: () => FromTask5,
  Functor: () => Functor26,
  Monad: () => Monad19,
  MonadIO: () => MonadIO9,
  MonadTask: () => MonadTask5,
  MonadThrow: () => MonadThrow7,
  Pointed: () => Pointed19,
  URI: () => URI31,
  alt: () => alt16,
  altW: () => altW13,
  ap: () => ap25,
  apFirst: () => apFirst20,
  apFirstW: () => apFirstW7,
  apS: () => apS20,
  apSW: () => apSW9,
  apSecond: () => apSecond20,
  apSecondW: () => apSecondW7,
  apW: () => apW9,
  as: () => as13,
  asUnit: () => asUnit13,
  ask: () => ask7,
  asks: () => asks7,
  asksStateReaderTaskEither: () => asksStateReaderTaskEither,
  asksStateReaderTaskEitherW: () => asksStateReaderTaskEitherW,
  bimap: () => bimap11,
  bind: () => bind20,
  bindTo: () => bindTo20,
  bindW: () => bindW9,
  chain: () => chain26,
  chainEitherK: () => chainEitherK8,
  chainEitherKW: () => chainEitherKW5,
  chainFirst: () => chainFirst20,
  chainFirstEitherK: () => chainFirstEitherK8,
  chainFirstEitherKW: () => chainFirstEitherKW5,
  chainFirstIOK: () => chainFirstIOK9,
  chainFirstReaderK: () => chainFirstReaderK6,
  chainFirstReaderKW: () => chainFirstReaderKW5,
  chainFirstTaskK: () => chainFirstTaskK5,
  chainFirstW: () => chainFirstW9,
  chainIOEitherK: () => chainIOEitherK3,
  chainIOEitherKW: () => chainIOEitherKW3,
  chainIOK: () => chainIOK9,
  chainOptionK: () => chainOptionK9,
  chainOptionKW: () => chainOptionKW6,
  chainReaderK: () => chainReaderK6,
  chainReaderKW: () => chainReaderKW5,
  chainReaderTaskEitherK: () => chainReaderTaskEitherK,
  chainReaderTaskEitherKW: () => chainReaderTaskEitherKW,
  chainStateK: () => chainStateK2,
  chainTaskEitherK: () => chainTaskEitherK2,
  chainTaskEitherKW: () => chainTaskEitherKW2,
  chainTaskK: () => chainTaskK5,
  chainW: () => chainW9,
  evalState: () => evalState2,
  evaluate: () => evaluate3,
  execState: () => execState2,
  execute: () => execute3,
  filterOrElse: () => filterOrElse7,
  filterOrElseW: () => filterOrElseW6,
  flap: () => flap27,
  flatMap: () => flatMap23,
  flatMapEither: () => flatMapEither7,
  flatMapIO: () => flatMapIO9,
  flatMapIOEither: () => flatMapIOEither3,
  flatMapOption: () => flatMapOption8,
  flatMapReader: () => flatMapReader6,
  flatMapReaderTaskEither: () => flatMapReaderTaskEither,
  flatMapState: () => flatMapState,
  flatMapTask: () => flatMapTask5,
  flatMapTaskEither: () => flatMapTaskEither2,
  flatten: () => flatten19,
  flattenW: () => flattenW9,
  fromEither: () => fromEither10,
  fromEitherK: () => fromEitherK11,
  fromIO: () => fromIO9,
  fromIOEither: () => fromIOEither4,
  fromIOEitherK: () => fromIOEitherK3,
  fromIOK: () => fromIOK9,
  fromOption: () => fromOption10,
  fromOptionK: () => fromOptionK12,
  fromPredicate: () => fromPredicate12,
  fromReader: () => fromReader6,
  fromReaderEither: () => fromReaderEither2,
  fromReaderK: () => fromReaderK6,
  fromReaderTaskEither: () => fromReaderTaskEither,
  fromReaderTaskEitherK: () => fromReaderTaskEitherK,
  fromState: () => fromState2,
  fromStateK: () => fromStateK2,
  fromTask: () => fromTask5,
  fromTaskEither: () => fromTaskEither2,
  fromTaskEitherK: () => fromTaskEitherK2,
  fromTaskK: () => fromTaskK5,
  get: () => get3,
  gets: () => gets3,
  left: () => left10,
  leftIO: () => leftIO4,
  leftReader: () => leftReader3,
  leftState: () => leftState,
  leftTask: () => leftTask3,
  let: () => let_19,
  local: () => local6,
  map: () => map34,
  mapLeft: () => mapLeft11,
  modify: () => modify3,
  of: () => of22,
  put: () => put3,
  right: () => right10,
  rightIO: () => rightIO4,
  rightReader: () => rightReader3,
  rightState: () => rightState,
  rightTask: () => rightTask3,
  run: () => run3,
  sequenceArray: () => sequenceArray13,
  stateReaderTaskEither: () => stateReaderTaskEither,
  stateReaderTaskEitherSeq: () => stateReaderTaskEitherSeq,
  tap: () => tap16,
  tapEither: () => tapEither8,
  tapIO: () => tapIO9,
  tapReader: () => tapReader6,
  tapTask: () => tapTask5,
  throwError: () => throwError7,
  traverseArray: () => traverseArray13,
  traverseArrayWithIndex: () => traverseArrayWithIndex13,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex14,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex14
});

// node_modules/fp-ts/es6/StateT.js
var StateT_exports = {};
__export(StateT_exports, {
  ap: () => ap24,
  chain: () => chain25,
  evaluate: () => evaluate2,
  execute: () => execute2,
  flatMap: () => flatMap22,
  fromF: () => fromF2,
  fromState: () => fromState,
  getStateM: () => getStateM,
  map: () => map33,
  of: () => of21
});
function of21(F) {
  return function(a) {
    return function(s) {
      return F.of([a, s]);
    };
  };
}
function map33(F) {
  return function(f) {
    return function(fa) {
      return function(s) {
        return F.map(fa(s), function(_a) {
          var a = _a[0], s1 = _a[1];
          return [f(a), s1];
        });
      };
    };
  };
}
function ap24(M) {
  return function(fa) {
    return function(fab) {
      return function(s) {
        return M.chain(fab(s), function(_a) {
          var f = _a[0], s2 = _a[1];
          return M.map(fa(s2), function(_a2) {
            var a = _a2[0], s3 = _a2[1];
            return [f(a), s3];
          });
        });
      };
    };
  };
}
function chain25(M) {
  var flatMapM = flatMap22(M);
  return function(f) {
    return function(ma) {
      return flatMapM(ma, f);
    };
  };
}
function flatMap22(M) {
  return function(ma, f) {
    return function(s) {
      return M.chain(ma(s), function(_a) {
        var a = _a[0], s1 = _a[1];
        return f(a)(s1);
      });
    };
  };
}
function fromState(F) {
  return function(sa) {
    return function(s) {
      return F.of(sa(s));
    };
  };
}
function fromF2(F) {
  return function(ma) {
    return function(s) {
      return F.map(ma, function(a) {
        return [a, s];
      });
    };
  };
}
function evaluate2(F) {
  return function(s) {
    return function(ma) {
      return F.map(ma(s), function(_a) {
        var a = _a[0];
        return a;
      });
    };
  };
}
function execute2(F) {
  return function(s) {
    return function(ma) {
      return F.map(ma(s), snd);
    };
  };
}
function getStateM(M) {
  var _ap18 = ap24(M);
  var _map35 = map33(M);
  var _chain = chain25(M);
  var _evaluate = evaluate2(M);
  var _execute = execute2(M);
  return {
    map: function(fa, f) {
      return pipe(fa, _map35(f));
    },
    ap: function(fab, fa) {
      return pipe(fab, _ap18(fa));
    },
    of: of21(M),
    chain: function(ma, f) {
      return pipe(ma, _chain(f));
    },
    get: function() {
      return function(s) {
        return M.of([s, s]);
      };
    },
    put: function(s) {
      return function() {
        return M.of([void 0, s]);
      };
    },
    modify: function(f) {
      return function(s) {
        return M.of([void 0, f(s)]);
      };
    },
    gets: function(f) {
      return function(s) {
        return M.of([f(s), s]);
      };
    },
    fromState: fromState(M),
    fromM: fromF2(M),
    evalState: function(fa, s) {
      return pipe(fa, _evaluate(s));
    },
    execState: function(fa, s) {
      return pipe(fa, _execute(s));
    }
  };
}

// node_modules/fp-ts/es6/StateReaderTaskEither.js
var left10 = function(e) {
  return function() {
    return left9(e);
  };
};
var right10 = of21(Pointed18);
function rightTask3(ma) {
  return fromReaderTaskEither(rightTask2(ma));
}
function leftTask3(me) {
  return fromReaderTaskEither(leftTask2(me));
}
function rightReader3(ma) {
  return fromReaderTaskEither(rightReader2(ma));
}
function leftReader3(me) {
  return fromReaderTaskEither(leftReader2(me));
}
function rightIO4(ma) {
  return fromReaderTaskEither(rightIO3(ma));
}
function leftIO4(me) {
  return fromReaderTaskEither(leftIO3(me));
}
var rightState = function(sa) {
  return flow(sa, right9);
};
var leftState = function(me) {
  return function(s) {
    return left9(me(s)[0]);
  };
};
var fromEither10 = match5(function(e) {
  return left10(e);
}, right10);
var fromReader6 = rightReader3;
var fromIO9 = rightIO4;
var fromTask5 = rightTask3;
var fromState2 = fromState(Pointed18);
var fromTaskEither2 = function(ma) {
  return fromReaderTaskEither(fromTaskEither(ma));
};
var fromIOEither4 = function(ma) {
  return fromReaderTaskEither(fromIOEither3(ma));
};
var fromReaderEither2 = function(ma) {
  return fromReaderTaskEither(fromReaderEither(ma));
};
var fromReaderTaskEither = fromF2(Functor22);
var local6 = function(f) {
  return function(ma) {
    return flow(ma, local(f));
  };
};
var asksStateReaderTaskEitherW = function(f) {
  return function(s) {
    return function(r) {
      return f(r)(s)(r);
    };
  };
};
var asksStateReaderTaskEither = asksStateReaderTaskEitherW;
var fromIOEitherK3 = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return fromIOEither4(f.apply(void 0, a));
  };
};
var fromTaskEitherK2 = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return fromTaskEither2(f.apply(void 0, a));
  };
};
var fromReaderTaskEitherK = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return fromReaderTaskEither(f.apply(void 0, a));
  };
};
var chainReaderTaskEitherKW = function(f) {
  return function(ma) {
    return flatMap23(ma, fromReaderTaskEitherK(f));
  };
};
var chainReaderTaskEitherK = chainReaderTaskEitherKW;
var _map26 = function(fa, f) {
  return pipe(fa, map34(f));
};
var _ap15 = function(fab, fa) {
  return pipe(fab, ap25(fa));
};
var _alt13 = function(fa, that) {
  return function(s) {
    return pipe(fa(s), alt15(function() {
      return that()(s);
    }));
  };
};
var _bimap5 = function(fea, f, g) {
  return function(s) {
    return pipe(fea(s), bimap9(f, function(_a) {
      var a = _a[0], s2 = _a[1];
      return [g(a), s2];
    }));
  };
};
var _mapLeft5 = function(fea, f) {
  return function(s) {
    return pipe(fea(s), mapLeft9(f));
  };
};
var map34 = map33(Functor22);
var bimap11 = function(f, g) {
  return function(fa) {
    return _bimap5(fa, f, g);
  };
};
var mapLeft11 = function(f) {
  return function(fa) {
    return _mapLeft5(fa, f);
  };
};
var ap25 = ap24(Chain18);
var apW9 = ap25;
var of22 = right10;
var _FromIO8 = {
  fromIO: fromIO9
};
var _FromTask4 = {
  fromTask: fromTask5
};
var _FromReader5 = {
  fromReader: fromReader6
};
var _FromEither7 = {
  fromEither: fromEither10
};
var flatMap23 = dual(2, flatMap22(Monad18));
var _FlatMap10 = {
  flatMap: flatMap23
};
var flatMapTaskEither2 = dual(2, function(self, f) {
  return flatMap23(self, function(a) {
    return fromTaskEitherK2(f)(a);
  });
});
var flatMapIO9 = flatMapIO(_FromIO8, _FlatMap10);
var flatMapTask5 = flatMapTask(_FromTask4, _FlatMap10);
var flatMapReader6 = flatMapReader(_FromReader5, _FlatMap10);
var flatMapIOEither3 = dual(2, function(self, f) {
  return flatMap23(self, function(a) {
    return fromIOEitherK3(f)(a);
  });
});
var flatMapEither7 = dual(2, flatMapEither(_FromEither7, _FlatMap10));
var flatMapOption8 = flatMapOption(_FromEither7, _FlatMap10);
var flatMapReaderTaskEither = dual(2, function(self, f) {
  return flatMap23(self, function(a) {
    return fromReaderTaskEitherK(f)(a);
  });
});
var flatMapState = dual(2, function(self, f) {
  return flatMap23(self, fromStateK2(f));
});
var flattenW9 = flatMap23(identity);
var flatten19 = flattenW9;
var altW13 = function(that) {
  return function(fa) {
    return function(r) {
      return pipe(fa(r), altW12(function() {
        return that()(r);
      }));
    };
  };
};
var alt16 = altW13;
var throwError7 = left10;
var URI31 = "StateReaderTaskEither";
var Functor26 = {
  URI: URI31,
  map: _map26
};
var as13 = dual(2, as(Functor26));
var asUnit13 = asUnit(Functor26);
var flap27 = flap(Functor26);
var Pointed19 = {
  URI: URI31,
  of: of22
};
var Apply14 = {
  URI: URI31,
  map: _map26,
  ap: _ap15
};
var apFirst20 = apFirst(Apply14);
var apFirstW7 = apFirst20;
var apSecond20 = apSecond(Apply14);
var apSecondW7 = apSecond20;
var Applicative15 = {
  URI: URI31,
  map: _map26,
  ap: _ap15,
  of: of22
};
var Chain19 = {
  URI: URI31,
  map: _map26,
  ap: _ap15,
  chain: flatMap23
};
var FromState2 = {
  URI: URI31,
  fromState: fromState2
};
var get3 = get2(FromState2);
var put3 = put2(FromState2);
var modify3 = modify2(FromState2);
var gets3 = gets2(FromState2);
var fromStateK2 = fromStateK(FromState2);
var chainStateK2 = chainStateK(FromState2, Chain19);
var Monad19 = {
  URI: URI31,
  map: _map26,
  ap: _ap15,
  of: of22,
  chain: flatMap23
};
var MonadIO9 = {
  URI: URI31,
  map: _map26,
  ap: _ap15,
  of: of22,
  chain: flatMap23,
  fromIO: fromIO9
};
var MonadTask5 = {
  URI: URI31,
  map: _map26,
  ap: _ap15,
  of: of22,
  chain: flatMap23,
  fromIO: fromIO9,
  fromTask: fromTask5
};
var MonadThrow7 = {
  URI: URI31,
  map: _map26,
  ap: _ap15,
  of: of22,
  chain: flatMap23,
  throwError: throwError7
};
var FromEither10 = {
  URI: URI31,
  fromEither: fromEither10
};
var FromIO9 = {
  URI: URI31,
  fromIO: fromIO9
};
var FromTask5 = {
  URI: URI31,
  fromIO: fromIO9,
  fromTask: fromTask5
};
var FromReader5 = {
  URI: URI31,
  fromReader: fromReader6
};
var tap16 = dual(2, tap(Chain19));
var tapEither8 = dual(2, tapEither(FromEither10, Chain19));
var tapIO9 = dual(2, tapIO(FromIO9, Chain19));
var tapTask5 = dual(2, tapTask(FromTask5, Chain19));
var tapReader6 = dual(2, tapReader(FromReader5, Chain19));
var Bifunctor9 = {
  URI: URI31,
  bimap: _bimap5,
  mapLeft: _mapLeft5
};
var Alt13 = {
  URI: URI31,
  map: _map26,
  alt: _alt13
};
var ask7 = ask2(FromReader5);
var asks7 = asks2(FromReader5);
var fromReaderK6 = fromReaderK(FromReader5);
var chainReaderK6 = flatMapReader6;
var chainReaderKW5 = flatMapReader6;
var chainFirstReaderK6 = tapReader6;
var chainFirstReaderKW5 = tapReader6;
var fromOption10 = fromOption(FromEither10);
var fromOptionK12 = fromOptionK(FromEither10);
var chainOptionK9 = chainOptionK(FromEither10, Chain19);
var chainOptionKW6 = chainOptionK9;
var chainEitherK8 = flatMapEither7;
var chainEitherKW5 = flatMapEither7;
var chainFirstEitherK8 = tapEither8;
var chainFirstEitherKW5 = tapEither8;
var fromPredicate12 = fromPredicate(FromEither10);
var filterOrElse7 = filterOrElse(FromEither10, Chain19);
var filterOrElseW6 = filterOrElse7;
var fromEitherK11 = fromEitherK(FromEither10);
var fromIOK9 = fromIOK(FromIO9);
var chainIOK9 = flatMapIO9;
var chainFirstIOK9 = tapIO9;
var chainTaskEitherKW2 = flatMapTaskEither2;
var chainTaskEitherK2 = flatMapTaskEither2;
var chainIOEitherKW3 = flatMapIOEither3;
var chainIOEitherK3 = flatMapIOEither3;
var fromTaskK5 = fromTaskK(FromTask5);
var chainTaskK5 = flatMapTask5;
var chainFirstTaskK5 = tapTask5;
var evaluate3 = evaluate2(Functor22);
var execute3 = execute2(Functor22);
var bindTo20 = bindTo(Functor26);
var let_19 = let_(Functor26);
var bind20 = bind(Chain19);
var bindW9 = bind20;
var apS20 = apS(Apply14);
var apSW9 = apS20;
var traverseReadonlyNonEmptyArrayWithIndex14 = function(f) {
  return function(as15) {
    return function(s) {
      return function(r) {
        return function() {
          return tail(as15).reduce(function(acc, a, i) {
            return acc.then(function(ebs) {
              return isLeft(ebs) ? acc : f(i + 1, a)(ebs.right[1])(r)().then(function(eb) {
                if (isLeft(eb)) {
                  return eb;
                }
                var _a = eb.right, b = _a[0], s2 = _a[1];
                ebs.right[0].push(b);
                ebs.right[1] = s2;
                return ebs;
              });
            });
          }, f(0, head(as15))(s)(r)().then(map9(function(_a) {
            var b = _a[0], s2 = _a[1];
            return [[b], s2];
          })));
        };
      };
    };
  };
};
var traverseReadonlyArrayWithIndex14 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex14(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : of22(emptyReadonlyArray);
  };
};
var traverseArrayWithIndex13 = traverseReadonlyArrayWithIndex14;
var traverseArray13 = function(f) {
  return traverseReadonlyArrayWithIndex14(function(_, a) {
    return f(a);
  });
};
var sequenceArray13 = traverseArray13(identity);
var chain26 = flatMap23;
var chainW9 = flatMap23;
var chainFirst20 = tap16;
var chainFirstW9 = tap16;
var stateReaderTaskEither = {
  URI: URI31,
  map: _map26,
  of: of22,
  ap: _ap15,
  chain: flatMap23,
  bimap: _bimap5,
  mapLeft: _mapLeft5,
  alt: _alt13,
  fromIO: fromIO9,
  fromTask: fromTask5,
  throwError: throwError7
};
var stateReaderTaskEitherSeq = {
  URI: URI31,
  map: _map26,
  of: of22,
  ap: _ap15,
  chain: flatMap23,
  bimap: _bimap5,
  mapLeft: _mapLeft5,
  alt: _alt13,
  fromIO: fromIO9,
  fromTask: fromTask5,
  throwError: throwError7
};
var evalState2 = function(fsa, s) {
  return pipe(fsa(s), map27(function(_a) {
    var a = _a[0];
    return a;
  }));
};
var execState2 = function(fsa, s) {
  return pipe(fsa(s), map27(function(_a) {
    var _ = _a[0], s2 = _a[1];
    return s2;
  }));
};
function run3(ma, s, r) {
  return ma(s)(r)();
}

// node_modules/fp-ts/es6/Store.js
var Store_exports = {};
__export(Store_exports, {
  Comonad: () => Comonad5,
  Functor: () => Functor27,
  URI: () => URI32,
  duplicate: () => duplicate9,
  experiment: () => experiment,
  extend: () => extend10,
  extract: () => extract5,
  flap: () => flap28,
  map: () => map35,
  peeks: () => peeks,
  seek: () => seek,
  seeks: () => seeks,
  store: () => store
});
function seek(s) {
  return function(wa) {
    return { peek: wa.peek, pos: s };
  };
}
function seeks(f) {
  return function(wa) {
    return { peek: wa.peek, pos: f(wa.pos) };
  };
}
function peeks(f) {
  return function(wa) {
    return wa.peek(f(wa.pos));
  };
}
function experiment(F) {
  return function(f) {
    return function(wa) {
      return F.map(f(wa.pos), function(s) {
        return wa.peek(s);
      });
    };
  };
}
var _map27 = function(fa, f) {
  return pipe(fa, map35(f));
};
var _extend9 = function(wa, f) {
  return pipe(wa, extend10(f));
};
var extend10 = function(f) {
  return function(wa) {
    return {
      peek: function(s) {
        return f({ peek: wa.peek, pos: s });
      },
      pos: wa.pos
    };
  };
};
var extract5 = function(wa) {
  return wa.peek(wa.pos);
};
var duplicate9 = extend10(identity);
var map35 = function(f) {
  return function(fa) {
    return {
      peek: function(s) {
        return f(fa.peek(s));
      },
      pos: fa.pos
    };
  };
};
var URI32 = "Store";
var Functor27 = {
  URI: URI32,
  map: _map27
};
var flap28 = flap(Functor27);
var Comonad5 = {
  URI: URI32,
  map: _map27,
  extend: _extend9,
  extract: extract5
};
var store = Comonad5;

// node_modules/fp-ts/es6/Strong.js
var Strong_exports = {};
__export(Strong_exports, {
  fanOut: () => fanOut,
  fanout: () => fanout,
  split: () => split3,
  splitStrong: () => splitStrong
});
function split3(S, C) {
  return function(pab, pcd) {
    return C.compose(S.second(pcd), S.first(pab));
  };
}
function fanOut(S, C) {
  var splitSC = split3(S, C);
  return function(pab, pac) {
    return C.compose(splitSC(pab, pac), S.promap(C.id(), identity, function(a) {
      return [a, a];
    }));
  };
}
function splitStrong(F) {
  return split3(F, F);
}
function fanout(F) {
  return fanOut(F, F);
}

// node_modules/fp-ts/es6/struct.js
var struct_exports = {};
__export(struct_exports, {
  evolve: () => evolve,
  getAssignSemigroup: () => getAssignSemigroup
});
var getAssignSemigroup = function() {
  return {
    concat: function(first3, second2) {
      return Object.assign({}, first3, second2);
    }
  };
};
var evolve = function(transformations) {
  return function(a) {
    var out = {};
    for (var k in a) {
      if (has.call(a, k)) {
        out[k] = transformations[k](a[k]);
      }
    }
    return out;
  };
};

// node_modules/fp-ts/es6/TaskOption.js
var TaskOption_exports = {};
__export(TaskOption_exports, {
  Alt: () => Alt14,
  Alternative: () => Alternative5,
  ApT: () => ApT13,
  ApplicativePar: () => ApplicativePar6,
  ApplicativeSeq: () => ApplicativeSeq6,
  ApplyPar: () => ApplyPar6,
  ApplySeq: () => ApplySeq5,
  Chain: () => Chain20,
  Compactable: () => Compactable9,
  Do: () => Do18,
  Filterable: () => Filterable9,
  FromEither: () => FromEither11,
  FromIO: () => FromIO10,
  FromTask: () => FromTask6,
  Functor: () => Functor28,
  Monad: () => Monad20,
  MonadIO: () => MonadIO10,
  MonadTask: () => MonadTask6,
  Pointed: () => Pointed20,
  URI: () => URI33,
  Zero: () => Zero5,
  alt: () => alt17,
  altW: () => altW14,
  ap: () => ap26,
  apFirst: () => apFirst21,
  apS: () => apS21,
  apSecond: () => apSecond21,
  as: () => as14,
  asUnit: () => asUnit14,
  bind: () => bind21,
  bindTo: () => bindTo21,
  chain: () => chain27,
  chainEitherK: () => chainEitherK9,
  chainFirst: () => chainFirst21,
  chainFirstEitherK: () => chainFirstEitherK9,
  chainFirstIOK: () => chainFirstIOK10,
  chainFirstTaskK: () => chainFirstTaskK6,
  chainIOK: () => chainIOK10,
  chainNullableK: () => chainNullableK8,
  chainOptionK: () => chainOptionK10,
  chainTaskK: () => chainTaskK6,
  compact: () => compact12,
  filter: () => filter15,
  filterMap: () => filterMap13,
  flap: () => flap29,
  flatMap: () => flatMap24,
  flatMapIO: () => flatMapIO10,
  flatMapTask: () => flatMapTask6,
  flatten: () => flatten20,
  fold: () => fold13,
  foldW: () => foldW8,
  fromEither: () => fromEither11,
  fromEitherK: () => fromEitherK12,
  fromIO: () => fromIO10,
  fromIOK: () => fromIOK10,
  fromNullable: () => fromNullable8,
  fromNullableK: () => fromNullableK8,
  fromOption: () => fromOption11,
  fromOptionK: () => fromOptionK13,
  fromPredicate: () => fromPredicate13,
  fromTask: () => fromTask6,
  fromTaskEither: () => fromTaskEither3,
  fromTaskK: () => fromTaskK6,
  getOrElse: () => getOrElse10,
  getOrElseW: () => getOrElseW8,
  guard: () => guard6,
  let: () => let_20,
  map: () => map36,
  match: () => match14,
  matchE: () => matchE8,
  matchEW: () => matchEW6,
  matchW: () => matchW12,
  none: () => none4,
  of: () => of23,
  partition: () => partition13,
  partitionMap: () => partitionMap13,
  separate: () => separate12,
  sequenceArray: () => sequenceArray14,
  sequenceSeqArray: () => sequenceSeqArray6,
  some: () => some11,
  tap: () => tap17,
  tapEither: () => tapEither9,
  tapIO: () => tapIO10,
  tapTask: () => tapTask6,
  traverseArray: () => traverseArray14,
  traverseArrayWithIndex: () => traverseArrayWithIndex14,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex15,
  traverseReadonlyArrayWithIndexSeq: () => traverseReadonlyArrayWithIndexSeq6,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex15,
  traverseReadonlyNonEmptyArrayWithIndexSeq: () => traverseReadonlyNonEmptyArrayWithIndexSeq6,
  traverseSeqArray: () => traverseSeqArray6,
  traverseSeqArrayWithIndex: () => traverseSeqArrayWithIndex6,
  tryCatch: () => tryCatch5,
  tryCatchK: () => tryCatchK5,
  zero: () => zero7
});
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var some11 = some5(Pointed15);
var fromPredicate13 = fromPredicate7(Pointed15);
var fromOption11 = of16;
var fromEither11 = fromEither5(Pointed15);
var fromIO10 = function(ma) {
  return fromTask6(fromIO5(ma));
};
var fromTask6 = fromF(Functor19);
var fromTaskEither3 = map24(fromEither3);
var match14 = match8(Functor19);
var matchW12 = match14;
var matchE8 = matchE3(Chain15);
var fold13 = matchE8;
var matchEW6 = matchE8;
var foldW8 = matchEW6;
var getOrElse10 = getOrElse5(Monad15);
var getOrElseW8 = getOrElse10;
var fromNullable8 = fromNullable4(Pointed15);
var tryCatch5 = function(f) {
  return function() {
    return __awaiter2(void 0, void 0, void 0, function() {
      var reason_1;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, f().then(some)];
          case 1:
            return [2, _a.sent()];
          case 2:
            reason_1 = _a.sent();
            return [2, none];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};
var tryCatchK5 = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return tryCatch5(function() {
      return f.apply(void 0, a);
    });
  };
};
var fromNullableK8 = fromNullableK4(Pointed15);
var chainNullableK8 = chainNullableK4(Monad15);
var fromOptionK13 = fromOptionK6(Pointed15);
var chainOptionK10 = chainOptionK4(Monad15);
var map36 = map16(Functor19);
var ap26 = ap14(ApplyPar2);
var of23 = some11;
var _FromIO9 = {
  fromIO: fromIO10
};
var _FromTask5 = {
  fromTask: fromTask6
};
var flatMap24 = dual(2, flatMap13(Monad15));
var _FlatMap11 = {
  flatMap: flatMap24
};
var flatMapIO10 = flatMapIO(_FromIO9, _FlatMap11);
var flatMapTask6 = flatMapTask(_FromTask5, _FlatMap11);
var flatten20 = flatMap24(identity);
var alt17 = alt10(Monad15);
var altW14 = alt17;
var zero7 = zero4(Pointed15);
var none4 = zero7();
var compact12 = compact4(Functor19, Compactable3);
var separate12 = separate4(Functor19, Compactable3, Functor6);
var filter15 = filter6(Functor19, Filterable3);
var filterMap13 = filterMap4(Functor19, Filterable3);
var partition13 = partition4(Functor19, Filterable3);
var partitionMap13 = partitionMap4(Functor19, Filterable3);
var _map28 = function(fa, f) {
  return pipe(fa, map36(f));
};
var _ap16 = function(fab, fa) {
  return pipe(fab, ap26(fa));
};
var _alt14 = function(fa, that) {
  return pipe(fa, alt17(that));
};
var _filter9 = function(fa, predicate) {
  return pipe(fa, filter15(predicate));
};
var _filterMap9 = function(fa, f) {
  return pipe(fa, filterMap13(f));
};
var _partition9 = function(fa, predicate) {
  return pipe(fa, partition13(predicate));
};
var _partitionMap9 = function(fa, f) {
  return pipe(fa, partitionMap13(f));
};
var URI33 = "TaskOption";
var Functor28 = {
  URI: URI33,
  map: _map28
};
var as14 = dual(2, as(Functor28));
var asUnit14 = asUnit(Functor28);
var flap29 = flap(Functor28);
var Pointed20 = {
  URI: URI33,
  of: of23
};
var ApplyPar6 = {
  URI: URI33,
  map: _map28,
  ap: _ap16
};
var apFirst21 = apFirst(ApplyPar6);
var apSecond21 = apSecond(ApplyPar6);
var ApplicativePar6 = {
  URI: URI33,
  map: _map28,
  ap: _ap16,
  of: of23
};
var _apSeq6 = function(fab, fa) {
  return flatMap24(fab, function(f) {
    return pipe(fa, map36(f));
  });
};
var ApplySeq5 = {
  URI: URI33,
  map: _map28,
  ap: _apSeq6
};
var ApplicativeSeq6 = {
  URI: URI33,
  map: _map28,
  ap: _apSeq6,
  of: of23
};
var Chain20 = {
  URI: URI33,
  map: _map28,
  ap: _ap16,
  chain: flatMap24
};
var FromEither11 = {
  URI: URI33,
  fromEither: fromEither11
};
var FromIO10 = {
  URI: URI33,
  fromIO: fromIO10
};
var FromTask6 = {
  URI: URI33,
  fromIO: fromIO10,
  fromTask: fromTask6
};
var tap17 = dual(2, tap(Chain20));
var tapEither9 = dual(2, tapEither(FromEither11, Chain20));
var tapIO10 = dual(2, tapIO(FromIO10, Chain20));
var tapTask6 = dual(2, tapTask(FromTask6, Chain20));
var Alt14 = {
  URI: URI33,
  map: _map28,
  alt: _alt14
};
var Zero5 = {
  URI: URI33,
  zero: zero7
};
var guard6 = guard(Zero5, Pointed20);
var Alternative5 = {
  URI: URI33,
  map: _map28,
  ap: _ap16,
  of: of23,
  alt: _alt14,
  zero: zero7
};
var Monad20 = {
  URI: URI33,
  map: _map28,
  ap: _ap16,
  of: of23,
  chain: flatMap24
};
var MonadIO10 = {
  URI: URI33,
  map: _map28,
  ap: _ap16,
  of: of23,
  chain: flatMap24,
  fromIO: fromIO10
};
var MonadTask6 = {
  URI: URI33,
  map: _map28,
  ap: _ap16,
  of: of23,
  chain: flatMap24,
  fromIO: fromIO10,
  fromTask: fromTask6
};
var Compactable9 = {
  URI: URI33,
  compact: compact12,
  separate: separate12
};
var Filterable9 = {
  URI: URI33,
  map: _map28,
  compact: compact12,
  separate: separate12,
  filter: _filter9,
  filterMap: _filterMap9,
  partition: _partition9,
  partitionMap: _partitionMap9
};
var fromIOK10 = fromIOK(FromIO10);
var chainIOK10 = flatMapIO10;
var chainFirstIOK10 = tapIO10;
var fromEitherK12 = fromEitherK(FromEither11);
var chainEitherK9 = chainEitherK(FromEither11, Chain20);
var chainFirstEitherK9 = tapEither9;
var fromTaskK6 = fromTaskK(FromTask6);
var chainTaskK6 = flatMapTask6;
var chainFirstTaskK6 = tapTask6;
var Do18 = of23(emptyRecord);
var bindTo21 = bindTo(Functor28);
var let_20 = let_(Functor28);
var bind21 = bind(Chain20);
var apS21 = apS(ApplyPar6);
var ApT13 = of23(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex15 = function(f) {
  return flow(traverseReadonlyNonEmptyArrayWithIndex10(f), map24(traverseReadonlyNonEmptyArrayWithIndex(SK)));
};
var traverseReadonlyArrayWithIndex15 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndex15(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT13;
  };
};
var traverseReadonlyNonEmptyArrayWithIndexSeq6 = function(f) {
  return function(as15) {
    return function() {
      return tail(as15).reduce(function(acc, a, i) {
        return acc.then(function(obs) {
          return isNone(obs) ? acc : f(i + 1, a)().then(function(ob) {
            if (isNone(ob)) {
              return ob;
            }
            obs.value.push(ob.value);
            return obs;
          });
        });
      }, f(0, head(as15))().then(map7(singleton)));
    };
  };
};
var traverseReadonlyArrayWithIndexSeq6 = function(f) {
  var g = traverseReadonlyNonEmptyArrayWithIndexSeq6(f);
  return function(as15) {
    return isNonEmpty(as15) ? g(as15) : ApT13;
  };
};
var traverseArrayWithIndex14 = traverseReadonlyArrayWithIndex15;
var traverseArray14 = function(f) {
  return traverseReadonlyArrayWithIndex15(function(_, a) {
    return f(a);
  });
};
var sequenceArray14 = traverseArray14(identity);
var traverseSeqArrayWithIndex6 = traverseReadonlyArrayWithIndexSeq6;
var traverseSeqArray6 = function(f) {
  return traverseReadonlyArrayWithIndexSeq6(function(_, a) {
    return f(a);
  });
};
var sequenceSeqArray6 = traverseSeqArray6(identity);
var chain27 = flatMap24;
var chainFirst21 = tap17;

// node_modules/fp-ts/es6/TaskThese.js
var TaskThese_exports = {};
__export(TaskThese_exports, {
  ApT: () => ApT15,
  Bifunctor: () => Bifunctor11,
  FromEither: () => FromEither13,
  FromIO: () => FromIO11,
  FromTask: () => FromTask7,
  FromThese: () => FromThese2,
  Functor: () => Functor30,
  Pointed: () => Pointed22,
  URI: () => URI35,
  bifunctorTaskThese: () => bifunctorTaskThese,
  bimap: () => bimap14,
  both: () => both3,
  flap: () => flap31,
  fold: () => fold15,
  foldW: () => foldW10,
  fromEither: () => fromEither12,
  fromIO: () => fromIO11,
  fromIOEither: () => fromIOEither5,
  fromIOK: () => fromIOK11,
  fromOption: () => fromOption13,
  fromOptionK: () => fromOptionK15,
  fromPredicate: () => fromPredicate15,
  fromTask: () => fromTask7,
  fromTaskK: () => fromTaskK7,
  fromThese: () => fromThese,
  fromTheseK: () => fromTheseK2,
  functorTaskThese: () => functorTaskThese,
  getApplicative: () => getApplicative4,
  getApply: () => getApply4,
  getChain: () => getChain3,
  getMonad: () => getMonad3,
  getSemigroup: () => getSemigroup20,
  left: () => left13,
  leftIO: () => leftIO5,
  leftTask: () => leftTask4,
  map: () => map39,
  mapLeft: () => mapLeft14,
  match: () => match17,
  matchE: () => matchE10,
  matchEW: () => matchEW7,
  matchW: () => matchW14,
  of: () => of25,
  right: () => right13,
  rightIO: () => rightIO5,
  rightTask: () => rightTask4,
  swap: () => swap10,
  taskThese: () => taskThese,
  toTuple: () => toTuple3,
  toTuple2: () => toTuple23,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex17,
  traverseReadonlyArrayWithIndexSeq: () => traverseReadonlyArrayWithIndexSeq7,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex17,
  traverseReadonlyNonEmptyArrayWithIndexSeq: () => traverseReadonlyNonEmptyArrayWithIndexSeq7
});

// node_modules/fp-ts/es6/These.js
var These_exports = {};
__export(These_exports, {
  ApT: () => ApT14,
  Bifunctor: () => Bifunctor10,
  Foldable: () => Foldable11,
  FromEither: () => FromEither12,
  FromThese: () => FromThese,
  Functor: () => Functor29,
  Pointed: () => Pointed21,
  Traversable: () => Traversable11,
  URI: () => URI34,
  bimap: () => bimap12,
  both: () => both,
  elem: () => elem11,
  exists: () => exists5,
  flap: () => flap30,
  fold: () => fold14,
  foldMap: () => foldMap17,
  foldW: () => foldW9,
  fromOption: () => fromOption12,
  fromOptionK: () => fromOptionK14,
  fromOptions: () => fromOptions,
  fromPredicate: () => fromPredicate14,
  getApplicative: () => getApplicative3,
  getApply: () => getApply3,
  getChain: () => getChain2,
  getEq: () => getEq15,
  getLeft: () => getLeft2,
  getLeftOnly: () => getLeftOnly,
  getMonad: () => getMonad2,
  getRight: () => getRight2,
  getRightOnly: () => getRightOnly,
  getSemigroup: () => getSemigroup19,
  getShow: () => getShow15,
  isBoth: () => isBoth,
  isLeft: () => isLeft3,
  isRight: () => isRight3,
  left: () => left11,
  leftOrBoth: () => leftOrBoth,
  map: () => map37,
  mapLeft: () => mapLeft12,
  match: () => match15,
  matchW: () => matchW13,
  of: () => of24,
  reduce: () => reduce17,
  reduceRight: () => reduceRight17,
  right: () => right11,
  rightOrBoth: () => rightOrBoth,
  sequence: () => sequence11,
  swap: () => swap8,
  these: () => these,
  toTuple: () => toTuple,
  toTuple2: () => toTuple2,
  traverse: () => traverse11,
  traverseReadonlyArrayWithIndex: () => traverseReadonlyArrayWithIndex16,
  traverseReadonlyNonEmptyArrayWithIndex: () => traverseReadonlyNonEmptyArrayWithIndex16
});
var isLeft3 = function(fa) {
  return fa._tag === "Left";
};
var isRight3 = function(fa) {
  return fa._tag === "Right";
};
function isBoth(fa) {
  return fa._tag === "Both";
}
function left11(left14) {
  return { _tag: "Left", left: left14 };
}
function right11(right14) {
  return { _tag: "Right", right: right14 };
}
function both(left14, right14) {
  return { _tag: "Both", left: left14, right: right14 };
}
var matchW13 = function(onLeft, onRight, onBoth) {
  return function(fa) {
    switch (fa._tag) {
      case "Left":
        return onLeft(fa.left);
      case "Right":
        return onRight(fa.right);
      case "Both":
        return onBoth(fa.left, fa.right);
    }
  };
};
var foldW9 = matchW13;
var match15 = matchW13;
var fold14 = match15;
var swap8 = match15(right11, left11, function(e, a) {
  return both(a, e);
});
function getShow15(SE, SA) {
  return {
    show: match15(function(l) {
      return "left(".concat(SE.show(l), ")");
    }, function(a) {
      return "right(".concat(SA.show(a), ")");
    }, function(l, a) {
      return "both(".concat(SE.show(l), ", ").concat(SA.show(a), ")");
    })
  };
}
function getEq15(EE, EA) {
  return fromEquals(function(x, y) {
    return isLeft3(x) ? isLeft3(y) && EE.equals(x.left, y.left) : isRight3(x) ? isRight3(y) && EA.equals(x.right, y.right) : isBoth(y) && EE.equals(x.left, y.left) && EA.equals(x.right, y.right);
  });
}
function getSemigroup19(SE, SA) {
  return {
    concat: function(x, y) {
      return isLeft3(x) ? isLeft3(y) ? left11(SE.concat(x.left, y.left)) : isRight3(y) ? both(x.left, y.right) : both(SE.concat(x.left, y.left), y.right) : isRight3(x) ? isLeft3(y) ? both(y.left, x.right) : isRight3(y) ? right11(SA.concat(x.right, y.right)) : both(y.left, SA.concat(x.right, y.right)) : isLeft3(y) ? both(SE.concat(x.left, y.left), x.right) : isRight3(y) ? both(x.left, SA.concat(x.right, y.right)) : both(SE.concat(x.left, y.left), SA.concat(x.right, y.right));
    }
  };
}
var getApply3 = function(S) {
  return {
    URI: URI34,
    _E: void 0,
    map: _map29,
    ap: function(fab, fa) {
      return isLeft3(fab) ? isLeft3(fa) ? left11(S.concat(fab.left, fa.left)) : isRight3(fa) ? left11(fab.left) : left11(S.concat(fab.left, fa.left)) : isRight3(fab) ? isLeft3(fa) ? left11(fa.left) : isRight3(fa) ? right11(fab.right(fa.right)) : both(fa.left, fab.right(fa.right)) : isLeft3(fa) ? left11(S.concat(fab.left, fa.left)) : isRight3(fa) ? both(fab.left, fab.right(fa.right)) : both(S.concat(fab.left, fa.left), fab.right(fa.right));
    }
  };
};
function getApplicative3(S) {
  var A = getApply3(S);
  return {
    URI: URI34,
    _E: void 0,
    map: _map29,
    ap: A.ap,
    of: of24
  };
}
function getChain2(S) {
  var A = getApply3(S);
  var chain30 = function(ma, f) {
    if (isLeft3(ma)) {
      return ma;
    }
    if (isRight3(ma)) {
      return f(ma.right);
    }
    var fb = f(ma.right);
    return isLeft3(fb) ? left11(S.concat(ma.left, fb.left)) : isRight3(fb) ? both(ma.left, fb.right) : both(S.concat(ma.left, fb.left), fb.right);
  };
  return {
    URI: URI34,
    _E: void 0,
    map: _map29,
    ap: A.ap,
    chain: chain30
  };
}
function getMonad2(S) {
  var C = getChain2(S);
  return {
    URI: URI34,
    _E: void 0,
    map: _map29,
    of: of24,
    ap: C.ap,
    chain: C.chain,
    throwError: left11
  };
}
function getLeft2(fa) {
  return isLeft3(fa) ? some(fa.left) : isRight3(fa) ? none : some(fa.left);
}
function getRight2(fa) {
  return isLeft3(fa) ? none : isRight3(fa) ? some(fa.right) : some(fa.right);
}
function leftOrBoth(e) {
  return function(ma) {
    return isNone(ma) ? left11(e) : both(e, ma.value);
  };
}
function rightOrBoth(a) {
  return function(me) {
    return isNone(me) ? right11(a) : both(me.value, a);
  };
}
function getLeftOnly(fa) {
  return isLeft3(fa) ? some(fa.left) : none;
}
function getRightOnly(fa) {
  return isRight3(fa) ? some(fa.right) : none;
}
var fromOptions = function(fe, fa) {
  return isNone(fe) ? isNone(fa) ? none : some(right11(fa.value)) : isNone(fa) ? some(left11(fe.value)) : some(both(fe.value, fa.value));
};
var _map29 = function(fa, f) {
  return pipe(fa, map37(f));
};
var _bimap6 = function(fa, f, g) {
  return pipe(fa, bimap12(f, g));
};
var _mapLeft6 = function(fa, f) {
  return pipe(fa, mapLeft12(f));
};
var _reduce11 = function(fa, b, f) {
  return pipe(fa, reduce17(b, f));
};
var _foldMap11 = function(M) {
  var foldMapM = foldMap17(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight11 = function(fa, b, f) {
  return pipe(fa, reduceRight17(b, f));
};
var _traverse11 = function(F) {
  var traverseF = traverse11(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var bimap12 = function(f, g) {
  return function(fa) {
    return isLeft3(fa) ? left11(f(fa.left)) : isRight3(fa) ? right11(g(fa.right)) : both(f(fa.left), g(fa.right));
  };
};
var mapLeft12 = function(f) {
  return function(fa) {
    return isLeft3(fa) ? left11(f(fa.left)) : isBoth(fa) ? both(f(fa.left), fa.right) : fa;
  };
};
var map37 = function(f) {
  return function(fa) {
    return isLeft3(fa) ? fa : isRight3(fa) ? right11(f(fa.right)) : both(fa.left, f(fa.right));
  };
};
var reduce17 = function(b, f) {
  return function(fa) {
    return isLeft3(fa) ? b : f(b, fa.right);
  };
};
var foldMap17 = function(M) {
  return function(f) {
    return function(fa) {
      return isLeft3(fa) ? M.empty : f(fa.right);
    };
  };
};
var reduceRight17 = function(b, f) {
  return function(fa) {
    return isLeft3(fa) ? b : f(fa.right, b);
  };
};
var traverse11 = function(F) {
  return function(f) {
    return function(ta) {
      return isLeft3(ta) ? F.of(ta) : isRight3(ta) ? F.map(f(ta.right), right11) : F.map(f(ta.right), function(b) {
        return both(ta.left, b);
      });
    };
  };
};
var sequence11 = function(F) {
  return function(ta) {
    return isLeft3(ta) ? F.of(ta) : isRight3(ta) ? F.map(ta.right, right11) : F.map(ta.right, function(b) {
      return both(ta.left, b);
    });
  };
};
var of24 = right11;
var URI34 = "These";
var Functor29 = {
  URI: URI34,
  map: _map29
};
var flap30 = flap(Functor29);
var Pointed21 = {
  URI: URI34,
  of: of24
};
var Bifunctor10 = {
  URI: URI34,
  bimap: _bimap6,
  mapLeft: _mapLeft6
};
var FromThese = {
  URI: URI34,
  fromThese: identity
};
var Foldable11 = {
  URI: URI34,
  reduce: _reduce11,
  foldMap: _foldMap11,
  reduceRight: _reduceRight11
};
var Traversable11 = {
  URI: URI34,
  map: _map29,
  reduce: _reduce11,
  foldMap: _foldMap11,
  reduceRight: _reduceRight11,
  traverse: _traverse11,
  sequence: sequence11
};
var FromEither12 = {
  URI: URI34,
  fromEither: identity
};
var fromPredicate14 = fromPredicate(FromEither12);
var fromOption12 = fromOption(FromEither12);
var fromOptionK14 = fromOptionK(FromEither12);
var elem11 = function(E) {
  return function(a) {
    return function(ma) {
      return isLeft3(ma) ? false : E.equals(a, ma.right);
    };
  };
};
var exists5 = function(predicate) {
  return function(ma) {
    return isLeft3(ma) ? false : predicate(ma.right);
  };
};
var toTuple2 = function(e, a) {
  return function(fa) {
    return isLeft3(fa) ? [fa.left, a()] : isRight3(fa) ? [e(), fa.right] : [fa.left, fa.right];
  };
};
var toTuple = function(e, a) {
  return toTuple2(function() {
    return e;
  }, function() {
    return a;
  });
};
var ApT14 = of24(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex16 = function(S) {
  return function(f) {
    return function(as15) {
      var e = none;
      var t = f(0, head(as15));
      if (isLeft3(t)) {
        return t;
      }
      if (isBoth(t)) {
        e = some(t.left);
      }
      var out = [t.right];
      for (var i = 1; i < as15.length; i++) {
        var t_1 = f(i, as15[i]);
        if (isLeft3(t_1)) {
          return t_1;
        }
        if (isBoth(t_1)) {
          e = isNone(e) ? some(t_1.left) : some(S.concat(e.value, t_1.left));
        }
        out.push(t_1.right);
      }
      return isNone(e) ? right11(out) : both(e.value, out);
    };
  };
};
var traverseReadonlyArrayWithIndex16 = function(S) {
  return function(f) {
    var g = traverseReadonlyNonEmptyArrayWithIndex16(S)(f);
    return function(as15) {
      return isNonEmpty(as15) ? g(as15) : ApT14;
    };
  };
};
var these = {
  URI: URI34,
  map: _map29,
  bimap: _bimap6,
  mapLeft: _mapLeft6,
  reduce: _reduce11,
  foldMap: _foldMap11,
  reduceRight: _reduceRight11,
  traverse: _traverse11,
  sequence: sequence11
};

// node_modules/fp-ts/es6/TheseT.js
var TheseT_exports = {};
__export(TheseT_exports, {
  ap: () => ap27,
  bimap: () => bimap13,
  both: () => both2,
  chain: () => chain28,
  getTheseM: () => getTheseM,
  left: () => left12,
  leftF: () => leftF2,
  map: () => map38,
  mapLeft: () => mapLeft13,
  match: () => match16,
  matchE: () => matchE9,
  right: () => right12,
  rightF: () => rightF2,
  swap: () => swap9,
  toTuple2: () => toTuple22
});
function right12(F) {
  return flow(right11, F.of);
}
function left12(F) {
  return flow(left11, F.of);
}
function both2(F) {
  return flow(both, F.of);
}
function rightF2(F) {
  return function(fa) {
    return F.map(fa, right11);
  };
}
function leftF2(F) {
  return function(fe) {
    return F.map(fe, left11);
  };
}
function map38(F) {
  return map(F, Functor29);
}
function ap27(F, S) {
  return ap(F, getApply3(S));
}
function chain28(M, S) {
  var _left = left12(M);
  return function(f) {
    return function(ma) {
      return M.chain(ma, match15(_left, f, function(e1, a) {
        return M.map(f(a), match15(function(e2) {
          return left11(S.concat(e1, e2));
        }, function(b) {
          return both(e1, b);
        }, function(e2, b) {
          return both(S.concat(e1, e2), b);
        }));
      }));
    };
  };
}
function bimap13(F) {
  return function(f, g) {
    return function(fea) {
      return F.map(fea, bimap12(f, g));
    };
  };
}
function mapLeft13(F) {
  return function(f) {
    return function(fea) {
      return F.map(fea, mapLeft12(f));
    };
  };
}
function match16(F) {
  return function(onLeft, onRight, onBoth) {
    return function(ma) {
      return F.map(ma, match15(onLeft, onRight, onBoth));
    };
  };
}
function matchE9(M) {
  return function(onLeft, onRight, onBoth) {
    return function(ma) {
      return M.chain(ma, match15(onLeft, onRight, onBoth));
    };
  };
}
function swap9(F) {
  return function(ma) {
    return F.map(ma, swap8);
  };
}
function toTuple22(F) {
  return function(e, a) {
    return function(fa) {
      return F.map(fa, toTuple2(e, a));
    };
  };
}
function getTheseM(M) {
  var _map35 = map38(M);
  var _bimap9 = bimap13(M);
  var _mapLeft9 = mapLeft13(M);
  var _fold = matchE9(M);
  var _toTuple2 = toTuple22(M);
  var of28 = right12(M);
  var mapT = function(fa, f) {
    return pipe(fa, _map35(f));
  };
  return {
    map: mapT,
    bimap: function(fea, f, g) {
      return pipe(fea, _bimap9(f, g));
    },
    mapLeft: function(fea, f) {
      return pipe(fea, _mapLeft9(f));
    },
    fold: function(fa, onLeft, onRight, onBoth) {
      return pipe(fa, _fold(onLeft, onRight, onBoth));
    },
    swap: swap9(M),
    rightM: rightF2(M),
    leftM: leftF2(M),
    left: left12(M),
    right: right12(M),
    both: both2(M),
    toTuple: function(fa, e, a) {
      return pipe(fa, _toTuple2(function() {
        return e;
      }, function() {
        return a;
      }));
    },
    getMonad: function(S) {
      var _ap18 = ap27(M, S);
      var _chain = chain28(M, S);
      return {
        _E: void 0,
        map: mapT,
        of: of28,
        ap: function(fab, fa) {
          return pipe(fab, _ap18(fa));
        },
        chain: function(ma, f) {
          return pipe(ma, _chain(f));
        }
      };
    }
  };
}

// node_modules/fp-ts/es6/TaskThese.js
var left13 = left12(Pointed15);
var right13 = right12(Pointed15);
var both3 = both2(Pointed15);
var rightTask4 = rightF2(Functor19);
var leftTask4 = leftF2(Functor19);
var rightIO5 = flow(fromIO5, rightTask4);
var leftIO5 = flow(fromIO5, leftTask4);
var fromEither12 = of16;
var fromThese = of16;
var fromIO11 = rightIO5;
var fromIOEither5 = fromIO5;
var fromTask7 = rightTask4;
var match17 = match16(Functor19);
var matchW14 = match17;
var matchE10 = matchE9(Monad15);
var fold15 = matchE10;
var matchEW7 = fold15;
var foldW10 = matchEW7;
var swap10 = swap9(Functor19);
var _map30 = function(fa, f) {
  return pipe(fa, map39(f));
};
var _bimap7 = function(fa, f, g) {
  return pipe(fa, bimap14(f, g));
};
var _mapLeft7 = function(fa, f) {
  return pipe(fa, mapLeft14(f));
};
var map39 = map38(Functor19);
var bimap14 = bimap13(Functor19);
var mapLeft14 = mapLeft13(Functor19);
var of25 = right13;
var URI35 = "TaskThese";
var getApply4 = function(A, S) {
  var ap29 = ap27(A, S);
  return {
    URI: URI35,
    _E: void 0,
    map: _map30,
    ap: function(fab, fa) {
      return pipe(fab, ap29(fa));
    }
  };
};
function getApplicative4(A, S) {
  var ap29 = getApply4(A, S).ap;
  return {
    URI: URI35,
    _E: void 0,
    map: _map30,
    ap: ap29,
    of: of25
  };
}
function getChain3(S) {
  var A = getApply4(ApplicativePar2, S);
  var chain30 = chain28(Monad15, S);
  return {
    URI: URI35,
    _E: void 0,
    map: _map30,
    ap: A.ap,
    chain: function(ma, f) {
      return pipe(ma, chain30(f));
    }
  };
}
function getMonad3(S) {
  var A = getApplicative4(ApplicativePar2, S);
  var C = getChain3(S);
  return {
    URI: URI35,
    _E: void 0,
    map: _map30,
    ap: A.ap,
    of: of25,
    chain: C.chain,
    fromIO: fromIO11,
    fromTask: fromTask7
  };
}
var Functor30 = {
  URI: URI35,
  map: _map30
};
var flap31 = flap(Functor30);
var Pointed22 = {
  URI: URI35,
  of: of25
};
var Bifunctor11 = {
  URI: URI35,
  bimap: _bimap7,
  mapLeft: _mapLeft7
};
var FromEither13 = {
  URI: URI35,
  fromEither: fromEither12
};
var fromOption13 = fromOption(FromEither13);
var fromOptionK15 = fromOptionK(FromEither13);
var fromPredicate15 = fromPredicate(FromEither13);
var FromThese2 = {
  URI: URI35,
  fromThese
};
var fromTheseK2 = fromTheseK(FromThese2);
var FromIO11 = {
  URI: URI35,
  fromIO: fromIO11
};
var fromIOK11 = fromIOK(FromIO11);
var FromTask7 = {
  URI: URI35,
  fromIO: fromIO11,
  fromTask: fromTask7
};
var fromTaskK7 = fromTaskK(FromTask7);
var toTuple23 = toTuple22(Functor19);
var ApT15 = of25(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex17 = function(S) {
  var g = traverseReadonlyNonEmptyArrayWithIndex16(S);
  return function(f) {
    return flow(traverseReadonlyNonEmptyArrayWithIndex10(f), map24(g(SK)));
  };
};
var traverseReadonlyArrayWithIndex17 = function(S) {
  return function(f) {
    var g = traverseReadonlyNonEmptyArrayWithIndex17(S)(f);
    return function(as15) {
      return isNonEmpty(as15) ? g(as15) : ApT15;
    };
  };
};
var traverseReadonlyNonEmptyArrayWithIndexSeq7 = function(S) {
  return function(f) {
    return function(as15) {
      return function() {
        return tail(as15).reduce(function(acc, a, i) {
          return acc.then(function(ebs) {
            return isLeft3(ebs) ? acc : f(i + 1, a)().then(function(eb) {
              if (isLeft3(eb)) {
                return eb;
              }
              if (isBoth(eb)) {
                var right_1 = ebs.right;
                right_1.push(eb.right);
                return isBoth(ebs) ? both(S.concat(ebs.left, eb.left), right_1) : both(eb.left, right_1);
              }
              ebs.right.push(eb.right);
              return ebs;
            });
          });
        }, f(0, head(as15))().then(map37(singleton)));
      };
    };
  };
};
var traverseReadonlyArrayWithIndexSeq7 = function(S) {
  return function(f) {
    var g = traverseReadonlyNonEmptyArrayWithIndexSeq7(S)(f);
    return function(as15) {
      return isNonEmpty(as15) ? g(as15) : ApT15;
    };
  };
};
var functorTaskThese = {
  URI: URI35,
  map: _map30
};
var bifunctorTaskThese = {
  URI: URI35,
  bimap: _bimap7,
  mapLeft: _mapLeft7
};
var toTuple3 = function(e, a) {
  return toTuple23(function() {
    return e;
  }, function() {
    return a;
  });
};
var taskThese = {
  URI: URI35,
  map: _map30,
  bimap: _bimap7,
  mapLeft: _mapLeft7
};
var getSemigroup20 = function(SE, SA) {
  return getApplySemigroup(ApplySeq)(getSemigroup19(SE, SA));
};

// node_modules/fp-ts/es6/Traced.js
var Traced_exports = {};
__export(Traced_exports, {
  Functor: () => Functor31,
  URI: () => URI36,
  censor: () => censor,
  flap: () => flap32,
  getComonad: () => getComonad,
  listen: () => listen,
  listens: () => listens,
  map: () => map40,
  traced: () => traced,
  tracks: () => tracks
});
function tracks(M, f) {
  return function(wa) {
    return wa(f(wa(M.empty)));
  };
}
function listen(wa) {
  return function(e) {
    return [wa(e), e];
  };
}
function listens(f) {
  return function(wa) {
    return function(e) {
      return [wa(e), f(e)];
    };
  };
}
function censor(f) {
  return function(wa) {
    return function(e) {
      return wa(f(e));
    };
  };
}
function getComonad(monoid) {
  function extend13(wa, f) {
    return function(p1) {
      return f(function(p2) {
        return wa(monoid.concat(p1, p2));
      });
    };
  }
  function extract8(wa) {
    return wa(monoid.empty);
  }
  return {
    URI: URI36,
    _E: void 0,
    map: _map31,
    extend: extend13,
    extract: extract8
  };
}
var _map31 = function(fa, f) {
  return pipe(fa, map40(f));
};
var map40 = function(f) {
  return function(fa) {
    return function(p) {
      return f(fa(p));
    };
  };
};
var URI36 = "Traced";
var Functor31 = {
  URI: URI36,
  map: _map31
};
var flap32 = flap(Functor31);
var traced = Functor31;

// node_modules/fp-ts/es6/Traversable.js
var Traversable_exports = {};
__export(Traversable_exports, {
  getTraversableComposition: () => getTraversableComposition,
  sequence: () => sequence12,
  traverse: () => traverse12
});
function traverse12(T, G) {
  return function(F) {
    var traverseT = T.traverse(F);
    var traverseG = G.traverse(F);
    return function(f) {
      return function(fga) {
        return traverseT(fga, function(ga) {
          return traverseG(ga, f);
        });
      };
    };
  };
}
function sequence12(T, G) {
  return function(F) {
    var sequenceT2 = T.sequence(F);
    var sequenceG = G.sequence(F);
    return function(fgha) {
      return sequenceT2(T.map(fgha, sequenceG));
    };
  };
}
function getTraversableComposition(F, G) {
  var map44 = getFunctorComposition(F, G).map;
  var FC = getFoldableComposition(F, G);
  var _traverse14 = traverse12(F, G);
  var _sequence3 = sequence12(F, G);
  return {
    map: map44,
    reduce: FC.reduce,
    foldMap: FC.foldMap,
    reduceRight: FC.reduceRight,
    traverse: function(H) {
      var traverseH = _traverse14(H);
      return function(fga, f) {
        return pipe(fga, traverseH(f));
      };
    },
    sequence: function(H) {
      var sequenceH = _sequence3(H);
      return function(fgha) {
        return pipe(fgha, sequenceH);
      };
    }
  };
}

// node_modules/fp-ts/es6/TraversableWithIndex.js
var TraversableWithIndex_exports = {};

// node_modules/fp-ts/es6/Tree.js
var Tree_exports = {};
__export(Tree_exports, {
  Applicative: () => Applicative16,
  Apply: () => Apply15,
  Chain: () => Chain21,
  Comonad: () => Comonad6,
  Do: () => Do19,
  Foldable: () => Foldable12,
  Functor: () => Functor32,
  Monad: () => Monad21,
  Pointed: () => Pointed23,
  Traversable: () => Traversable12,
  URI: () => URI37,
  ap: () => ap28,
  apFirst: () => apFirst22,
  apS: () => apS22,
  apSecond: () => apSecond22,
  bind: () => bind22,
  bindTo: () => bindTo22,
  chain: () => chain29,
  chainFirst: () => chainFirst22,
  drawForest: () => drawForest,
  drawTree: () => drawTree,
  duplicate: () => duplicate10,
  elem: () => elem12,
  exists: () => exists6,
  extend: () => extend11,
  extract: () => extract6,
  flap: () => flap33,
  flatMap: () => flatMap25,
  flatten: () => flatten21,
  fold: () => fold16,
  foldMap: () => foldMap18,
  getEq: () => getEq16,
  getShow: () => getShow16,
  let: () => let_21,
  make: () => make2,
  map: () => map41,
  of: () => of26,
  reduce: () => reduce18,
  reduceRight: () => reduceRight18,
  sequence: () => sequence13,
  traverse: () => traverse13,
  tree: () => tree,
  unfoldForest: () => unfoldForest,
  unfoldForestM: () => unfoldForestM,
  unfoldTree: () => unfoldTree,
  unfoldTreeM: () => unfoldTreeM
});
function make2(value, forest) {
  if (forest === void 0) {
    forest = [];
  }
  return {
    value,
    forest
  };
}
function getShow16(S) {
  var show = function(t) {
    return isEmpty2(t.forest) ? "make(".concat(S.show(t.value), ")") : "make(".concat(S.show(t.value), ", [").concat(t.forest.map(show).join(", "), "])");
  };
  return {
    show
  };
}
function getEq16(E) {
  var SA;
  var R = fromEquals(function(x, y) {
    return E.equals(x.value, y.value) && SA.equals(x.forest, y.forest);
  });
  SA = getEq4(R);
  return R;
}
var draw = function(indentation, forest) {
  var r = "";
  var len = forest.length;
  var tree2;
  for (var i = 0; i < len; i++) {
    tree2 = forest[i];
    var isLast = i === len - 1;
    r += indentation + (isLast ? "└" : "├") + "─ " + tree2.value;
    r += draw(indentation + (len > 1 && !isLast ? "│  " : "   "), tree2.forest);
  }
  return r;
};
function drawForest(forest) {
  return draw("\n", forest);
}
function drawTree(tree2) {
  return tree2.value + drawForest(tree2.forest);
}
function unfoldTree(b, f) {
  var _a = f(b), a = _a[0], bs = _a[1];
  return { value: a, forest: unfoldForest(bs, f) };
}
function unfoldForest(bs, f) {
  return bs.map(function(b) {
    return unfoldTree(b, f);
  });
}
function unfoldTreeM(M) {
  var unfoldForestMM = unfoldForestM(M);
  return function(b, f) {
    return M.chain(f(b), function(_a) {
      var a = _a[0], bs = _a[1];
      return M.map(unfoldForestMM(bs, f), function(ts) {
        return { value: a, forest: ts };
      });
    });
  };
}
function unfoldForestM(M) {
  var traverseM = traverse4(M);
  return function(bs, f) {
    return pipe(bs, traverseM(function(b) {
      return unfoldTreeM(M)(b, f);
    }));
  };
}
function fold16(f) {
  var go = function(tree2) {
    return f(tree2.value, tree2.forest.map(go));
  };
  return go;
}
var _map32 = function(fa, f) {
  return pipe(fa, map41(f));
};
var _ap17 = function(fab, fa) {
  return flatMap25(fab, function(f) {
    return pipe(fa, map41(f));
  });
};
var _reduce12 = function(fa, b, f) {
  return pipe(fa, reduce18(b, f));
};
var _foldMap12 = function(M) {
  var foldMapM = foldMap18(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight12 = function(fa, b, f) {
  return pipe(fa, reduceRight18(b, f));
};
var _extend10 = function(wa, f) {
  return pipe(wa, extend11(f));
};
var _traverse12 = function(F) {
  var traverseF = traverse13(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var ap28 = function(fa) {
  return function(fab) {
    return _ap17(fab, fa);
  };
};
var flatMap25 = dual(2, function(ma, f) {
  var _a = f(ma.value), value = _a.value, forest = _a.forest;
  var concat5 = getMonoid5().concat;
  return {
    value,
    forest: concat5(forest, ma.forest.map(flatMap25(f)))
  };
});
var extend11 = function(f) {
  return function(wa) {
    return {
      value: f(wa),
      forest: wa.forest.map(extend11(f))
    };
  };
};
var duplicate10 = extend11(identity);
var flatten21 = flatMap25(identity);
var map41 = function(f) {
  return function(fa) {
    return {
      value: f(fa.value),
      forest: fa.forest.map(map41(f))
    };
  };
};
var reduce18 = function(b, f) {
  return function(fa) {
    var r = f(b, fa.value);
    var len = fa.forest.length;
    for (var i = 0; i < len; i++) {
      r = pipe(fa.forest[i], reduce18(r, f));
    }
    return r;
  };
};
var foldMap18 = function(M) {
  return function(f) {
    return reduce18(M.empty, function(acc, a) {
      return M.concat(acc, f(a));
    });
  };
};
var reduceRight18 = function(b, f) {
  return function(fa) {
    var r = b;
    var len = fa.forest.length;
    for (var i = len - 1; i >= 0; i--) {
      r = pipe(fa.forest[i], reduceRight18(r, f));
    }
    return f(fa.value, r);
  };
};
var extract6 = function(wa) {
  return wa.value;
};
var traverse13 = function(F) {
  var traverseF = traverse4(F);
  var out = function(f) {
    return function(ta) {
      return F.ap(F.map(f(ta.value), function(value) {
        return function(forest) {
          return {
            value,
            forest
          };
        };
      }), pipe(ta.forest, traverseF(out(f))));
    };
  };
  return out;
};
var sequence13 = function(F) {
  return traverse13(F)(identity);
};
var of26 = function(a) {
  return make2(a);
};
var URI37 = "Tree";
var Functor32 = {
  URI: URI37,
  map: _map32
};
var flap33 = flap(Functor32);
var Pointed23 = {
  URI: URI37,
  of: of26
};
var Apply15 = {
  URI: URI37,
  map: _map32,
  ap: _ap17
};
var apFirst22 = apFirst(Apply15);
var apSecond22 = apSecond(Apply15);
var Applicative16 = {
  URI: URI37,
  map: _map32,
  ap: _ap17,
  of: of26
};
var Chain21 = {
  URI: URI37,
  map: _map32,
  ap: _ap17,
  chain: flatMap25
};
var Monad21 = {
  URI: URI37,
  map: _map32,
  ap: _ap17,
  of: of26,
  chain: flatMap25
};
var chainFirst22 = chainFirst(Chain21);
var Foldable12 = {
  URI: URI37,
  reduce: _reduce12,
  foldMap: _foldMap12,
  reduceRight: _reduceRight12
};
var Traversable12 = {
  URI: URI37,
  map: _map32,
  reduce: _reduce12,
  foldMap: _foldMap12,
  reduceRight: _reduceRight12,
  traverse: _traverse12,
  sequence: sequence13
};
var Comonad6 = {
  URI: URI37,
  map: _map32,
  extend: _extend10,
  extract: extract6
};
var Do19 = of26(emptyRecord);
var bindTo22 = bindTo(Functor32);
var let_21 = let_(Functor32);
var bind22 = bind(Chain21);
var apS22 = apS(Apply15);
function elem12(E) {
  var go = function(a, fa) {
    return E.equals(a, fa.value) || fa.forest.some(function(tree2) {
      return go(a, tree2);
    });
  };
  return go;
}
var exists6 = function(predicate) {
  return function(ma) {
    return predicate(ma.value) || ma.forest.some(exists6(predicate));
  };
};
var chain29 = flatMap25;
var tree = {
  URI: URI37,
  map: _map32,
  of: of26,
  ap: _ap17,
  chain: flatMap25,
  reduce: _reduce12,
  foldMap: _foldMap12,
  reduceRight: _reduceRight12,
  traverse: _traverse12,
  sequence: sequence13,
  extract: extract6,
  extend: _extend10
};

// node_modules/fp-ts/es6/Tuple.js
var Tuple_exports = {};
__export(Tuple_exports, {
  Bifunctor: () => Bifunctor12,
  Comonad: () => Comonad7,
  Foldable: () => Foldable13,
  Functor: () => Functor33,
  Semigroupoid: () => Semigroupoid2,
  Traversable: () => Traversable13,
  URI: () => URI38,
  bimap: () => bimap15,
  compose: () => compose5,
  duplicate: () => duplicate11,
  extend: () => extend12,
  extract: () => extract7,
  flap: () => flap34,
  foldMap: () => foldMap19,
  fst: () => fst2,
  getApplicative: () => getApplicative5,
  getApply: () => getApply5,
  getChain: () => getChain4,
  getChainRec: () => getChainRec2,
  getMonad: () => getMonad4,
  map: () => map42,
  mapFst: () => mapFst2,
  mapLeft: () => mapLeft15,
  mapSnd: () => mapSnd2,
  reduce: () => reduce19,
  reduceRight: () => reduceRight19,
  sequence: () => sequence14,
  snd: () => snd2,
  swap: () => swap11,
  traverse: () => traverse14,
  tuple: () => tuple8
});
var fst2 = fst;
var snd2 = snd;
var swap11 = function(ea) {
  return [snd2(ea), fst2(ea)];
};
function getApply5(S) {
  return {
    URI: URI38,
    _E: void 0,
    map: _map33,
    ap: function(fab, fa) {
      return [fst2(fab)(fst2(fa)), S.concat(snd2(fab), snd2(fa))];
    }
  };
}
var of27 = function(M) {
  return function(a) {
    return [a, M.empty];
  };
};
function getApplicative5(M) {
  var A = getApply5(M);
  return {
    URI: URI38,
    _E: void 0,
    map: A.map,
    ap: A.ap,
    of: of27(M)
  };
}
function getChain4(S) {
  var A = getApply5(S);
  return {
    URI: URI38,
    _E: void 0,
    map: A.map,
    ap: A.ap,
    chain: function(ma, f) {
      var _a = f(fst2(ma)), b = _a[0], s = _a[1];
      return [b, S.concat(snd2(ma), s)];
    }
  };
}
function getMonad4(M) {
  var C = getChain4(M);
  return {
    URI: URI38,
    _E: void 0,
    map: C.map,
    ap: C.ap,
    chain: C.chain,
    of: of27(M)
  };
}
function getChainRec2(M) {
  var chainRec = function(a, f) {
    var result = f(a);
    var acc = M.empty;
    var s = fst2(result);
    while (s._tag === "Left") {
      acc = M.concat(acc, snd2(result));
      result = f(s.left);
      s = fst2(result);
    }
    return [s.right, M.concat(acc, snd2(result))];
  };
  var C = getChain4(M);
  return {
    URI: URI38,
    _E: void 0,
    map: C.map,
    ap: C.ap,
    chain: C.chain,
    chainRec
  };
}
var _compose3 = function(bc, ab) {
  return pipe(bc, compose5(ab));
};
var _map33 = function(fa, f) {
  return pipe(fa, mapFst2(f));
};
var _bimap8 = function(fa, f, g) {
  return pipe(fa, bimap15(f, g));
};
var _mapLeft8 = function(fa, f) {
  return pipe(fa, mapSnd2(f));
};
var _extend11 = function(wa, f) {
  return pipe(wa, extend12(f));
};
var _reduce13 = function(fa, b, f) {
  return pipe(fa, reduce19(b, f));
};
var _foldMap13 = function(M) {
  var foldMapM = foldMap19(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight13 = function(fa, b, f) {
  return pipe(fa, reduceRight19(b, f));
};
function _traverse13(F) {
  var traverseF = traverse14(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
}
var bimap15 = function(f, g) {
  return function(fa) {
    return [g(fst2(fa)), f(snd2(fa))];
  };
};
var mapFst2 = function(f) {
  return function(fa) {
    return [f(fst2(fa)), snd2(fa)];
  };
};
var mapSnd2 = function(f) {
  return function(fa) {
    return [fst2(fa), f(snd2(fa))];
  };
};
var compose5 = function(ab) {
  return function(bc) {
    return [fst2(bc), snd2(ab)];
  };
};
var extend12 = function(f) {
  return function(wa) {
    return [f(wa), snd2(wa)];
  };
};
var duplicate11 = extend12(identity);
var extract7 = extract4;
var foldMap19 = foldMap14;
var reduce19 = reduce14;
var reduceRight19 = reduceRight14;
var traverse14 = function(F) {
  return function(f) {
    return function(ta) {
      return F.map(f(fst2(ta)), function(b) {
        return [b, snd2(ta)];
      });
    };
  };
};
var sequence14 = function(F) {
  return function(fas) {
    return F.map(fst2(fas), function(a) {
      return [a, snd2(fas)];
    });
  };
};
var URI38 = "Tuple";
var Functor33 = {
  URI: URI38,
  map: _map33
};
var flap34 = flap(Functor33);
var Bifunctor12 = {
  URI: URI38,
  bimap: _bimap8,
  mapLeft: _mapLeft8
};
var Semigroupoid2 = {
  URI: URI38,
  compose: _compose3
};
var Comonad7 = {
  URI: URI38,
  map: _map33,
  extend: _extend11,
  extract: extract7
};
var Foldable13 = {
  URI: URI38,
  reduce: _reduce13,
  foldMap: _foldMap13,
  reduceRight: _reduceRight13
};
var Traversable13 = {
  URI: URI38,
  map: _map33,
  reduce: _reduce13,
  foldMap: _foldMap13,
  reduceRight: _reduceRight13,
  traverse: _traverse13,
  sequence: sequence14
};
var map42 = mapFst2;
var mapLeft15 = mapSnd2;
var tuple8 = {
  URI: URI38,
  compose: _compose3,
  map: _map33,
  bimap: _bimap8,
  mapLeft: _mapLeft8,
  extract: extract7,
  extend: _extend11,
  reduce: _reduce13,
  foldMap: _foldMap13,
  reduceRight: _reduceRight13,
  traverse: _traverse13,
  sequence: sequence14
};

// node_modules/fp-ts/es6/Unfoldable.js
var Unfoldable_exports = {};

// node_modules/fp-ts/es6/ValidationT.js
var ValidationT_exports = {};
__export(ValidationT_exports, {
  getValidationM: () => getValidationM
});
function getValidationM(S, M) {
  var A = getApplicativeComposition(M, getApplicativeValidation(S));
  return {
    map: A.map,
    ap: A.ap,
    of: A.of,
    chain: function(ma, f) {
      return M.chain(ma, function(e) {
        return isLeft(e) ? M.of(left(e.left)) : f(e.right);
      });
    },
    alt: function(me, that) {
      return M.chain(me, function(e1) {
        return isRight(e1) ? M.of(e1) : M.map(that(), function(e2) {
          return isLeft(e2) ? left(S.concat(e1.left, e2.left)) : e2;
        });
      });
    }
  };
}

// node_modules/fp-ts/es6/void.js
var void_exports = {};
__export(void_exports, {
  Monoid: () => Monoid3,
  Semigroup: () => Semigroup3
});
var Semigroup3 = constant2(void 0);
var Monoid3 = {
  concat: Semigroup3.concat,
  empty: void 0
};

// node_modules/fp-ts/es6/Writer.js
var Writer_exports = {};
__export(Writer_exports, {
  Functor: () => Functor34,
  URI: () => URI39,
  censor: () => censor2,
  evalWriter: () => evalWriter,
  evaluate: () => evaluate4,
  execWriter: () => execWriter,
  execute: () => execute4,
  flap: () => flap35,
  getApplicative: () => getApplicative6,
  getApply: () => getApply6,
  getChain: () => getChain5,
  getMonad: () => getMonad5,
  getPointed: () => getPointed,
  listen: () => listen2,
  listens: () => listens2,
  map: () => map43,
  pass: () => pass,
  tell: () => tell,
  writer: () => writer
});
var tell = function(w) {
  return function() {
    return [void 0, w];
  };
};
var listen2 = function(fa) {
  return function() {
    var _a = fa(), a = _a[0], w = _a[1];
    return [[a, w], w];
  };
};
var pass = function(fa) {
  return function() {
    var _a = fa(), _b = _a[0], a = _b[0], f = _b[1], w = _a[1];
    return [a, f(w)];
  };
};
var listens2 = function(f) {
  return function(fa) {
    return function() {
      var _a = fa(), a = _a[0], w = _a[1];
      return [[a, f(w)], w];
    };
  };
};
var censor2 = function(f) {
  return function(fa) {
    return function() {
      var _a = fa(), a = _a[0], w = _a[1];
      return [a, f(w)];
    };
  };
};
var _map34 = function(fa, f) {
  return pipe(fa, map43(f));
};
var map43 = function(f) {
  return function(fa) {
    return function() {
      var _a = fa(), a = _a[0], w = _a[1];
      return [f(a), w];
    };
  };
};
var URI39 = "Writer";
var getPointed = function(M) {
  return {
    URI: URI39,
    _E: void 0,
    of: function(a) {
      return function() {
        return [a, M.empty];
      };
    }
  };
};
var getApply6 = function(S) {
  return {
    URI: URI39,
    _E: void 0,
    map: _map34,
    ap: function(fab, fa) {
      return function() {
        var _a = fab(), f = _a[0], w1 = _a[1];
        var _b = fa(), a = _b[0], w2 = _b[1];
        return [f(a), S.concat(w1, w2)];
      };
    }
  };
};
var getApplicative6 = function(M) {
  var A = getApply6(M);
  var P = getPointed(M);
  return {
    URI: URI39,
    _E: void 0,
    map: _map34,
    ap: A.ap,
    of: P.of
  };
};
function getChain5(S) {
  var A = getApply6(S);
  return {
    URI: URI39,
    _E: void 0,
    map: _map34,
    ap: A.ap,
    chain: function(fa, f) {
      return function() {
        var _a = fa(), a = _a[0], w1 = _a[1];
        var _b = f(a)(), b = _b[0], w2 = _b[1];
        return [b, S.concat(w1, w2)];
      };
    }
  };
}
function getMonad5(M) {
  var A = getApplicative6(M);
  var C = getChain5(M);
  return {
    URI: URI39,
    _E: void 0,
    map: _map34,
    ap: A.ap,
    of: A.of,
    chain: C.chain
  };
}
var Functor34 = {
  URI: URI39,
  map: _map34
};
var flap35 = flap(Functor34);
var evaluate4 = function(fa) {
  return fa()[0];
};
var execute4 = function(fa) {
  return fa()[1];
};
var evalWriter = function(fa) {
  return fa()[0];
};
var execWriter = function(fa) {
  return fa()[1];
};
var writer = Functor34;

// node_modules/fp-ts/es6/WriterT.js
var WriterT_exports = {};
__export(WriterT_exports, {
  getWriterM: () => getWriterM
});
function getWriterM(M) {
  var map44 = function(fa, f) {
    return function() {
      return M.map(fa(), function(_a) {
        var a = _a[0], w = _a[1];
        return [f(a), w];
      });
    };
  };
  return {
    map: map44,
    evalWriter: function(fa) {
      return M.map(fa(), function(_a) {
        var a = _a[0];
        return a;
      });
    },
    execWriter: function(fa) {
      return M.map(fa(), function(_a) {
        var _ = _a[0], w = _a[1];
        return w;
      });
    },
    tell: function(w) {
      return function() {
        return M.of([void 0, w]);
      };
    },
    listen: function(fa) {
      return function() {
        return M.map(fa(), function(_a) {
          var a = _a[0], w = _a[1];
          return [[a, w], w];
        });
      };
    },
    pass: function(fa) {
      return function() {
        return M.map(fa(), function(_a) {
          var _b = _a[0], a = _b[0], f = _b[1], w = _a[1];
          return [a, f(w)];
        });
      };
    },
    listens: function(fa, f) {
      return function() {
        return M.map(fa(), function(_a) {
          var a = _a[0], w = _a[1];
          return [[a, f(w)], w];
        });
      };
    },
    censor: function(fa, f) {
      return function() {
        return M.map(fa(), function(_a) {
          var a = _a[0], w = _a[1];
          return [a, f(w)];
        });
      };
    },
    getMonad: function(W) {
      return {
        _E: void 0,
        map: map44,
        of: function(a) {
          return function() {
            return M.of([a, W.empty]);
          };
        },
        ap: function(mab, ma) {
          return function() {
            return M.chain(mab(), function(_a) {
              var f = _a[0], w1 = _a[1];
              return M.map(ma(), function(_a2) {
                var a = _a2[0], w2 = _a2[1];
                return [f(a), W.concat(w1, w2)];
              });
            });
          };
        },
        chain: function(ma, f) {
          return function() {
            return M.chain(ma(), function(_a) {
              var a = _a[0], w1 = _a[1];
              return M.map(f(a)(), function(_a2) {
                var b = _a2[0], w2 = _a2[1];
                return [b, W.concat(w1, w2)];
              });
            });
          };
        }
      };
    }
  };
}
export {
  Alt_exports as alt,
  Alternative_exports as alternative,
  Applicative_exports as applicative,
  Apply_exports as apply,
  Array_exports as array,
  Bifunctor_exports as bifunctor,
  boolean_exports as boolean,
  BooleanAlgebra_exports as booleanAlgebra,
  Bounded_exports as bounded,
  BoundedDistributiveLattice_exports as boundedDistributiveLattice,
  BoundedJoinSemilattice_exports as boundedJoinSemilattice,
  BoundedLattice_exports as boundedLattice,
  BoundedMeetSemilattice_exports as boundedMeetSemilattice,
  Category_exports as category,
  Chain_exports as chain,
  ChainRec_exports as chainRec,
  Choice_exports as choice,
  Comonad_exports as comonad,
  Compactable_exports as compactable,
  Console_exports as console,
  Const_exports as const,
  Contravariant_exports as contravariant,
  Date_exports as date,
  DistributiveLattice_exports as distributiveLattice,
  Either_exports as either,
  EitherT_exports as eitherT,
  Endomorphism_exports as endomorphism,
  Eq_exports as eq,
  Extend_exports as extend,
  Field_exports as field,
  Filterable_exports as filterable,
  FilterableWithIndex_exports as filterableWithIndex,
  Foldable_exports as foldable,
  FoldableWithIndex_exports as foldableWithIndex,
  FromEither_exports as fromEither,
  FromIO_exports as fromIO,
  FromReader_exports as fromReader,
  FromState_exports as fromState,
  FromTask_exports as fromTask,
  FromThese_exports as fromThese,
  function_exports as function,
  Functor_exports as functor,
  FunctorWithIndex_exports as functorWithIndex,
  Group_exports as group,
  HeytingAlgebra_exports as heytingAlgebra,
  HKT_exports as hkt,
  Identity_exports as identity,
  Invariant_exports as invariant,
  IO_exports as io,
  IOEither_exports as ioEither,
  IOOption_exports as ioOption,
  IORef_exports as ioRef,
  JoinSemilattice_exports as joinSemilattice,
  Json_exports as json,
  Lattice_exports as lattice,
  Magma_exports as magma,
  Map_exports as map,
  MeetSemilattice_exports as meetSemilattice,
  Monad_exports as monad,
  MonadIO_exports as monadIO,
  MonadTask_exports as monadTask,
  MonadThrow_exports as monadThrow,
  Monoid_exports as monoid,
  NaturalTransformation_exports as naturalTransformation,
  NonEmptyArray_exports as nonEmptyArray,
  number_exports as number,
  Option_exports as option,
  OptionT_exports as optionT,
  Ord_exports as ord,
  Ordering_exports as ordering,
  pipeable_exports as pipeable,
  Pointed_exports as pointed,
  Predicate_exports as predicate,
  Profunctor_exports as profunctor,
  Random_exports as random,
  Reader_exports as reader,
  ReaderEither_exports as readerEither,
  ReaderIO_exports as readerIO,
  ReaderT_exports as readerT,
  ReaderTask_exports as readerTask,
  ReaderTaskEither_exports as readerTaskEither,
  ReadonlyArray_exports as readonlyArray,
  ReadonlyMap_exports as readonlyMap,
  ReadonlyNonEmptyArray_exports as readonlyNonEmptyArray,
  ReadonlyRecord_exports as readonlyRecord,
  ReadonlySet_exports as readonlySet,
  ReadonlyTuple_exports as readonlyTuple,
  Record_exports as record,
  Refinement_exports as refinement,
  Ring_exports as ring,
  Semigroup_exports as semigroup,
  Semigroupoid_exports as semigroupoid,
  Semiring_exports as semiring,
  Separated_exports as separated,
  Set_exports as set,
  Show_exports as show,
  State_exports as state,
  StateReaderTaskEither_exports as stateReaderTaskEither,
  StateT_exports as stateT,
  Store_exports as store,
  string_exports as string,
  Strong_exports as strong,
  struct_exports as struct,
  Task_exports as task,
  TaskEither_exports as taskEither,
  TaskOption_exports as taskOption,
  TaskThese_exports as taskThese,
  These_exports as these,
  TheseT_exports as theseT,
  Traced_exports as traced,
  Traversable_exports as traversable,
  TraversableWithIndex_exports as traversableWithIndex,
  Tree_exports as tree,
  Tuple_exports as tuple,
  Unfoldable_exports as unfoldable,
  ValidationT_exports as validationT,
  void_exports as void,
  Witherable_exports as witherable,
  Writer_exports as writer,
  WriterT_exports as writerT,
  Zero_exports as zero
};
//# sourceMappingURL=fp-ts.js.map
